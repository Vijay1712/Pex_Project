<?xml version="1.0" encoding="utf-8"?>
<pex id="{1c908c37-0c35-4ccf-8279-dc646c7a660d}" creationTime="2019-02-15 20:31:08Z" configuration="*\*\*" created="2019-02-15 20:31:08Z" pexVersion="0.94.51023.0" xml="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\reports\190215.143108.18140.pex\report.per" html="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\reports\190215.143108.18140.pex\report.html"><environment commandLine="&quot;C:\Program Files\Microsoft Pex\bin\Microsoft.Pex.exe&quot; &quot;C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll&quot; /x64failsilently /clrversion:v4.0.30319 /donotopenreport /reportlevel:Xml /reportrootpath:&quot;C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\reports&quot; /testframework:VisualStudioUnitTest /testlanguage:cs /testprojectfile:&quot;C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\meta_projectAddToEnd.csproj&quot; /testprojectnotupdate /testprojectskip" machineName="DESKTOP-OS6C121" osVersion="Microsoft Windows NT 6.2.9200.0" processorCount="8" clrVersion="4.0.30319.42000" bitness="x64" user="Vijayendra Jagtap"><envVars><envVar name="SESSIONNAME" value="Console"/>
<envVar name="CLRMONITOR_INJECT_TYPES" value=""/>
<envVar name="FPS_BROWSER_USER_PROFILE_STRING" value="Default"/>
<envVar name="COMPLUS_DEFAULTVERSION" value="v4.0.30319"/>
<envVar name="CLRMONITOR_INJECT_ASSEMBLIES" value=""/>
<envVar name="PROCESSOR_IDENTIFIER" value="Intel64 Family 6 Model 142 Stepping 10, GenuineIntel"/>
<envVar name="TMP" value="C:\Users\VIJAYE~1\AppData\Local\Temp"/>
<envVar name="CLRMONITOR_INSTRUMENT_ASSEMBLIES_EXCLUSIONS" value=""/>
<envVar name="Path" value="C:\Program Files\Java\jdk-11.0.2\bin;C:\Program Files\Git\bin;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;c:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;c:\Program Files\Microsoft SQL Server\100\Tools\Binn\;c:\Program Files\Microsoft SQL Server\100\DTS\Binn\;C:\Program Files\Sublime Text 3;C:\WINDOWS\system32;C:\HashiCorp\Vagrant\bin;C:\Users\Vijayendra Jagtap\AppData\Local\Programs\Python\Python37\Scripts\;C:\Users\Vijayendra Jagtap\AppData\Local\Programs\Python\Python37\;C:\Users\Vijayendra Jagtap\AppData\Local\Microsoft\WindowsApps;C:\Users\Vijayendra Jagtap\AppData\Local\GitHubDesktop\bin;C:\Users\Vijayendra Jagtap\AppData\Local\Microsoft\WindowsApps;;C:\intelFPGA\18.0\modelsim_ase\win32aloem;C:\intelFPGA_lite\18.0\modelsim_ase\win32aloem"/>
<envVar name="PROCESSOR_REVISION" value="8e0a"/>
<envVar name="CLRMONITOR_INSTRUMENT_TYPES" value="System.Array,System.Array+ArrayEnumerator,System.Array+FunctorComparer`1,System.Array+SZArrayEnumerator,System.Array+SorterGenericArray,System.Array+SorterObjectArray,System.Boolean,System.Byte,System.Char,System.CharEnumerator,System.ComponentModel.Component,System.ComponentModel.Container,System.ComponentModel.Container+Site,System.Convert,System.Currency,System.DateTime,System.Decimal,System.Diagnostics.Assert,System.Double,System.Globalization.CharUnicodeInfo,System.Globalization.CultureTableRecord,System.Globalization.TextInfo,System.Guid,System.IO.MemoryStream,System.IO.Stream,System.IO.StreamReader,System.IO.StreamWriter,System.IO.StringReader,System.IO.StringWriter,System.Int16,System.Int32,System.Int64,System.Lazy`1,System.Lazy`1+Boxed,System.Lazy`1+LazyInternalExceptionHolder,System.Math,System.Nullable,System.Nullable`1,System.OrdinalComparer,System.SByte,System.SZArrayHelper,System.SZArrayHelper+SZGenericArrayEnumerator`1,System.Single,System.String,System.StringComparer,System.Text.ASCIIEncoding,System.Text.DecoderNLS,System.Text.Encoding,System.Text.UTF8Encoding,System.TimeSpan,System.Tuple,System.Tuple`1,System.Tuple`2,System.Tuple`3,System.Tuple`4,System.Tuple`5,System.Tuple`6,System.Tuple`7,System.Tuple`8,System.UInt16,System.UInt32,System.UInt64,System.Xml.XmlTextWriter,System.Xml.XmlTextWriter+Namespace,System.Xml.XmlTextWriter+NamespaceState,System.Xml.XmlTextWriter+SpecialAttr,System.Xml.XmlTextWriter+State,System.Xml.XmlTextWriter+TagInfo,System.Xml.XmlTextWriter+Token,System.Xml.XmlWriter,System.Xml.XmlWriter+&lt;WriteAttributeStringAsyncHelper&gt;d__82,System.Xml.XmlWriter+&lt;WriteAttributesAsync&gt;d__102,System.Xml.XmlWriter+&lt;WriteElementStringAsync&gt;d__107,System.Xml.XmlWriter+&lt;WriteLocalNamespacesAsync&gt;d__108,System.Xml.XmlWriter+&lt;WriteNodeAsync&gt;d__106,System.Xml.XmlWriter+&lt;WriteNodeAsync_CallAsyncReader&gt;d__105,System.Xml.XmlWriter+&lt;WriteNodeAsync_CallSyncReader&gt;d__104,System.Xml.XmlWriter+&lt;WriteQualifiedNameAsync&gt;d__101,__Box`1,__SzArrayHelper`1"/>
<envVar name="COMPLUS_ProfAPI_ProfilerCompatibilitySetting" value="EnableV2Profiler"/>
<envVar name="CLRMONITOR_CLSID" value="{fa6276ae-c2b7-443f-9cac-ea13fd3b342a}"/>
<envVar name="QSYS_ROOTDIR" value="C:\intelFPGA_lite\18.0\quartus\sopc_builder\bin"/>
<envVar name="FPS_BROWSER_APP_PROFILE_STRING" value="Internet Explorer"/>
<envVar name="CLRMONITOR_SUBSTITUTIONS" value="C:\WINDOWS\assembly\GAC_MSIL\Microsoft.ExtendedReflection\0.94.0.0__31bf3856ad364e35\Microsoft.ExtendedReflection.dll"/>
<envVar name="CLRMONITOR_ERASE_FINALIZER_TYPES" value=""/>
<envVar name="CLRMONITOR_INJECT_NAMESPACES" value=""/>
<envVar name="USERNAME" value="Vijayendra Jagtap"/>
<envVar name="SystemRoot" value="C:\WINDOWS"/>
<envVar name="CLRMONITOR_INITIALIZED" value="0x7"/>
<envVar name="CLRMONITOR_INSTRUMENT_NAMESPACES_EXCLUSIONS" value=""/>
<envVar name="VS100COMNTOOLS" value="C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\Tools\"/>
<envVar name="OS" value="Windows_NT"/>
<envVar name="TEMP" value="C:\Users\VIJAYE~1\AppData\Local\Temp"/>
<envVar name="CLRMONITOR_INSTRUMENT_ATTRIBUTE" value="Microsoft.Moles.Framework.Moles.MolesInstrumentAttribute"/>
<envVar name="OneDrive" value="C:\Users\Vijayendra Jagtap\OneDrive"/>
<envVar name="CLRMONITOR_INSTRUMENT_NAMESPACES" value="System.Collections,System.Collections.Generic,System.Collections.ObjectModel,System.Collections.Specialized,System.Diagnostics.Contracts"/>
<envVar name="CommonProgramFiles" value="C:\Program Files\Common Files"/>
<envVar name="PROCESSOR_LEVEL" value="6"/>
<envVar name="ProgramW6432" value="C:\Program Files"/>
<envVar name="pex_instrumentation" value="1"/>
<envVar name="ProgramData" value="C:\ProgramData"/>
<envVar name="HOMEPATH" value="\Users\Vijayendra Jagtap"/>
<envVar name="pex_server_channel" value="pex7260"/>
<envVar name="COR_PROFILER" value="{fa6276ae-c2b7-443f-9cac-ea13fd3b342a}"/>
<envVar name="CLRMONITOR_FLAGS" value=""/>
<envVar name="CommonProgramW6432" value="C:\Program Files\Common Files"/>
<envVar name="SOPC_KIT_NIOS2" value="C:\intelFPGA_lite\18.0\nios2eds"/>
<envVar name="CLRMONITOR_PROTECT_ALL_CCTORS" value="1"/>
<envVar name="ProgramFiles(x86)" value="C:\Program Files (x86)"/>
<envVar name="VisualStudioDir" value="C:\Users\Vijayendra Jagtap\OneDrive\Documents\Visual Studio 2010"/>
<envVar name="PROCESSOR_ARCHITECTURE" value="AMD64"/>
<envVar name="CLRMONITOR_INSTRUMENT_ASSEMBLIES" value="FSharp.Core,FSharp.PowerPack,Microsoft.Contracts,Microsoft.VisualBasic,Microsoft.VisualStudio.QualityTools.UnitTestFramework,System,System.Core,System.Web,meta_projectAddToEnd"/>
<envVar name="DriverData" value="C:\Windows\System32\Drivers\DriverData"/>
<envVar name="HOMEDRIVE" value="C:"/>
<envVar name="windir" value="C:\WINDOWS"/>
<envVar name="SystemDrive" value="C:"/>
<envVar name="NUMBER_OF_PROCESSORS" value="8"/>
<envVar name="CLRMONITOR_INSTRUMENT_TYPES_EXCLUSIONS" value=""/>
<envVar name="CLRMONITOR_PROTECT_TYPES" value="Microsoft.FSharp.Text.Printf,Microsoft.FSharp.Text.PrintfImpl"/>
<envVar name="USERPROFILE" value="C:\Users\Vijayendra Jagtap"/>
<envVar name="ProgramFiles" value="C:\Program Files"/>
<envVar name="ComSpec" value="C:\WINDOWS\system32\cmd.exe"/>
<envVar name="USERDOMAIN_ROAMINGPROFILE" value="DESKTOP-OS6C121"/>
<envVar name="PATHEXT" value=".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC"/>
<envVar name="LOGONSERVER" value="\\DESKTOP-OS6C121"/>
<envVar name="ALLUSERSPROFILE" value="C:\ProgramData"/>
<envVar name="PSModulePath" value="C:\Program Files\WindowsPowerShell\Modules;C:\WINDOWS\system32\WindowsPowerShell\v1.0\Modules"/>
<envVar name="APPDATA" value="C:\Users\Vijayendra Jagtap\AppData\Roaming"/>
<envVar name="USERDOMAIN" value="DESKTOP-OS6C121"/>
<envVar name="COMPUTERNAME" value="DESKTOP-OS6C121"/>
<envVar name="pex_clientid" value="pex7260_1"/>
<envVar name="LOCALAPPDATA" value="C:\Users\Vijayendra Jagtap\AppData\Local"/>
<envVar name="CLRMONITOR_ERASE_CCTOR_TYPES" value=""/>
<envVar name="QUARTUS_ROOTDIR" value="C:\intelFPGA_lite\18.0\quartus"/>
<envVar name="CommonProgramFiles(x86)" value="C:\Program Files (x86)\Common Files"/>
<envVar name="PUBLIC" value="C:\Users\Public"/>
<envVar name="pex_wait_for_server_channel" value="1"/>
</envVars>
</environment>
<settings/>
<reflection/>
<assembly name="meta_projectAddToEnd" version="1.0.0.0" fileVersion="1.0.0.0" fullName="meta_projectAddToEnd, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll" fileName="meta_projectAddToEnd.dll"><settings testFramework="VisualStudioUnitTest" testLanguage="cs"/>
<fixture name="MetaProgram" type="MetaProject.MetaProgram" typeName="MetaProgram" token="2000002" href="fix\meta_projectAddToEnd.561.html"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="MetaProgram" token="2000002" namespace="MetaProject"/>
</type>
<settings typeUnderTest="MetaProject.MetaProgram"/>
<exploration shortName="Check(List, Int32)" fullName="MetaProject.MetaProgram.Check(List, Int32)"><method><definition assemblyName="meta_projectAddToEnd" name="Check" static="true" token="60000a5"><declaringType assemblyName="meta_projectAddToEnd" name="MetaProgram" token="2000002" namespace="MetaProject"/>
<parameter name="l" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="List" token="2000003"><declaringType assemblyName="meta_projectAddToEnd" name="MetaProgram" token="2000002" namespace="MetaProject"/>
</definition>
</type>
</parameter>
<parameter name="x" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<test name="Check" state="success" duration="0.47"/>
<generatedTest id="2d8e8043-c9c8-4a3e-aec9-ec151fdf1c36" index="1" run="1" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="Check81643"><declaringType assemblyName="meta_projectAddToEnd" name="MetaProgram" token="ffffffff" namespace="MetaProject"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="MetaProgram" token="ffffffff" namespace="MetaProject"/>
</type>
</parameter>
<rcov name="Block" dcov="45" dtot="56" acov="45" atot="56"/>
<rcov name="asserts" dcov="1" dtot="1" acov="1" atot="1"/>
<value name="l">new List{value=0,next=null}</value>
<value name="x">0</value>
<value name="Old_lcount">1</value>
<value name="Old_list">new List{value=0,next=null}</value>
<value name="New_list">new List{value=0,next=new List{value=0,next=null}}</value>
<value name="New_lcount">2</value>
<value name="Old_l2.count">2</value>
<value name="Old_list01">new List{value=0,next=new List{value=0,next=null}}</value>
<value name="New_list01">new List{value=0,next=new List{value=0,next=null}}</value>
<value name="New_l2.count">2</value>
<code><![CDATA[MetaProgram.List s0 = new MetaProgram.List();
s0.value = 0;
s0.next = (MetaProgram.List)null;
MetaProgram.Check(s0, 0);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(MetaProgram))]
public void Check81643()
{
    MetaProgram.List s0 = new MetaProgram.List();
    s0.value = 0;
    s0.next = (MetaProgram.List)null;
    MetaProgram.Check(s0, 0);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return l != (MetaProgram.List)null && l.next == (MetaProgram.List)null && methodof(l.addToEnd) == methodof(MetaProgram.List.addToEnd) && methodof(l.Equals) == methodof(MetaProgram.List.Equals);
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:31:09Z" category="coverage" message="coverage increased from 0 to 45 blocks (+45) after flipping MetaProject.MetaProgram.Check at 0x0002"/>
<test name="Check" state="success" duration="0.03"/>
<generatedTest id="3f0c4faa-6906-4316-ae92-5febfffd72d6" index="2" run="2" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="Check89537"><declaringType assemblyName="meta_projectAddToEnd" name="MetaProgram" token="ffffffff" namespace="MetaProject"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="MetaProgram" token="ffffffff" namespace="MetaProject"/>
</type>
</parameter>
<rcov name="Block" dcov="7" dtot="0" acov="52" atot="56"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="l">new List{value=0,next=new List{value=0,next=null}}</value>
<value name="x">0</value>
<value name="Old_lcount">2</value>
<value name="Old_list">new List{value=0,next=new List{value=0,next=null}}</value>
<value name="New_list">new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}</value>
<value name="New_lcount">3</value>
<value name="Old_l2.count">3</value>
<value name="Old_list01">new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}</value>
<value name="New_list01">new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}</value>
<value name="New_l2.count">3</value>
<code><![CDATA[MetaProgram.List s0 = new MetaProgram.List();
s0.value = 0;
MetaProgram.List s1 = new MetaProgram.List();
s1.value = 0;
s1.next = (MetaProgram.List)null;
s0.next = s1;
MetaProgram.Check(s0, 0);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(MetaProgram))]
public void Check89537()
{
    MetaProgram.List s0 = new MetaProgram.List();
    s0.value = 0;
    MetaProgram.List s1 = new MetaProgram.List();
    s1.value = 0;
    s1.next = (MetaProgram.List)null;
    s0.next = s1;
    MetaProgram.Check(s0, 0);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[MetaProgram.List s2 = new;
MetaProgram.List s1 = l == l.next ? s2 : l.next;
MetaProgram.List s0 = s1;
MetaProgram.List s6 = new;
MetaProgram.List s7 = new;
MetaProgram.List s5 = s0 == s6 ? (MetaProgram.List)null : s0 == s7 ? s6 : s0 == s2 ? (MetaProgram.List)null : s0.next;
MetaProgram.List s4 = s0 == l.next ? s2 : s5;
MetaProgram.List s3 = s4;
MetaProgram.List s10 = new;
MetaProgram.List s9 = s0 == s6 ? s10 : s0 == s10 ? (MetaProgram.List)null : s3;
MetaProgram.List s8 = s9;
int s11 = s0 == s6 ? l.next.value : s0 == s7 ? l.value : s0 == s10 ? x : s0 == s2 ? x : s0.value;
int s12 = s8 == s6 ? l.next.value : s8 == s7 ? l.value : s8 == s10 ? x : s8 == s2 ? x : s8.value;
MetaProgram.List s14 = s3 == s6 ? (MetaProgram.List)null : s3 == s7 ? s6 : s3 == s2 ? (MetaProgram.List)null : s3.next;
MetaProgram.List s13 = s3 == l.next ? s2 : s14;
MetaProgram.List s17 = s8 == s6 ? (MetaProgram.List)null : s8 == s7 ? s6 : s8 == s2 ? (MetaProgram.List)null : s8.next;
MetaProgram.List s16 = s8 == l.next ? s2 : s17;
MetaProgram.List s15 = s8 == s6 ? s10 : s8 == s10 ? (MetaProgram.List)null : s16;
return l != (MetaProgram.List)null && l.next != (MetaProgram.List)null && 
                                      s0 != (MetaProgram.List)null && s3 != (MetaProgram.List)null && s8 != (MetaProgram.List)null && l.next.value == s11 && x == s12 && l.next.next == (MetaProgram.List)null && 
                                                                                                                                                                         methodof(l.addToEnd) == methodof(MetaProgram.List.addToEnd) && s13 == (MetaProgram.List)null && methodof(l.Equals) == methodof(MetaProgram.List.Equals) && s15 == (MetaProgram.List)null;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:31:09Z" category="coverage" message="coverage increased from 45 to 52 blocks (+7) after flipping MetaProject.MetaProgram+List.Count at 0x001d"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<generatedTest id="8bf22746-3859-4836-883e-a351ca62a868" index="3" run="5" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="Check53937"><declaringType assemblyName="meta_projectAddToEnd" name="MetaProgram" token="ffffffff" namespace="MetaProject"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="MetaProgram" token="ffffffff" namespace="MetaProject"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="52" atot="56"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="l">new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}</value>
<value name="x">0</value>
<value name="Old_lcount">3</value>
<value name="Old_list">new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}</value>
<value name="New_list">new List{value=0,next=new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}}</value>
<value name="New_lcount">4</value>
<value name="Old_l2.count">4</value>
<value name="Old_list01">new List{value=0,next=new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}}</value>
<value name="New_list01">new List{value=0,next=new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}}</value>
<value name="New_l2.count">4</value>
<code><![CDATA[MetaProgram.List s0 = new MetaProgram.List();
s0.value = 0;
MetaProgram.List s1 = new MetaProgram.List();
s1.value = 0;
MetaProgram.List s2 = new MetaProgram.List();
s2.value = 0;
s2.next = (MetaProgram.List)null;
s1.next = s2;
s0.next = s1;
MetaProgram.Check(s0, 0);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(MetaProgram))]
public void Check53937()
{
    MetaProgram.List s0 = new MetaProgram.List();
    s0.value = 0;
    MetaProgram.List s1 = new MetaProgram.List();
    s1.value = 0;
    MetaProgram.List s2 = new MetaProgram.List();
    s2.value = 0;
    s2.next = (MetaProgram.List)null;
    s1.next = s2;
    s0.next = s1;
    MetaProgram.Check(s0, 0);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[MetaProgram.List s2 = new;
MetaProgram.List s1 = l == l.next.next ? s2 : l.next;
MetaProgram.List s0 = s1;
MetaProgram.List s6 = new;
MetaProgram.List s7 = new;
MetaProgram.List s8 = new;
MetaProgram.List s5 = s0 == s6 ? s7 : s0 == s8 ? s6 : s0 == s2 ? (MetaProgram.List)null : s0 == s7 ? (MetaProgram.List)null : s0.next;
MetaProgram.List s4 = s0 == l.next.next ? s2 : s5;
MetaProgram.List s3 = s4;
MetaProgram.List s11 = s3 == s6 ? s7 : s3 == s8 ? s6 : s3 == s2 ? (MetaProgram.List)null : s3 == s7 ? (MetaProgram.List)null : s3.next;
MetaProgram.List s10 = s3 == l.next.next ? s2 : s11;
MetaProgram.List s9 = s10;
MetaProgram.List s14 = new;
MetaProgram.List s13 = s0 == s14 ? (MetaProgram.List)null : s0 == s7 ? s14 : s3;
MetaProgram.List s12 = s13;
MetaProgram.List s18 = s12 == s6 ? s7 : s12 == s8 ? s6 : s12 == s2 ? (MetaProgram.List)null : s12 == s7 ? (MetaProgram.List)null : s12.next;
MetaProgram.List s17 = s12 == l.next.next ? s2 : s18;
MetaProgram.List s16 = s12 == s14 ? (MetaProgram.List)null : s12 == s7 ? s14 : s17;
MetaProgram.List s15 = s16;
int s19 = s0 == s6 ? l.next.value : s0 == s14 ? x : s0 == s8 ? l.value : s0 == s2 ? x : s0 == s7 ? l.next.next.value : s0.value;
int s20 = s12 == s6 ? l.next.value : s12 == s14 ? x : s12 == s8 ? l.value : s12 == s2 ? x : s12 == s7 ? l.next.next.value : s12.value;
int s21 = s15 == s6 ? l.next.value : s15 == s14 ? x : s15 == s8 ? l.value : s15 == s2 ? x : s15 == s7 ? l.next.next.value : s15.value;
MetaProgram.List s23 = s9 == s6 ? s7 : s9 == s8 ? s6 : s9 == s2 ? (MetaProgram.List)null : s9 == s7 ? (MetaProgram.List)null : s9.next;
MetaProgram.List s22 = s9 == l.next.next ? s2 : s23;
MetaProgram.List s26 = s15 == s6 ? s7 : s15 == s8 ? s6 : s15 == s2 ? (MetaProgram.List)null : s15 == s7 ? (MetaProgram.List)null : s15.next;
MetaProgram.List s25 = s15 == l.next.next ? s2 : s26;
MetaProgram.List s24 = s15 == s14 ? (MetaProgram.List)null : s15 == s7 ? s14 : s25;
return l != (MetaProgram.List)null && 
       l.next != (MetaProgram.List)null && l.next.next != (MetaProgram.List)null && s0 != (MetaProgram.List)null && s3 != (MetaProgram.List)null && s9 != (MetaProgram.List)null && 
                                                                                                                                                    s12 != (MetaProgram.List)null && s15 != (MetaProgram.List)null && l.next.value == s19 && l.next.next.value == s20 && x == s21 && l.next.next.next == (MetaProgram.List)null && 
                                                                                                                                                                                                                                                                                     methodof(l.addToEnd) == methodof(MetaProgram.List.addToEnd) && s22 == (MetaProgram.List)null && methodof(l.Equals) == methodof(MetaProgram.List.Equals) && s24 == (MetaProgram.List)null;
]]></pathCondition>
</generatedTest>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<boundary kind="maxrunswithoutnewtests" value="100" message="maximum runs without new tests reached"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxRunsWithoutNewTests=200" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="200"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxRunsWithoutNewTests" token="17000348"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="Check" static="true" token="60000a5"><declaringType assemblyName="meta_projectAddToEnd" name="MetaProgram" token="2000002" namespace="MetaProject"/>
<parameter name="l" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="List" token="2000003"><declaringType assemblyName="meta_projectAddToEnd" name="MetaProgram" token="2000002" namespace="MetaProject"/>
</definition>
</type>
</parameter>
<parameter name="x" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</parameter>
</definition>
</method>
</target>
</update>
</boundary>
<coverage domain="usercodeundertest" unit="block" covered="52" total="56" coveredRatio="0.9285714285714286"/>
<sourceCoverage xml="cov\e319\cov.xml" html="cov\e319\cov.html"/>
<result name="Check(List, Int32)" state="success" duration="6.7406786"/>
<duration start="2019-02-15 20:31:08Z" end="2019-02-15 20:31:15Z" seconds="6.7687734"/>
<trajectory><image src="fix\metaprojectmetap636858378750802254.trajectories.png" width="800" height="1600"/>
</trajectory>
</exploration>
<coverage domain="usercodeundertest" unit="block" covered="52" total="56" coveredRatio="0.9285714285714286"/>
<sourceCoverage xml="cov\t561\cov.xml" html="cov\t561\cov.html"/>
<duration start="2019-02-15 20:31:08Z" end="2019-02-15 20:31:15Z" seconds="6.8199185"/>
</fixture>
<fixture name="Question" type="Solution.Question" typeName="Question" token="2000005" href="fix\meta_projectAddToEnd.604.html"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
</type>
<settings typeUnderTest="Solution.Question"/>
<exploration shortName="countDistinct(Int32[])" fullName="Solution.Question.countDistinct(Int32[])"><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
<settings maxRuns="360" testEmissionFilter="All"/>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="b88b7276-28e3-4563-a6e5-2c85d85310e3" index="1" run="1" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct260"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="3" dtot="15" acov="3" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">null</value>
<value name="result">0</value>
<code><![CDATA[int i;
i = Question.countDistinct((int[])null);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct260()
{
    int i;
    i = Question.countDistinct((int[])null);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array == (int[])null;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:31:15Z" category="coverage" message="coverage increased from 0 to 3 blocks (+3) after flipping Solution.Question.countDistinct at 0x0006"/>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="3e4985fa-4bd2-455b-943d-c84731ae0e76" index="2" run="2" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct504"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="1" dtot="0" acov="4" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[0];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct504()
{
    int i;
    int[] ints = new int[0];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array.Length == 0L;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:31:15Z" category="coverage" message="coverage increased from 3 to 4 blocks (+1) after flipping Solution.Question.countDistinct at 0x0006"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="f4987820-c07b-424a-8e12-ae837e07be46" index="3" run="3" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct703"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="0" acov="6" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[1];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct703()
{
    int i;
    int[] ints = new int[1];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array.Length == 1L;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:31:15Z" category="coverage" message="coverage increased from 4 to 6 blocks (+2) after flipping Solution.Question.countDistinct at 0x0018"/>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="501bb574-ffe8-4ed9-9834-52f42ade8d0c" index="4" run="4" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct585"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="9" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[2];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct585()
{
    int i;
    int[] ints = new int[2];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 1L < array.Length && array[0L] == array[1L] && array.Length == 2L;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:31:15Z" category="coverage" message="coverage increased from 6 to 15 blocks (+9) after flipping Solution.Question.countDistinct at 0x002e"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1e165d4b-a5a5-4924-bc31-dbde000171d9" index="5" run="5" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct888"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[2];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct888()
{
    int i;
    int[] ints = new int[2];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 1L < array.Length && array.Length == 2L && array[0L] != array[1L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="f4a01f87-b474-4748-9208-68377b1db480" index="6" run="6" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct609"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct609()
{
    int i;
    int[] ints = new int[3];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 2L < array.Length && array[1L] == array[2L] && array.Length == 3L && array[0L] != array[1L] && array[0L] != array[2L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="19cecf8c-2ede-4327-9148-31d4656a6351" index="7" run="7" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct114"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 0, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[0] = 3;
ints[2] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct114()
{
    int i;
    int[] ints = new int[3];
    ints[0] = 3;
    ints[2] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 2L < array.Length && array.Length == 3L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="53c731c7-36e7-47c0-8a10-e271ed23edcd" index="8" run="8" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct181"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct181()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[1L] == array[2L] && 3L < array.Length && array[1L] == array[3L] && array[2L] == array[3L] && array.Length == 4L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="57256c8c-bd1f-4797-9ced-970ada86a38d" index="9" run="9" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct640"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[3];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct640()
{
    int i;
    int[] ints = new int[3];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 2L < array.Length && array[0L] == array[2L] && array[1L] == array[2L] && array.Length == 3L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6d1eb1df-0795-4fa6-b115-e1e361e8f2a5" index="10" run="10" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct873"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct873()
{
    int i;
    int[] ints = new int[3];
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 2L < array.Length && array.Length == 3L && array[0L] != array[2L] && array[1L] != array[2L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b9b6b972-5904-4e85-ac93-9e96cb9041cd" index="11" run="11" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct875"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct875()
{
    int i;
    int[] ints = new int[3];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 2L < array.Length && array[0L] == array[2L] && array.Length == 3L && array[0L] != array[1L] && array[1L] != array[2L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="806471ab-63db-4f04-9dac-7d635a920317" index="12" run="12" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct468"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct468()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[2L] && 3L < array.Length && array[1L] == array[3L] && array.Length == 4L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1d0546ee-5714-48b8-a1be-6b4a2d453b13" index="13" run="13" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct171"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct171()
{
    int i;
    int[] ints = new int[4];
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && 3L < array.Length && array[0L] == array[3L] && array[1L] == array[3L] && array.Length == 4L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1b313551-521c-48c5-aea4-4d762bd5dee3" index="14" run="14" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct117"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 0, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 3;
ints[2] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct117()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 3;
    ints[2] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       3L < array.Length && array[1L] == array[3L] && array.Length == 4L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6c4778d6-2b10-49cd-abcb-30afad50f528" index="15" run="15" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct620"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct620()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && 3L < array.Length && array[2L] == array[3L] && array.Length == 4L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d763b326-3543-4636-a253-757d7cf6fc05" index="16" run="16" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct653"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[4];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct653()
{
    int i;
    int[] ints = new int[4];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 3L < array.Length && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array.Length == 4L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6d204660-aefc-41d9-a9db-066a6180b73a" index="17" run="17" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct38"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 32, 1, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[1] = 32;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct38()
{
    int i;
    int[] ints = new int[4];
    ints[1] = 32;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       3L < array.Length && array[2L] == array[3L] && array.Length == 4L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="206ba382-e171-4e6d-8f07-9e0b516ec74c" index="18" run="18" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct29702"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct29702()
{
    int i;
    int[] ints = new int[4];
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 3L < array.Length && array.Length == 4L && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6bc53e7c-e063-4266-b81d-64e32faca8c2" index="19" run="19" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct68001"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 32, 1, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[1] = 32;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct68001()
{
    int i;
    int[] ints = new int[5];
    ints[1] = 32;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="bd147501-8054-453b-a6d1-7828909285cf" index="20" run="20" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct23601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 32, 1, 1, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 32;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct23601()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 32;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 5L < array.Length && 
                                                                                   array[0L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                           array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6a41d19c-3e4e-4429-bd4e-e11f495e056b" index="21" run="21" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct83201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{16, 0, 1, 16}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 16;
ints[2] = 1;
ints[3] = 16;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct83201()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 16;
    ints[2] = 1;
    ints[3] = 16;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       3L < array.Length && array[0L] == array[3L] && array.Length == 4L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3c23f4cc-8b29-4af3-89ae-1732d2d4cf35" index="22" run="22" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct66801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[5];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct66801()
{
    int i;
    int[] ints = new int[5];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && 
                                                                                                             array[1L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && array.Length == 5L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="9e8dc556-4b17-43fc-9769-6c9760df7d57" index="23" run="23" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException202"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 32, 1, 1, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[1] = 32;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException202()
{
    int i;
    int[] ints = new int[7];
    ints[1] = 32;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && 6 < (int)(array.Length) && 6L < array.Length && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 
                                                                                                                                                                                                                 array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="c6925f70-3ed9-4895-a95c-1d3ed42826f2" index="24" run="24" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct14301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 0, 0, 1, 1, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct14301()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && 6L < array.Length && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array.Length == 7L && 
                                                                                                                                                                                                                array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                            array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e5f62856-2e78-44c0-8054-24f880fa3f75" index="25" run="25" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct92701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct92701()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[2L] && 3L < array.Length && array[0L] == array[3L] && array[2L] == array[3L] && array.Length == 4L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="f199de9a-7397-4f59-a7a9-fb7e8960511c" index="26" run="26" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct95402"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct95402()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array[1L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="0fe86ddf-f2b2-44fa-a8ca-890992098f27" index="27" run="27" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct12601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct12601()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 
                               array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && 
                                                                                                                                                                                           array[3L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                       array[8L] == array[9L] && 10L < array.Length && array[2L] == array[10L] && array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array.Length == 11L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && 
array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && 
array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && 
array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && 
array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="22a63f18-e217-44c8-afe3-b845b43c49b7" index="28" run="28" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct98301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{16, 0, 1, 16, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 16;
ints[2] = 1;
ints[3] = 16;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct98301()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 16;
    ints[2] = 1;
    ints[3] = 16;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && 4L < array.Length && array[1L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="679016ed-511a-4fbd-8a57-49ecc7bcdfed" index="29" run="29" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct11101"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 16, 0, 0, 17}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[1] = 16;
ints[4] = 17;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct11101()
{
    int i;
    int[] ints = new int[5];
    ints[1] = 16;
    ints[4] = 17;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array.Length == 5L && 
                                                                                                                                  array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="231aaf80-5547-49de-be96-edc2373126a5" index="30" run="30" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct63701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct63701()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 
                               array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && 
                                                                                                                                                                                           array[3L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                       array[8L] == array[9L] && 10L < array.Length && array[1L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && 
array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && 
array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[2L] != array[10L] && 
array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L] && array[9L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="714c7b65-bcb1-4a22-b865-3a7699dc11be" index="31" run="31" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct39401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct39401()
{
    int i;
    int[] ints = new int[5];
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 4L < array.Length && array[0L] == array[4L] && 
                                                                                                                                  array[1L] == array[4L] && array[2L] == array[4L] && array.Length == 5L && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="c460917b-231e-4580-8ebe-827bcb411e21" index="32" run="32" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct76801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 5, 0, 4, 4, 5, 5, 5, 6, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct76801()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 
                               array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[8L] && 
                                                                                                                                                                                           array[1L] == array[9L] && array[8L] == array[9L] && 10L < array.Length && array[1L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && 
                                                                                                                                                                                                                                                                                                                                                      array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && 
array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5c315709-a324-4da1-b81d-288d9aed6bd7" index="33" run="33" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct97601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 0, 4, 4, 5, 5, 5, 6, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct97601()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[8L] && 9L < array.Length && array[1L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && 
                                                                                                                                                                                                                                                                                              array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                          array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b7bedbf4-0ec2-411a-adb0-7db4aebf2553" index="34" run="34" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct7901"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct7901()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[1L] == array[2L] && 3L < array.Length && array[0L] == array[3L] && array.Length == 4L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d3d181cb-d567-4c75-b92e-f0b4a99644dc" index="35" run="35" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct50201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct50201()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[2L] == array[10L] && array[3L] == array[10L] && array[7L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 array[8L] == array[10L] && array[9L] == array[10L] && 11L < array.Length && array[2L] == array[11L] && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && 
array[9L] == array[11L] && array[10L] == array[11L] && array.Length == 12L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && 
array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && 
array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="17700f44-381e-4e3c-8328-75e56fc042d4" index="36" run="36" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct47801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct47801()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && 
                                                                                                                                                                                                                                               array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[2L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[2L] == array[11L] && array[3L] == array[11L] && array[7L] == array[11L] && 
array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 12L < array.Length && array[2L] == array[12L] && array[3L] == array[12L] && array[7L] == array[12L] && 
array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && array[11L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && array[0L] != array[2L] && 
array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && 
array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && 
array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && 
array[5L] != array[11L] && array[6L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ccd355c2-1acb-447e-9b0e-1e43cf529361" index="37" run="37" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct99301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 0, 0, 1, 1, 1, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct99301()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && 8L < array.Length && 
                                                                                                                                                                                                                                               array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && array.Length == 9L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                                                                                                                                                                                       array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && 
array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && 
array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="e8b1750d-71f2-45e9-b349-4f8e5536748e" index="38" run="38" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct43101"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct43101()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && 
                                                                                                                                                                                                                     array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                 array[2L] == array[10L] && array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[2L] == array[11L] && array[3L] == array[11L] && 
array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && array[2L] == array[12L] && array[3L] == array[12L] && array[7L] == array[12L] && 
array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && array[11L] == array[12L] && 13L < array.Length && array[2L] == array[13L] && array[3L] == array[13L] && 
array[7L] == array[13L] && array[8L] == array[13L] && array[9L] == array[13L] && array[10L] == array[13L] && array[11L] == array[13L] && array[12L] == array[13L] && array.Length == 14L && 
array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && 
array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && 
array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[4L] != array[12L] && 
array[5L] != array[12L] && array[6L] != array[12L] && array[0L] != array[13L] && array[1L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && array[6L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="84f9475b-8030-43b9-acf4-7e5a47c2162f" index="39" run="39" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct42601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct42601()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="03f2b94d-07bb-4aec-b637-be8c18c37ae0" index="40" run="40" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct20601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct20601()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="70677cf1-247b-43d1-8a8d-c4eeef158cbd" index="41" run="41" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct57101"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 0, 0, 1, 1, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct57101()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 7L < array.Length && array[2L] == array[7L] && 
                                                                                                                                                                                                                array[3L] == array[7L] && array.Length == 8L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && 
array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="617b8ec4-e354-4f14-ad8c-41dc92d67ea2" index="42" run="42" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct90901"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct90901()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && 4L < array.Length && array[2L] == array[4L] && array[3L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="aecfd451-26c5-44a4-af0a-2b980abfc5af" index="43" run="43" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct32401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct32401()
{
    int i;
    int[] ints = new int[5];
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && 
                                                                                                             array[1L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array.Length == 5L && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="2ceffd5c-5203-4d10-9483-626dbb20d418" index="44" run="44" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct78001"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct78001()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 
                                                                                   array[1L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="b344a814-1c77-4830-96d3-8f0b003c7c73" index="45" run="45" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct73101"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct73101()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="30c2d459-8c8a-4a99-8a59-13e12bc94f11" index="46" run="46" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct60801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 0, 0, 3}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 2;
ints[3] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct60801()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 2;
    ints[3] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[1L] == array[2L] && 3L < array.Length && array.Length == 4L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d6a63398-3beb-4467-aaca-25e8906b31ea" index="47" run="47" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct59701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct59701()
{
    int i;
    int[] ints = new int[6];
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 
                                                                                   array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && 5L < array.Length && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                                                                                                                          array[3L] == array[5L] && array.Length == 6L && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="df323595-1ca7-4ade-82b1-e4f044c3babb" index="48" run="48" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct76901"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct76901()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b55b5667-15d6-401d-849a-8eb7c9e7d129" index="49" run="49" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct82801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct82801()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[1L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array[1L] == array[4L] && 
                                                                                                                                  array[2L] == array[4L] && array[3L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[0L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e4c75114-ada1-4f60-bd08-b681114023a1" index="50" run="50" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct49201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 0, 2, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 3;
ints[2] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct49201()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 3;
    ints[2] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[3L] && 4L < array.Length && array[1L] == array[4L] && array[3L] == array[4L] && array.Length == 5L && 
                                                                                                                                  array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="74c51787-d2f5-4a8d-b3c7-71e3996aa71e" index="51" run="51" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct96601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 32}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[15] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct96601()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[15] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="0d6fbb92-504a-4242-9222-1016ea91dc6b" index="52" run="52" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct29703"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct29703()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7d647812-9e1f-4d38-b847-2e04cedaaef4" index="53" run="53" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 0, 4, 4, 5, 5, 5, 6}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct801()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 7L < array.Length && array.Length == 8L && 
                                                                                                                                                                                                                array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                            array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="2165f652-8a85-4178-a47e-d105feb299cb" index="54" run="54" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct35302"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct35302()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1f56e92a-f185-4bce-9143-673e679444cd" index="55" run="55" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct23402"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 0, 0, 1, 1, 1, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct23402()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && 
                                                                                                                                                                                                                                                                                                   9L < array.Length && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && 
array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="626dc724-a80b-44ef-9849-6795c353ca6d" index="56" run="56" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct64701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct64701()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ce65b8c5-e18e-4768-8d62-79ab8cd775a2" index="57" run="57" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct23403"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct23403()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[0L] == array[3L] && 4L < array.Length && array[1L] == array[4L] && array[2L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="db82f865-55fe-42d6-b9c5-d809d23dad87" index="58" run="58" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct12301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct12301()
{
    int i;
    int[] ints = new int[21];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="782540dd-49f4-47aa-a041-c6054d61f4c3" index="59" run="59" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct26901"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct26901()
{
    int i;
    int[] ints = new int[22];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a5dfbff4-1950-483f-afaa-055183e10dbc" index="60" run="60" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct75601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[1] = 1;
ints[3] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct75601()
{
    int i;
    int[] ints = new int[4];
    ints[1] = 1;
    ints[3] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[2L] && 3L < array.Length && array.Length == 4L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="842111ed-9193-485c-9694-112bfeff2adb" index="61" run="61" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct21701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 5, 0, 4, 4, 5, 5, 5, 6, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct21701()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[8L] && array[1L] == array[9L] && array[8L] == array[9L] && array[1L] == array[10L] && array[8L] == array[10L] && 
                                                                                                                                                                                                                                                                                                    array[9L] == array[10L] && 11L < array.Length && array[1L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && array.Length == 12L && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && 
array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && 
array[0L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="0bad26f1-a032-475a-b6c1-233e4a3e5dc6" index="62" run="62" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct95201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct95201()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="f8e9ab88-f324-49db-9c51-0548fd997019" index="63" run="63" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct61801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=24; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[24];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct61801()
{
    int i;
    int[] ints = new int[24];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="15f60245-674f-4964-b5d1-b02d5d848a69" index="64" run="64" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct53701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct53701()
{
    int i;
    int[] ints = new int[22];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="6b8c877a-0063-46f3-a1d7-a7d261bceb44" index="65" run="65" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct48101"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=25; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[25];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct48101()
{
    int i;
    int[] ints = new int[25];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="b7602e81-bd0e-4bf1-8242-986cab939b8b" index="66" run="66" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct32201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=26; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[26];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct32201()
{
    int i;
    int[] ints = new int[26];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7f74e3fa-7243-4aee-ad6d-5981ad087951" index="67" run="67" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct4601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[1] = 1;
ints[3] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct4601()
{
    int i;
    int[] ints = new int[5];
    ints[1] = 1;
    ints[3] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 4L < array.Length && array[0L] == array[4L] && array[2L] == array[4L] && array.Length == 5L && 
                                                                                                                                  array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b0138167-a77f-45f9-97b4-3cc521523e5c" index="68" run="68" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct10601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 0, 0, 3, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 2;
ints[3] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct10601()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 2;
    ints[3] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && 4L < array.Length && array[1L] == array[4L] && array[2L] == array[4L] && array.Length == 5L && 
                                                                                                                                  array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="a25ff1c2-ef4e-4514-85cd-8c4c6c74a914" index="69" run="69" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct62301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=27; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[27];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct62301()
{
    int i;
    int[] ints = new int[27];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="a0127005-b655-412a-9e63-d44a80d91a0e" index="70" run="70" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct87601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct87601()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="237e3fb4-5e6d-4063-b876-9fee2f493067" index="71" run="71" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct59801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=29; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[29];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct59801()
{
    int i;
    int[] ints = new int[29];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="8c2afa39-6d81-45ad-b874-74e87c2ea691" index="72" run="72" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct72601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct72601()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="4d88b604-a314-4e2b-bc77-46252b010be8" index="73" run="73" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct36301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 5, 0, 4, 4, 5, 5, 5, 6, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct36301()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[8L] && array[1L] == array[9L] && array[8L] == array[9L] && 
                                                                                                                                                                                                                                               array[1L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[1L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                 12L < array.Length && array[1L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && array[11L] == array[12L] && array.Length == 13L && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && 
array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && 
array[0L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                array[0L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<boundary kind="maxconditions" value="500" message="maximum number of conditions exceeded"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<generatedTest id="e52c41ce-3a7d-496a-af2a-233ccab1258b" index="74" run="74" status="pathboundsexceeded" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct89101"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=31; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[31];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void countDistinct89101()
{
    int i;
    int[] ints = new int[31];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<boundaryCodeUpdate kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</boundaryCodeUpdate>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="77adb82b-40b5-4a0b-9463-3715a98e4efd" index="75" run="75" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct7101"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct7101()
{
    int i;
    int[] ints = new int[5];
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[3L] && array[1L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && 
                                                                                                                                  array[1L] == array[4L] && array[3L] == array[4L] && array.Length == 5L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[3L] && array[2L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="4b5943b8-12bb-4b68-9f4d-876d02f0606c" index="76" run="76" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct16301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[6];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct16301()
{
    int i;
    int[] ints = new int[6];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && 
                                                                                                                                                                                                                     array[3L] == array[4L] && 5L < array.Length && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array.Length == 6L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="482f9c47-c75a-4517-b34d-476517ff8de5" index="77" run="77" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct28101"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 2, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[2] = 2;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct28101()
{
    int i;
    int[] ints = new int[4];
    ints[2] = 2;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && 3L < array.Length && array.Length == 4L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="4a226045-e8c7-4840-9dad-60d38ca32c42" index="78" run="78" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct53101"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct53101()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[1L] == array[3L] && array[2L] == array[3L] && 
                                                                                   array[1L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && 
                                                                                                                                                                                                                                          array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[0L] != array[4L] && array[0L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3a58aea2-0bf9-46e8-9e3b-78aace1f002a" index="79" run="79" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct35303"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 17, 25}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[2] = 17;
ints[3] = 25;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct35303()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[2] = 17;
    ints[3] = 25;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       3L < array.Length && array.Length == 4L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="16cf1d67-38de-48f0-b836-01a63fca858a" index="80" run="80" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct42501"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct42501()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="c4328bbd-f727-4c0b-9f01-20458ab640ce" index="81" run="81" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct85401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 17, 25, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[2] = 17;
ints[3] = 25;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct85401()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[2] = 17;
    ints[3] = 25;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 4L < array.Length && array[1L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                              array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="26215072-3dff-45ce-af83-2e270deecae5" index="82" run="82" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct8901"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct8901()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 
                               array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && 
                                                                                                                                                                                           array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && 10L < array.Length && array[2L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                   array[3L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e37c50ce-633f-4b5e-a27b-37b5cffaf85d" index="83" run="83" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct17301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{512, 8, 0, 0, 512, 512, 512, 1, 512}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct17301()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 8L < array.Length && array[0L] == array[8L] && array[4L] == array[8L] && 
                                                                                                                                                                                                                                          array[5L] == array[8L] && array[6L] == array[8L] && array.Length == 9L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                  array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="4098c3a5-6b44-425d-bd43-ee751fcde88e" index="84" run="84" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct3802"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 2, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 1;
ints[3] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct3802()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 1;
    ints[3] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && array[2L] == array[4L] && 
                                                                                   5L < array.Length && array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="08d035be-efa6-45f3-b42d-20d677de7188" index="85" run="85" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct83001"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 2, 0, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 2;
ints[2] = 1;
ints[3] = 1;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 1;
ints[16] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct83001()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 2;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 1;
    ints[16] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="4735a320-0e52-4225-83b8-80e6544079fd" index="86" run="86" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct61301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct61301()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="60d7253c-10b6-455e-b618-4564810b88f5" index="87" run="87" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct69601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 0, 1, 3}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 1;
ints[4] = 1;
ints[5] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct69601()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 1;
    ints[4] = 1;
    ints[5] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 
                                                                                   array[1L] == array[4L] && 5L < array.Length && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                      array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="2af5ade0-a1df-4271-9a6e-d7505a6ced98" index="88" run="88" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException265"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 2, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[1] = 1;
ints[3] = 2;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException265()
{
    int i;
    int[] ints = new int[7];
    ints[1] = 1;
    ints[3] = 2;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && 
                                                         array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && 6 < (int)(array.Length) && 6L < array.Length && array[0L] == array[6L] && 
                                                                                                                                                                                                                 array[2L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[3L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="bec34961-c17a-434c-aa1b-f1e3f05dd4ca" index="89" run="89" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct36402"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 1, 2, 0, 2, 2, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct36402()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && 
                                                         array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && 6L < array.Length && array[0L] == array[6L] && array[2L] == array[6L] && 
                                                                                                                                                                                                                array[4L] == array[6L] && array[5L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[3L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="aff68e0e-3dd5-4c37-bd10-774947436dd9" index="90" run="90" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct36403"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{512, 8, 0, 0, 512, 512, 512, 1, 512, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct36403()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && 9L < array.Length && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[9L] && array[3L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                            array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="231e341d-c0cd-46ad-b76c-93e9e3ab1ce5" index="91" run="91" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct76401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 1, 128, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 1;
ints[1] = 128;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[29] = 128;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct76401()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 1;
    ints[1] = 128;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[29] = 128;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7e0008ec-467a-4321-b46e-bfee474d7669" index="92" run="92" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct65401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct65401()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[2L] == array[9L] && 
                                                                                                                                                                                                                                                                                                   array[3L] == array[9L] && array[2L] == array[10L] && array[3L] == array[10L] && array[9L] == array[10L] && 11L < array.Length && array[2L] == array[11L] && array[3L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[9L] == array[11L] && array[10L] == array[11L] && array.Length == 12L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L] && 
array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L] && 
array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && array[8L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="eaccd01f-687d-4d66-9fe7-89b91090e5c8" index="93" run="93" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct7201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=24; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[24];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct7201()
{
    int i;
    int[] ints = new int[24];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="17ea3902-34a1-4ca4-b27d-65d2bc68cef4" index="94" run="94" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct44201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct44201()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[1L] == array[3L] && 4L < array.Length && array[1L] == array[4L] && array[3L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="a7f57916-8d77-4ed5-bbf7-45a683924a5a" index="95" run="95" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct32801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 8, 0, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 8}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 8;
ints[2] = 1;
ints[3] = 1;
ints[4] = 8;
ints[5] = 8;
ints[6] = 8;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 8;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct32801()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 8;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 8;
    ints[5] = 8;
    ints[6] = 8;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 8;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="546712cf-ab8c-4020-bb51-e7d29329acf0" index="96" run="96" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct40201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=25; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[25];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct40201()
{
    int i;
    int[] ints = new int[25];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="705b2d46-4d9e-4028-a1d5-88b6695e5618" index="97" run="97" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct15101"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct15101()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="ba0fe42b-bd09-4e31-8c93-eeb12bdf32d5" index="98" run="98" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct45601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=26; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[26];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct45601()
{
    int i;
    int[] ints = new int[26];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="73282492-31d6-4021-8c58-fec9492f5e32" index="99" run="99" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct35401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 0, 4, 4, 5, 5, 5, 6, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct35401()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 8L < array.Length && array[1L] == array[8L] && array.Length == 9L && 
                                                                                                                                                                                                                                          array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                      array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="aaf1239e-eb0e-47a6-8750-8edef51dedf8" index="100" run="100" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct56501"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=27; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[27];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct56501()
{
    int i;
    int[] ints = new int[27];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="0f666529-6db7-475d-8202-6af5b0aa3f86" index="101" run="101" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct36601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct36601()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && 
                                                                                                                                  array[2L] == array[4L] && array[3L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[1L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d4c0e9d8-b204-45dc-b4ac-e7e79052c92a" index="102" run="102" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct95403"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct95403()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[1L] == array[10L] && 11L < array.Length && array[2L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                            array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array.Length == 12L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && 
array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && 
array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L] && 
array[9L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[10L] != array[11L];
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:31:17Z" category="progress" message="  102 runs, 15/15 blocks covered"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="958034e6-4dc7-49d6-89d2-90bedb2b1443" index="103" run="103" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct92801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct92801()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && array[2L] == array[4L] && 
                                                                                   array[3L] == array[4L] && 5L < array.Length && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[2L] && 
                                                                                                                                                                                                                                      array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d9bb2f3a-053f-452d-badd-279792699d61" index="104" run="104" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct1201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[2] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct1201()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[2] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[1L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array[2L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="b6925fe5-d3e3-4688-8299-61ae0c753e59" index="105" run="105" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct87401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct87401()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="0a81136a-b143-4ca4-bca1-cedc8be88af2" index="106" run="106" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct30801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 2, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[2] = 2;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct30801()
{
    int i;
    int[] ints = new int[5];
    ints[2] = 2;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 4L < array.Length && array[0L] == array[4L] && array[1L] == array[4L] && array.Length == 5L && 
                                                                                                                                  array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="f8ff1878-36bd-4e83-9a2b-4190a19424ea" index="107" run="107" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct33701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 5, 0, 1, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 5;
ints[3] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct33701()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 5;
    ints[3] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array[3L] == array[4L] && array.Length == 5L && 
                                                                                                                                  array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L];
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:31:18Z" category="progress" message="  250 constraint systems (42.80% solved, 57.20% proven unsatisfiable), flipping location Question.countDistinct(Int32[]) at 0x0052 took 0s (57.51%)"/>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="652b7773-3f9c-426e-a8c5-642f302ca242" index="108" run="108" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct54401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct54401()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && 
                                                                                                                                                                                                                                               array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[2L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[2L] == array[11L] && array[3L] == array[11L] && array[7L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 12L < array.Length && array.Length == 13L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && 
array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && 
array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && 
array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && 
array[5L] != array[11L] && array[6L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && array[4L] != array[12L] && 
array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && array[8L] != array[12L] && array[9L] != array[12L] && array[10L] != array[12L] && array[11L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3b6bcf7d-c547-4051-bdf3-ae8c21b681a3" index="109" run="109" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct87502"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct87502()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[4L] && 
                                                                                   array[2L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                      array[0L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="981d5b39-da57-4848-bb93-345a4ce2891b" index="110" run="110" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct77101"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct77101()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[3L] && array[1L] == array[3L] && 4L < array.Length && array[2L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="fc9f96ec-c3d7-4fe9-9632-9a616a9bfc23" index="111" run="111" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct54301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[15] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct54301()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[15] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ca40bb4b-96da-4133-898f-306d9ce2e203" index="112" run="112" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct64301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct64301()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[1L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5e12cc79-c350-4dcb-afc7-ff268026482c" index="113" run="113" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException128"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException128()
{
    int i;
    int[] ints = new int[7];
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && 
                                                                                                                                                                                                                     array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 6 < (int)(array.Length) && 
                                                                                                                                                                                                                                                                                                                                                                                 6L < array.Length && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a3fef465-696b-4747-9082-8c9e6355185a" index="114" run="114" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct735"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[7];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct735()
{
    int i;
    int[] ints = new int[7];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && 
                                                                                                                                                                                           array[2L] == array[4L] && array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 
                                                                                                                                                                                                                                                                                                                                                       6L < array.Length && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array.Length == 7L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<boundary kind="maxconditions" value="500" message="maximum number of conditions exceeded"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<generatedTest id="a0d5d099-45e7-4ca7-afba-9807665ed63b" index="115" run="115" status="pathboundsexceeded" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct440"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=31; 1, 128, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[31];
ints[0] = 1;
ints[1] = 128;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[29] = 128;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void countDistinct440()
{
    int i;
    int[] ints = new int[31];
    ints[0] = 1;
    ints[1] = 128;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[29] = 128;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<boundaryCodeUpdate kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</boundaryCodeUpdate>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="e36c27be-9743-408e-b962-8c87c932bb1e" index="116" run="116" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct745"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct745()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && 
                                                                                                                                                                                                                     array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                 array[2L] == array[10L] && array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[2L] == array[11L] && array[3L] == array[11L] && 
array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 13L < array.Length && array[2L] == array[13L] && array[3L] == array[13L] && 
array[7L] == array[13L] && array[8L] == array[13L] && array[9L] == array[13L] && array[10L] == array[13L] && array[11L] == array[13L] && array.Length == 14L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && 
array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && 
array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && 
array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && 
array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && array[8L] != array[12L] && array[9L] != array[12L] && array[10L] != array[12L] && 
array[11L] != array[12L] && array[0L] != array[13L] && array[1L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && array[6L] != array[13L] && array[12L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="102ec240-126d-4895-8c7f-e2df4965c270" index="117" run="117" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct519"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{16, 0, 1, 16, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 16;
ints[2] = 1;
ints[3] = 16;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct519()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 16;
    ints[2] = 1;
    ints[3] = 16;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && array[1L] == array[4L] && 5L < array.Length && 
                                                                                   array[1L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                           array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="2906ba92-b76f-4858-8f2d-3e61409e826c" index="118" run="118" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct987"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 0, 0, 3, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 2;
ints[3] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct987()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 2;
    ints[3] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[1L] == array[4L] && array[2L] == array[4L] && 
                                                                                   5L < array.Length && array[1L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                                                                                                                                      array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9bb470a2-c70f-4987-869c-8face96b9e4b" index="119" run="119" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct561"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 1, 3, 0, 2}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 3;
ints[1] = 1;
ints[2] = 3;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct561()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 3;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 4L < array.Length && array.Length == 5L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                              array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="bf711d85-314f-4886-9797-7d492f49e721" index="120" run="120" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct686"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 8, 0, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 8, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 8;
ints[2] = 1;
ints[3] = 1;
ints[4] = 8;
ints[5] = 8;
ints[6] = 8;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 8;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct686()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 8;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 8;
    ints[5] = 8;
    ints[6] = 8;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 8;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="8f683c62-f0d9-471c-85c5-b76cade512c3" index="121" run="121" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct179"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 1, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[3] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct179()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[3] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[0L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array[3L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="cca09cb3-32bf-45b0-87e4-dcb9af03bbac" index="122" run="122" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct995"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 1, 3, 0, 2, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 3;
ints[1] = 1;
ints[2] = 3;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct995()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 3;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 5L < array.Length && array[3L] == array[5L] && 
                                                                              array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                      array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="a44f9a0f-1e6e-4963-b593-d35a29c347e0" index="123" run="123" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct761"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 2, 1, 2, 0, 2, 2, 2, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct761()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 
                               array[0L] == array[4L] && array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && 
                                                                                                                                                                                           array[4L] == array[6L] && array[5L] == array[6L] && array[3L] == array[7L] && array[3L] == array[8L] && array[7L] == array[8L] && array[3L] == array[9L] && array[7L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                       array[8L] == array[9L] && 10L < array.Length && array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && 
array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[4L] != array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b7f8d1b9-d1ab-4360-a42c-d92df0cf0c6b" index="124" run="124" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct265"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 1, 2, 0, 2, 2, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct265()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && 
                                                         array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && 
                                                                                                                                                                                                                     array[5L] == array[6L] && 7L < array.Length && array[3L] == array[7L] && array.Length == 8L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && 
array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="86139731-5563-4bf9-a07d-07a5cad36278" index="125" run="125" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct691"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct691()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 4L < array.Length && array[3L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="b5ff7d42-ebdf-40b5-82b0-e2a20ebd15ae" index="126" run="126" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct255"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct255()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && 
                                                                                                                                                                                                                                               array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[1L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[2L] == array[11L] && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && 12L < array.Length && array[2L] == array[12L] && 
array[3L] == array[12L] && array[7L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[11L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && 
array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && 
array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && 
array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && 
array[8L] != array[10L] && array[9L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && 
array[10L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[10L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1de93b27-9d46-4815-a3e0-3b78602f45ae" index="127" run="127" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct435"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{16, 0, 0, 1, 16}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 16;
ints[3] = 1;
ints[4] = 16;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct435()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 16;
    ints[3] = 1;
    ints[4] = 16;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && 4L < array.Length && array[0L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9f0688e6-c458-480f-a63f-8e2575953ba9" index="128" run="128" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException297"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 1, 3, 0, 2, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 3;
ints[1] = 1;
ints[2] = 3;
ints[4] = 2;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException297()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 3;
    ints[4] = 2;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && 
                                                         6 < (int)(array.Length) && 6L < array.Length && array[3L] == array[6L] && array[5L] == array[6L] && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                 array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3e04d4ad-0ec4-4828-924e-d0a977ed682d" index="129" run="129" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct43102"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 64, 0, 1, 4, 1, 1}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct43102()
{
    int i;
    int[] ints = new int[7];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && 
                                                         6L < array.Length && array[3L] == array[6L] && array[5L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                            array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="9211019f-cf60-4756-83ea-df3d2e3a1d5f" index="130" run="130" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct246"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=29; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[29];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct246()
{
    int i;
    int[] ints = new int[29];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="dabd2629-bad2-4d18-bfdf-d0d3a766b943" index="131" run="131" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct408"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[15] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct408()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[15] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="a53aea51-7ed5-44a1-ba95-2eec78a14ee0" index="132" run="132" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct35304"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct35304()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="5938373e-b7bc-4bd2-8014-5b34d4be957f" index="133" run="133" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct266"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct266()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.03"/>
<generatedTest id="d2f7aad6-4cdc-4271-bd0d-8bf582a88471" index="134" run="134" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct677"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct677()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="481c5bb1-c640-4ccd-9624-e353fad9e15f" index="135" run="135" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct807"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct807()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="14f2a63f-8b60-448c-9fc8-5824e8bf5e4f" index="136" run="136" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct280"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 1, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[3] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct280()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[3] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[0L] == array[3L] && array[0L] == array[4L] && 
                                                                                   array[3L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && array[2L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                                                                                                                                      array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="935411fd-4cb4-46e6-9b68-c2bea557b62e" index="137" run="137" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct285"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 256, 0, 1, 1, 256, 256, 256, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 256}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 256;
ints[2] = 1;
ints[3] = 1;
ints[4] = 256;
ints[5] = 256;
ints[6] = 256;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 1;
ints[16] = 1;
ints[17] = 1;
ints[18] = 1;
ints[19] = 1;
ints[20] = 1;
ints[21] = 1;
ints[22] = 1;
ints[23] = 1;
ints[24] = 1;
ints[25] = 1;
ints[26] = 1;
ints[27] = 256;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct285()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 256;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 256;
    ints[5] = 256;
    ints[6] = 256;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 1;
    ints[16] = 1;
    ints[17] = 1;
    ints[18] = 1;
    ints[19] = 1;
    ints[20] = 1;
    ints[21] = 1;
    ints[22] = 1;
    ints[23] = 1;
    ints[24] = 1;
    ints[25] = 1;
    ints[26] = 1;
    ints[27] = 256;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="2ab5f279-978a-4e75-835c-65994ec15fd7" index="138" run="138" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct624"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 1, 2, 0, 2, 2, 2, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct624()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && array[2L] == array[4L] && 
                                                                                   array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 
                                                                                                                                                                                                                                               array[3L] == array[7L] && 8L < array.Length && array[3L] == array[8L] && array[7L] == array[8L] && array.Length == 9L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                                                                                                                                                                                  array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && 
array[1L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="1275eaa0-e729-4bdb-bfd6-825f1d5bfd4b" index="139" run="139" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct632"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=27; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[27];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct632()
{
    int i;
    int[] ints = new int[27];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="80b3b89b-65b3-4d82-a163-609dc423a35b" index="140" run="140" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct965"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct965()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array[1L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="8af77d5a-b54d-42cf-928a-c7a80c0cb94c" index="141" run="141" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct588"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 16, 0, 0, 17, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 16;
ints[4] = 17;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct588()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 16;
    ints[4] = 17;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 
                                                                                   5L < array.Length && array[0L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="5cdcccf6-593b-479b-ac80-36f703a389f9" index="142" run="142" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct20602"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct20602()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="7f1ad834-ca65-458a-9f70-9173f1db4025" index="143" run="143" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct116"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct116()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1a5affa8-3bee-491d-8072-a8e9db15b82a" index="144" run="144" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct319"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct319()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 
                                                                                   array[0L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                      array[1L] != array[2L] && array[1L] != array[3L] && array[1L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="b5b48d59-df61-48e7-aa27-c00f217fb6ff" index="145" run="145" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct188"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct188()
{
    int i;
    int[] ints = new int[21];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3195aa84-ad55-437c-8a7b-29559851c956" index="146" run="146" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct409"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 1, 2, 0, 2, 2, 2, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct409()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                       array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[3L] == array[7L] && array[3L] == array[8L] && 
                                                                                                                                                                                                                                                                                                   array[7L] == array[8L] && 9L < array.Length && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && 
array[3L] != array[5L] && array[1L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && 
array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && 
array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="8a7a5a42-f3ec-47ba-bcab-1feecf693db8" index="147" run="147" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct343"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 0, 8, 9, 9, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[1] = 8;
ints[2] = 9;
ints[3] = 9;
ints[7] = 9;
ints[8] = 9;
ints[9] = 9;
ints[10] = 9;
ints[11] = 9;
ints[12] = 9;
ints[13] = 9;
ints[14] = 9;
ints[15] = 9;
ints[16] = 9;
ints[17] = 9;
ints[18] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct343()
{
    int i;
    int[] ints = new int[20];
    ints[1] = 8;
    ints[2] = 9;
    ints[3] = 9;
    ints[7] = 9;
    ints[8] = 9;
    ints[9] = 9;
    ints[10] = 9;
    ints[11] = 9;
    ints[12] = 9;
    ints[13] = 9;
    ints[14] = 9;
    ints[15] = 9;
    ints[16] = 9;
    ints[17] = 9;
    ints[18] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d1af68c9-3de1-4b6e-8cda-4a957cbf4f33" index="148" run="148" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct54"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 515, 513, 0, 3}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 3;
ints[1] = 515;
ints[2] = 513;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct54()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 3;
    ints[1] = 515;
    ints[2] = 513;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 4L < array.Length && array[0L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                              array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="58d6308d-332d-4920-be79-09ffaef59f75" index="149" run="149" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct464"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=29; 256, 0, 1, 1, 256, 256, 256, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 256, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[29];
ints[0] = 256;
ints[2] = 1;
ints[3] = 1;
ints[4] = 256;
ints[5] = 256;
ints[6] = 256;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 1;
ints[16] = 1;
ints[17] = 1;
ints[18] = 1;
ints[19] = 1;
ints[20] = 1;
ints[21] = 1;
ints[22] = 1;
ints[23] = 1;
ints[24] = 1;
ints[25] = 1;
ints[26] = 1;
ints[27] = 256;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct464()
{
    int i;
    int[] ints = new int[29];
    ints[0] = 256;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 256;
    ints[5] = 256;
    ints[6] = 256;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 1;
    ints[16] = 1;
    ints[17] = 1;
    ints[18] = 1;
    ints[19] = 1;
    ints[20] = 1;
    ints[21] = 1;
    ints[22] = 1;
    ints[23] = 1;
    ints[24] = 1;
    ints[25] = 1;
    ints[26] = 1;
    ints[27] = 256;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="f6b68eb8-0256-4d3a-ac84-ee224d1fe2c5" index="150" run="150" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct831"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct831()
{
    int i;
    int[] ints = new int[22];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="57ac7fee-8f6a-4a5d-a341-3d454417bdc1" index="151" run="151" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct439"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 0, 2, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 3;
ints[2] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct439()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 3;
    ints[2] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[3L] && array[1L] == array[4L] && array[3L] == array[4L] && 
                                                                                   5L < array.Length && array[1L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                                                                                                                                      array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="def11368-8905-4ad9-82d4-71a6e0ff4793" index="152" run="152" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct810"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 0, 1, 1, 3}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 2;
ints[2] = 1;
ints[3] = 1;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct810()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 2;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 4L < array.Length && array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                              array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="26985402-f2ce-4fc4-960f-40f933912ffb" index="153" run="153" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct220"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 0, 64, 0, 1, 4, 1, 1, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct220()
{
    int i;
    int[] ints = new int[11];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 
                               array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && array[2L] == array[7L] && array[0L] == array[8L] && array[2L] == array[8L] && 
                                                                                                                                                                                           array[7L] == array[8L] && array[0L] == array[9L] && array[2L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 10L < array.Length && array[0L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                   array[2L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && 
array[4L] != array[6L] && array[1L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && 
array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[1L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && 
array[5L] != array[9L] && array[6L] != array[9L] && array[1L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="c2a8d3a8-e217-412f-9a0a-cc7e9a4c3325" index="154" run="154" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct412"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 64, 0, 1, 4, 1, 1, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct412()
{
    int i;
    int[] ints = new int[8];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && 
                                                         array[3L] == array[6L] && array[5L] == array[6L] && 7L < array.Length && array[0L] == array[7L] && array[2L] == array[7L] && array.Length == 8L && array[0L] != array[1L] && 
                                                                                                                                                                                                            array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    array[2L] != array[6L] && array[4L] != array[6L] && array[1L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="f8e20a1d-edf3-49ed-870d-c9d5b611b9b1" index="155" run="155" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct475"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 257, 256, 257, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[1] = 257;
ints[2] = 256;
ints[3] = 257;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct475()
{
    int i;
    int[] ints = new int[5];
    ints[1] = 257;
    ints[2] = 256;
    ints[3] = 257;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d253351d-a00c-43d7-ac1d-1ba07c378cf1" index="156" run="156" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct10"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 515, 513, 0, 3, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 3;
ints[1] = 515;
ints[2] = 513;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct10()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 3;
    ints[1] = 515;
    ints[2] = 513;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[4L] && 5L < array.Length && array[3L] == array[5L] && 
                                                                              array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && 
                                                                                                                                                                                                                                      array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="082790f7-b620-4207-865b-b92270095527" index="157" run="157" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct153"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct153()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.03"/>
<boundary kind="maxconditions" value="500" message="maximum number of conditions exceeded"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<generatedTest id="88d3b762-a18c-46c2-bf5a-22b6c2b6b1e2" index="158" run="158" status="pathboundsexceeded" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct95202"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=31; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[31];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void countDistinct95202()
{
    int i;
    int[] ints = new int[31];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<boundaryCodeUpdate kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</boundaryCodeUpdate>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="8e67a182-2ce3-4b9c-a749-ad1732b47d8d" index="159" run="159" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct604"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[2] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct604()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[2] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[1L] == array[3L] && array[0L] == array[4L] && 
                                                                                   array[2L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && array[3L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[0L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="cfaf0c26-a6a5-4b96-9a09-501c06a80108" index="160" run="160" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct457"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct457()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="c83ae61d-587c-41e5-8547-52b7ab68a0cc" index="161" run="161" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct199"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 3, 1, 0, 2}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 3;
ints[1] = 3;
ints[2] = 1;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct199()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 3;
    ints[1] = 3;
    ints[2] = 1;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 4L < array.Length && array.Length == 5L && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                              array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="56aa5a42-e850-46e2-87f7-c4eae79a1c74" index="162" run="162" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct142"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 2, 1, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct142()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                       array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[3L] == array[7L] && array[3L] == array[8L] && 
                                                                                                                                                                                                                                                                                                   array[7L] == array[8L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 array[9L] == array[10L] && 11L < array.Length && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 
array.Length == 12L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && 
array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && 
array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && 
array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[4L] != array[9L] && 
array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && 
array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[2L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="3b2bb2e6-66e3-4180-af53-2872212430d9" index="163" run="163" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct262"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 0, 8, 9, 9, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[1] = 8;
ints[2] = 9;
ints[3] = 9;
ints[7] = 9;
ints[8] = 9;
ints[9] = 9;
ints[10] = 9;
ints[11] = 9;
ints[12] = 9;
ints[13] = 9;
ints[14] = 9;
ints[15] = 9;
ints[16] = 9;
ints[17] = 9;
ints[18] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct262()
{
    int i;
    int[] ints = new int[21];
    ints[1] = 8;
    ints[2] = 9;
    ints[3] = 9;
    ints[7] = 9;
    ints[8] = 9;
    ints[9] = 9;
    ints[10] = 9;
    ints[11] = 9;
    ints[12] = 9;
    ints[13] = 9;
    ints[14] = 9;
    ints[15] = 9;
    ints[16] = 9;
    ints[17] = 9;
    ints[18] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="363fdf17-babc-45bf-ab17-907b66cc0c5a" index="164" run="164" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct982"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 64, 0, 1, 4, 1, 1, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct982()
{
    int i;
    int[] ints = new int[9];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && array[3L] == array[6L] && 
                                                                                   array[5L] == array[6L] && array[0L] == array[7L] && array[2L] == array[7L] && 8L < array.Length && array[0L] == array[8L] && array[2L] == array[8L] && array[7L] == array[8L] && 
                                                                                                                                                                                                                                          array.Length == 9L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                  array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && 
array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[1L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && 
array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="767512ce-2262-41d7-b09d-b12ebc0c419c" index="165" run="165" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct984"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct984()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="fc943152-af67-47da-871b-8c0bade0826a" index="166" run="166" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct645"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct645()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6820ce65-6cf6-446b-9177-667ce99ae153" index="167" run="167" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct27"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct27()
{
    int i;
    int[] ints = new int[6];
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 
                                                                                   array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && 5L < array.Length && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                                                                                                                          array[4L] == array[5L] && array.Length == 6L && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[3L] != array[4L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="210185ed-657b-4439-ade4-410b2bf0a0c0" index="168" run="168" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException631"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 0, 1, 3, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[1] = 1;
ints[4] = 1;
ints[5] = 3;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException631()
{
    int i;
    int[] ints = new int[7];
    ints[1] = 1;
    ints[4] = 1;
    ints[5] = 3;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && 
                                                         array[2L] == array[3L] && array[1L] == array[4L] && 6 < (int)(array.Length) && 6L < array.Length && array[0L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && 
                                                                                                                                                                                                                 array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L] && array[1L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="252f0387-e913-4225-9359-9d6c3d80caee" index="169" run="169" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct145"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 16, 1, 1, 16, 0, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 16;
ints[2] = 1;
ints[3] = 1;
ints[4] = 16;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct145()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 16;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 16;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && 
                                                         array[2L] == array[3L] && array[1L] == array[4L] && 6L < array.Length && array[0L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array.Length == 7L && 
                                                                                                                                                                                                                array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                            array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L] && array[1L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="2c2ce4b9-1f0e-49db-b219-0ab6e334077d" index="170" run="170" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct962"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=24; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[24];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct962()
{
    int i;
    int[] ints = new int[24];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="2ea5ccbf-be82-4b2f-bf18-fe4a457637fa" index="171" run="171" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct639"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 64, 0, 1, 4, 1, 1, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct639()
{
    int i;
    int[] ints = new int[10];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && 
                                                                                                                                       array[2L] == array[7L] && array[0L] == array[8L] && array[2L] == array[8L] && array[7L] == array[8L] && 9L < array.Length && array[0L] == array[9L] && array[2L] == array[9L] && 
                                                                                                                                                                                                                                                                                              array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[1L] != array[7L] && 
array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && 
array[5L] != array[8L] && array[6L] != array[8L] && array[1L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="48d95da2-6502-4ae3-a08d-6b7b73e8be1d" index="172" run="172" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct917"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 0, 8, 9, 9, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[1] = 8;
ints[2] = 9;
ints[3] = 9;
ints[7] = 9;
ints[8] = 9;
ints[9] = 9;
ints[10] = 9;
ints[11] = 9;
ints[12] = 9;
ints[13] = 9;
ints[14] = 9;
ints[15] = 9;
ints[16] = 9;
ints[17] = 9;
ints[18] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct917()
{
    int i;
    int[] ints = new int[22];
    ints[1] = 8;
    ints[2] = 9;
    ints[3] = 9;
    ints[7] = 9;
    ints[8] = 9;
    ints[9] = 9;
    ints[10] = 9;
    ints[11] = 9;
    ints[12] = 9;
    ints[13] = 9;
    ints[14] = 9;
    ints[15] = 9;
    ints[16] = 9;
    ints[17] = 9;
    ints[18] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e2dc2c75-208a-4366-9c95-b6bf1020806d" index="173" run="173" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct257"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct257()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 
                                                                                   array[3L] == array[4L] && 5L < array.Length && array[3L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                      array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="4a50efba-ca4a-409d-a89f-dc4349b05c40" index="174" run="174" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct721"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 0, 16, 17, 17, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[1] = 16;
ints[2] = 17;
ints[3] = 17;
ints[7] = 17;
ints[8] = 17;
ints[9] = 17;
ints[10] = 17;
ints[11] = 17;
ints[12] = 17;
ints[13] = 17;
ints[14] = 17;
ints[15] = 17;
ints[16] = 17;
ints[17] = 17;
ints[18] = 17;
ints[19] = 17;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct721()
{
    int i;
    int[] ints = new int[21];
    ints[1] = 16;
    ints[2] = 17;
    ints[3] = 17;
    ints[7] = 17;
    ints[8] = 17;
    ints[9] = 17;
    ints[10] = 17;
    ints[11] = 17;
    ints[12] = 17;
    ints[13] = 17;
    ints[14] = 17;
    ints[15] = 17;
    ints[16] = 17;
    ints[17] = 17;
    ints[18] = 17;
    ints[19] = 17;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="c81f0a85-1fdf-421b-aea9-2165920a708e" index="175" run="175" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct226"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct226()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3790b004-4db8-46b9-a42e-1775c154b3cf" index="176" run="176" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException246"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 1, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[4] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException246()
{
    int i;
    int[] ints = new int[7];
    ints[4] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                                                                                                     array[3L] == array[5L] && 6 < (int)(array.Length) && 6L < array.Length && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[5L] == array[6L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[4L] != array[5L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b18f6697-1683-4b88-a1e4-fedae04e0d9f" index="177" run="177" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct422"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 0, 1, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct422()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                                                                                                     array[3L] == array[5L] && 6L < array.Length && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[5L] == array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                            array.Length == 7L && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[4L] != array[5L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="f904d91e-00a6-4544-893a-8d7fb03d6f94" index="178" run="178" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct871"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct871()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && 
                                                                                                                                                                                                                     array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                 array[1L] == array[10L] && array[2L] == array[11L] && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[2L] == array[12L] && 
array[3L] == array[12L] && array[7L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[11L] == array[12L] && 13L < array.Length && array[2L] == array[13L] && 
array[3L] == array[13L] && array[7L] == array[13L] && array[8L] == array[13L] && array[9L] == array[13L] && array[11L] == array[13L] && array[12L] == array[13L] && array.Length == 14L && 
array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && 
array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && 
array[6L] != array[9L] && array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && 
array[7L] != array[10L] && array[8L] != array[10L] && array[9L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && 
array[6L] != array[11L] && array[10L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && 
array[10L] != array[12L] && array[0L] != array[13L] && array[1L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && array[6L] != array[13L] && array[10L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="4a6a3473-3ed7-4fc9-af22-de62f37e1496" index="179" run="179" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct898"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct898()
{
    int i;
    int[] ints = new int[21];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="565bfbaa-5a06-488d-a8f6-c31854bd55c6" index="180" run="180" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct11401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct11401()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="5f7e0b02-1a1f-4aab-80ac-a2fb919db8f2" index="181" run="181" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct578"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct578()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="c451250d-e6d3-42bf-9f6d-b237a33cf3e0" index="182" run="182" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct76802"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 2, 1, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct76802()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && array[2L] == array[4L] && 
                                                                                   array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 
                                                                                                                                                                                                                                               array[3L] == array[7L] && array[3L] == array[8L] && array[7L] == array[8L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[3L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && 
array[10L] == array[11L] && 12L < array.Length && array[3L] == array[12L] && array[7L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && 
array[11L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && 
array[2L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && 
array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[4L] != array[10L] && 
array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[2L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && 
array[6L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[2L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="ec9b753f-303e-43e7-8931-6a637d6f373b" index="183" run="183" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct133"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[15] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct133()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[15] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="786e69ff-62c9-48ac-9095-4a2cd685bec0" index="184" run="184" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct22"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 8, 0, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 8;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct22()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 8;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && 4L < array.Length && array[2L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="5ef6ea65-80ad-4054-af22-d39cd0faa45b" index="185" run="185" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct41201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct41201()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && 
                                                                                                                                                                                                                                               array[6L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[2L] == array[10L] && array[3L] == array[10L] && array[9L] == array[10L] && array[2L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                              array[3L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 12L < array.Length && array[2L] == array[12L] && array[3L] == array[12L] && array[9L] == array[12L] && 
array[10L] == array[12L] && array[11L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L] && 
array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L] && 
array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && array[8L] != array[11L] && 
array[0L] != array[12L] && array[1L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && array[8L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="18387490-4708-4271-be35-200b8dd6e471" index="186" run="186" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct113"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct113()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && array[4L] == array[8L] && 
                                                                                                                                                                                                                     array[5L] == array[8L] && array[6L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[2L] == array[10L] && array[3L] == array[10L] && array[9L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                   array[2L] == array[11L] && array[3L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && array[2L] == array[12L] && array[3L] == array[12L] && array[9L] == array[12L] && 
array[10L] == array[12L] && array[11L] == array[12L] && 13L < array.Length && array[2L] == array[13L] && array[3L] == array[13L] && array[9L] == array[13L] && array[10L] == array[13L] && 
array[11L] == array[13L] && array[12L] == array[13L] && array.Length == 14L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L] && 
array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L] && 
array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && array[8L] != array[11L] && 
array[0L] != array[12L] && array[1L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && array[8L] != array[12L] && 
array[0L] != array[13L] && array[1L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && array[6L] != array[13L] && array[7L] != array[13L] && array[8L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="115ec31b-ae29-4a09-b9bd-fdc1e1201cf0" index="187" run="187" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct20603"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct20603()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                                                   array[1L] == array[4L] && 5L < array.Length && array[2L] == array[5L] && array[3L] == array[5L] && array.Length == 6L && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e19f6f01-605c-42a6-95a7-d036bbdd9190" index="188" run="188" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException576"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException576()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && 
                                                         array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && 6 < (int)(array.Length) && 6L < array.Length && array[1L] == array[6L] && 
                                                                                                                                                                                                                 array[4L] == array[6L] && array[5L] == array[6L] && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="61a22028-3165-45a1-ab8d-446eca17ecef" index="189" run="189" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct956"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct956()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && 
                                                         array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && 6L < array.Length && array[1L] == array[6L] && array[4L] == array[6L] && 
                                                                                                                                                                                                                array[5L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="cde4f143-53d0-4305-8a3a-f13e83af4ed6" index="190" run="190" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct191"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 1, 0, 128, 128, 1, 1, 1, 128, 128, 128, 128, 2}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 1;
ints[2] = 128;
ints[3] = 128;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 128;
ints[8] = 128;
ints[9] = 128;
ints[10] = 128;
ints[11] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct191()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 1;
    ints[2] = 128;
    ints[3] = 128;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 128;
    ints[8] = 128;
    ints[9] = 128;
    ints[10] = 128;
    ints[11] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[2L] == array[10L] && array[3L] == array[10L] && array[7L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 array[8L] == array[10L] && array[9L] == array[10L] && 11L < array.Length && array.Length == 12L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && 
array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && 
array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && 
array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && 
array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && 
array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && array[8L] != array[11L] && array[9L] != array[11L] && array[10L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="1857bba9-3f7e-4c46-b9a6-4b8bd8d4e12b" index="191" run="191" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct533"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct533()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d6de25ec-6a66-42b7-be46-b9f7d55198a6" index="192" run="192" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct87503"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 1, 1, 4, 4}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 5;
ints[1] = 1;
ints[2] = 1;
ints[3] = 4;
ints[4] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct87503()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 5;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 4;
    ints[4] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && 4L < array.Length && array[3L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="9dd9c406-037c-4703-abe0-c4dbb7ecd871" index="193" run="193" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct587"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 256, 0, 1, 1, 256, 256, 256, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 256, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 256;
ints[2] = 1;
ints[3] = 1;
ints[4] = 256;
ints[5] = 256;
ints[6] = 256;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 1;
ints[16] = 1;
ints[17] = 1;
ints[18] = 1;
ints[19] = 1;
ints[20] = 1;
ints[21] = 1;
ints[22] = 1;
ints[23] = 1;
ints[24] = 1;
ints[25] = 1;
ints[26] = 1;
ints[27] = 256;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct587()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 256;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 256;
    ints[5] = 256;
    ints[6] = 256;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 1;
    ints[16] = 1;
    ints[17] = 1;
    ints[18] = 1;
    ints[19] = 1;
    ints[20] = 1;
    ints[21] = 1;
    ints[22] = 1;
    ints[23] = 1;
    ints[24] = 1;
    ints[25] = 1;
    ints[26] = 1;
    ints[27] = 256;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5cb627f9-1edf-4c47-aa9b-e9bfea243f58" index="194" run="194" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct51901"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 1, 0, 3}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[1] = 1;
ints[2] = 1;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct51901()
{
    int i;
    int[] ints = new int[5];
    ints[1] = 1;
    ints[2] = 1;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[0L] == array[3L] && 4L < array.Length && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="893019b4-c072-4a34-8b81-aacd25816994" index="195" run="195" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct836"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct836()
{
    int i;
    int[] ints = new int[21];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="969c4873-8202-4457-b369-8264ea49e02f" index="196" run="196" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct964"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=25; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[25];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct964()
{
    int i;
    int[] ints = new int[25];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="d0facf4f-ea87-492c-ad97-03d9f3b01de7" index="197" run="197" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct96"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=26; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[26];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct96()
{
    int i;
    int[] ints = new int[26];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="57a08b91-8faa-4abf-ae8c-f836bd4d7d59" index="198" run="198" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct583"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct583()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[5L] && array[1L] == array[5L] && 
                                                                                                                                                                                           array[2L] == array[5L] && array[3L] == array[5L] && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[5L] == array[6L] && 
                                                                                                                                                                                                                                                                                                                                                       array[4L] == array[7L] && array[4L] == array[8L] && array[7L] == array[8L] && array[4L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 10L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[4L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[4L] && array[1L] != array[4L] && 
array[2L] != array[4L] && array[3L] != array[4L] && array[4L] != array[5L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && 
array[3L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && 
array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[5L] != array[9L] && 
array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="bcedde76-026f-42f6-a5f3-328e6a999411" index="199" run="199" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct467"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=27; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[27];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct467()
{
    int i;
    int[] ints = new int[27];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="394356a8-7353-4b3d-90c7-ce9a0f32faaa" index="200" run="200" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct555"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 0, 1, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct555()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                                                                                                     array[3L] == array[5L] && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[5L] == array[6L] && 7L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                 array[4L] == array[7L] && array.Length == 8L && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[4L] != array[5L] && 
array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="df540b76-c005-4332-b9cc-01960ba591d4" index="201" run="201" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException627"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 1}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[6] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException627()
{
    int i;
    int[] ints = new int[7];
    ints[6] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && 
                                                                                                                                                                                                                     array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 6 < (int)(array.Length) && 
                                                                                                                                                                                                                                                                                                                                                                                 6L < array.Length && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="912e28c2-4ca2-4c69-abac-c8e7dae46070" index="202" run="202" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct971"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 1, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[4] = 1;
ints[5] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct971()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 1;
    ints[5] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && 
                                                                                                                                                                                           array[2L] == array[4L] && array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 
                                                                                                                                                                                                                                                                                                                                                       6L < array.Length && array.Length == 7L && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e75299c7-cb0c-4094-95d8-5a1dc6a820b9" index="203" run="203" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct66"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{33, 65, 1, 0, 64}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 33;
ints[1] = 65;
ints[2] = 1;
ints[4] = 64;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct66()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 33;
    ints[1] = 65;
    ints[2] = 1;
    ints[4] = 64;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 4L < array.Length && array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                              array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="fafdab06-9d7a-420b-a683-fc297135e451" index="204" run="204" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct451"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 1, 0, 128, 128, 1, 1, 1, 128, 128, 128, 128, 2, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 1;
ints[2] = 128;
ints[3] = 128;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 128;
ints[8] = 128;
ints[9] = 128;
ints[10] = 128;
ints[11] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct451()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 1;
    ints[2] = 128;
    ints[3] = 128;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 128;
    ints[8] = 128;
    ints[9] = 128;
    ints[10] = 128;
    ints[11] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && 
                                                                                                                                                                                                                                               array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[2L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && 12L < array.Length && array[1L] == array[12L] && array.Length == 13L && 
array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && 
array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && 
array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && 
array[1L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && 
array[8L] != array[11L] && array[9L] != array[11L] && array[10L] != array[11L] && array[0L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && array[4L] != array[12L] && 
array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && array[8L] != array[12L] && array[9L] != array[12L] && array[10L] != array[12L] && array[11L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="ea97b663-8bd2-4996-bc7a-d26ecf4f8687" index="205" run="205" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct484"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct484()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a17f21c0-086d-431d-9435-670dd8d586d4" index="206" run="206" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct95601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 1, 2, 2, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct95601()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 
                                                                                   array[0L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && 5L < array.Length && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[1L] != array[3L] && array[1L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="43b16be2-1034-414c-ab2a-1eae5b71dfa6" index="207" run="207" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct36302"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 0, 1, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct36302()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 
                                                                                   array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && 
                                                                                                                                                                                                                                               array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[7L] && 8L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[4L] == array[8L] && array[7L] == array[8L] && array.Length == 9L && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[4L] != array[5L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[5L] != array[7L] && 
array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L];
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:31:21Z" category="progress" message="  500 constraint systems (41.40% solved, 58.60% proven unsatisfiable), flipping location Question.countDistinct(Int32[]) at 0x0052 took 1s (61.37%)"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7097d24f-e3e8-4eb3-b4e1-a5cae1db861e" index="208" run="208" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct14302"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct14302()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[1L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array.Length == 5L && 
                                                                                                                                  array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1eeea566-6ba5-4450-8397-6cfb628baca8" index="209" run="209" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct945"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 1, 0, 3, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 1;
ints[2] = 1;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct945()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 1;
    ints[2] = 1;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[0L] == array[3L] && 5L < array.Length && 
                                                                                   array[0L] == array[5L] && array[3L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && 
                                                                                                                                                                                                                                           array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="2ac1bcd5-dbb0-4d72-a350-36e57c46076d" index="210" run="210" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct934"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct934()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="f11a44e5-b5c1-4a8d-870f-f25efe8d7209" index="211" run="211" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct302"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 128, 1, 0, 1, 1, 1, 0, 128, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[1] = 128;
ints[2] = 1;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[8] = 128;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct302()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[1] = 128;
    ints[2] = 1;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[8] = 128;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 
                               array[0L] == array[4L] && array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && 
                                                                                                                                                                                           array[4L] == array[6L] && array[5L] == array[6L] && array[3L] == array[7L] && array[1L] == array[8L] && array[3L] == array[9L] && array[7L] == array[9L] && 10L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                       array[3L] == array[10L] && array[7L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && 
array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[8L] != array[9L] && 
array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[8L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="947b4e82-aee0-4279-815e-f8520dc4aed0" index="212" run="212" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct367"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 5, 0, 1, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 5;
ints[3] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct367()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 5;
    ints[3] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && array[0L] == array[4L] && array[3L] == array[4L] && 
                                                                                   5L < array.Length && array[2L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                      array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="3a936f78-c604-4aeb-ab53-d5599d1a8435" index="213" run="213" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct453"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct453()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1b6c07d1-8ba8-48b8-bdf6-aa3021645ba6" index="214" run="214" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct388"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 128, 1, 0, 1, 1, 1, 0, 128}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 1;
ints[1] = 128;
ints[2] = 1;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[8] = 128;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct388()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 1;
    ints[1] = 128;
    ints[2] = 1;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[8] = 128;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && array[2L] == array[4L] && 
                                                                                   array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 
                                                                                                                                                                                                                                               array[3L] == array[7L] && 8L < array.Length && array[1L] == array[8L] && array.Length == 9L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                  array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && 
array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="f49d5f8d-39da-446e-aaee-3c6cf746e67b" index="215" run="215" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct87504"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=29; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[29];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct87504()
{
    int i;
    int[] ints = new int[29];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="77d95b98-f769-4f87-9218-48a677fbc8bc" index="216" run="216" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct494"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
ints[27] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct494()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    ints[27] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="3131fe1d-12b0-47b5-80a5-af6040a25868" index="217" run="217" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct493"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=25; 65, 0, 64, 64, 65, 65, 65, 64, 64, 64, 64, 64, 64, 64, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[25];
ints[0] = 65;
ints[2] = 64;
ints[3] = 64;
ints[4] = 65;
ints[5] = 65;
ints[6] = 65;
ints[7] = 64;
ints[8] = 64;
ints[9] = 64;
ints[10] = 64;
ints[11] = 64;
ints[12] = 64;
ints[13] = 64;
ints[14] = 65;
ints[24] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct493()
{
    int i;
    int[] ints = new int[25];
    ints[0] = 65;
    ints[2] = 64;
    ints[3] = 64;
    ints[4] = 65;
    ints[5] = 65;
    ints[6] = 65;
    ints[7] = 64;
    ints[8] = 64;
    ints[9] = 64;
    ints[10] = 64;
    ints[11] = 64;
    ints[12] = 64;
    ints[13] = 64;
    ints[14] = 65;
    ints[24] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e080dc6b-e97a-438f-8165-ce38e31e97e0" index="218" run="218" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct162"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 1, 0, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 2;
ints[2] = 1;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct162()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 2;
    ints[2] = 1;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 4L < array.Length && array[1L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="3b0e7ec5-41db-46c3-9f60-35b0e3e70dba" index="219" run="219" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct98"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct98()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 
                               array[0L] == array[3L] && array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && 
                                                                                                                                                                                           array[5L] == array[6L] && array[1L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && array[1L] == array[8L] && array[4L] == array[8L] && 
                                                                                                                                                                                                                                                                                                                                                       array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && array[1L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[7L] == array[9L] && array[8L] == array[9L] && 10L < array.Length && array[1L] == array[10L] && array[4L] == array[10L] && array[5L] == array[10L] && array[6L] == array[10L] && 
array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && 
array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[0L] != array[8L] && array[2L] != array[8L] && 
array[3L] != array[8L] && array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="04018904-5225-40dc-83fd-4c6ba568b991" index="220" run="220" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct996"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct996()
{
    int i;
    int[] ints = new int[22];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6ea1a59f-f34f-4ab0-890d-0d505e0e7d43" index="221" run="221" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct843"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct843()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && 
                                                         array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 
                                                                                                                                                                                                                     7L < array.Length && array[1L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && array.Length == 8L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && 
array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="749895cf-5d7a-4897-865a-87c0cd5a2f2d" index="222" run="222" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct766"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct766()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9f831351-7360-4109-9ef5-4dc07d464354" index="223" run="223" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct360"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 1, 4, 1, 4}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 5;
ints[1] = 1;
ints[2] = 4;
ints[3] = 1;
ints[4] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct360()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 5;
    ints[1] = 1;
    ints[2] = 4;
    ints[3] = 1;
    ints[4] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[3L] && 4L < array.Length && array[2L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="94da6cb9-dd29-4fee-b576-24d260dac87c" index="224" run="224" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct560"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 0, 1, 1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct560()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                                                                       array[2L] == array[3L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[0L] == array[6L] && array[1L] == array[6L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[6L] && array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[7L] && array[4L] == array[8L] && array[7L] == array[8L] && 9L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[4L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && 
array[3L] != array[4L] && array[4L] != array[5L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && 
array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9e51a692-38e6-48ce-8603-4d719d13cb16" index="225" run="225" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct488"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct488()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 
                                                                                   array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[7L] && 
                                                                                                                                                                                                                                               array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && 8L < array.Length && array[1L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                      array[6L] == array[8L] && array[7L] == array[8L] && array.Length == 9L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && 
array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && 
array[3L] != array[6L] && array[0L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="583aef65-1ed1-45aa-9baa-4fd63dd10557" index="226" run="226" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct129"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 0, 64, 1, 1, 0, 0, 0, 1, 1, 1, 64, 1, 64}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[1] = 64;
ints[2] = 1;
ints[3] = 1;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 64;
ints[11] = 1;
ints[12] = 64;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct129()
{
    int i;
    int[] ints = new int[13];
    ints[1] = 64;
    ints[2] = 1;
    ints[3] = 1;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 64;
    ints[11] = 1;
    ints[12] = 64;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && 
                                                                                                                                                                                                                                               array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[1L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[2L] == array[11L] && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && 12L < array.Length && array[1L] == array[12L] && 
array[10L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && 
array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && 
array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && 
array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L] && array[9L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && 
array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[10L] != array[11L] && array[0L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && 
array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && array[8L] != array[12L] && array[9L] != array[12L] && array[11L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="6a6b1a66-c437-441f-95d2-9f6420f69cfb" index="227" run="227" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct365"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=29; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[29];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
ints[27] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct365()
{
    int i;
    int[] ints = new int[29];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    ints[27] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="9cb4dd29-0402-4ac9-923a-025f64ffa580" index="228" run="228" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct658"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct658()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="65325c90-d322-4a33-a3de-e4624ce15305" index="229" run="229" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct50401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 0, 1, 1, 3, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 2;
ints[2] = 1;
ints[3] = 1;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct50401()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 2;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 5L < array.Length && array[1L] == array[5L] && 
                                                                              array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                      array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="6bafe22c-44c8-43b3-acc0-89442cc8fdad" index="230" run="230" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct607"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=26; 65, 0, 64, 64, 65, 65, 65, 64, 64, 64, 64, 64, 64, 64, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[26];
ints[0] = 65;
ints[2] = 64;
ints[3] = 64;
ints[4] = 65;
ints[5] = 65;
ints[6] = 65;
ints[7] = 64;
ints[8] = 64;
ints[9] = 64;
ints[10] = 64;
ints[11] = 64;
ints[12] = 64;
ints[13] = 64;
ints[14] = 65;
ints[24] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct607()
{
    int i;
    int[] ints = new int[26];
    ints[0] = 65;
    ints[2] = 64;
    ints[3] = 64;
    ints[4] = 65;
    ints[5] = 65;
    ints[6] = 65;
    ints[7] = 64;
    ints[8] = 64;
    ints[9] = 64;
    ints[10] = 64;
    ints[11] = 64;
    ints[12] = 64;
    ints[13] = 64;
    ints[14] = 65;
    ints[24] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e8467893-8377-4342-aa82-8671a0775c3b" index="231" run="231" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct684"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 128, 1, 0, 1, 1, 1, 0, 128, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
ints[1] = 128;
ints[2] = 1;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[8] = 128;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct684()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    ints[1] = 128;
    ints[2] = 1;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[8] = 128;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                       array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[3L] == array[7L] && array[1L] == array[8L] && 
                                                                                                                                                                                                                                                                                                   9L < array.Length && array[3L] == array[9L] && array[7L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && 
array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[8L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9362fa56-ab20-4980-95d2-7e6613d79df6" index="232" run="232" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct554"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct554()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && 
                                                                                                                                       array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && 
                                                                                                                                                                                                                                                                                                   array[6L] == array[7L] && array[1L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && array[1L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[1L] == array[10L] && array[4L] == array[10L] && 
array[5L] == array[10L] && array[6L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && 11L < array.Length && array[1L] == array[11L] && 
array[4L] == array[11L] && array[5L] == array[11L] && array[6L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 
array.Length == 12L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
array[2L] != array[7L] && array[3L] != array[7L] && array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[0L] != array[9L] && array[2L] != array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            array[3L] != array[9L] && array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[0L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="10bc15d5-513f-459e-87c2-f976d5481b26" index="233" run="233" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct659"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct659()
{
    int i;
    int[] ints = new int[22];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1895c7a0-4ea7-4abc-9762-bff24d6fd5c5" index="234" run="234" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct358"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 1, 1, 4, 4, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 5;
ints[1] = 1;
ints[2] = 1;
ints[3] = 4;
ints[4] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct358()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 5;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 4;
    ints[4] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[3L] == array[4L] && 5L < array.Length && 
                                                                                   array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                           array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="95e95492-2164-4d10-b214-9ce26a7eb1df" index="235" run="235" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct551"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct551()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && 
                                                                                                                                       array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && 
                                                                                                                                                                                                                                                                                                   array[6L] == array[7L] && array[1L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && 9L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[1L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[2L] != array[7L] && 
array[3L] != array[7L] && array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="c2ef8989-513a-4d50-8143-54b8a09f2d40" index="236" run="236" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct534"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 8, 0, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 8, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 8;
ints[2] = 1;
ints[3] = 1;
ints[4] = 8;
ints[5] = 8;
ints[6] = 8;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 8;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct534()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 8;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 8;
    ints[5] = 8;
    ints[6] = 8;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 8;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="719b33f3-1e2e-4b0e-b85f-1bad674cfe75" index="237" run="237" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct89801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[4] = 1;
ints[5] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct89801()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 1;
    ints[5] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && 
                                                                                                                                                                                           array[2L] == array[4L] && array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 
                                                                                                                                                                                                                                                                                                                                                       array[6L] == array[7L] && array[6L] == array[8L] && array[7L] == array[8L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 10L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[6L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[6L] && array[1L] != array[6L] && 
array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && 
array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && 
array[4L] != array[8L] && array[5L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && 
array[5L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="125f2947-9148-409b-ba00-38602bfdaf4c" index="238" run="238" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct434"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct434()
{
    int i;
    int[] ints = new int[21];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="b4c83f5e-5793-4ce4-a6fb-ead36df2537d" index="239" run="239" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct812"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct812()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="150e2960-0fea-4085-bb26-58353b570a25" index="240" run="240" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct292"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 1, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[4] = 1;
ints[5] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct292()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 1;
    ints[5] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && 
                                                                                                                                                                                                                     array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 7L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                 array[6L] == array[7L] && array.Length == 8L && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L] && 
array[5L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<boundary kind="maxconditions" value="500" message="maximum number of conditions exceeded"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<generatedTest id="deebb595-7034-4e76-9785-3b4a0b26e3b1" index="241" run="241" status="pathboundsexceeded" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct77"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=31; 256, 0, 1, 1, 256, 256, 256, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 256, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[31];
ints[0] = 256;
ints[2] = 1;
ints[3] = 1;
ints[4] = 256;
ints[5] = 256;
ints[6] = 256;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 1;
ints[16] = 1;
ints[17] = 1;
ints[18] = 1;
ints[19] = 1;
ints[20] = 1;
ints[21] = 1;
ints[22] = 1;
ints[23] = 1;
ints[24] = 1;
ints[25] = 1;
ints[26] = 1;
ints[27] = 256;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void countDistinct77()
{
    int i;
    int[] ints = new int[31];
    ints[0] = 256;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 256;
    ints[5] = 256;
    ints[6] = 256;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 1;
    ints[16] = 1;
    ints[17] = 1;
    ints[18] = 1;
    ints[19] = 1;
    ints[20] = 1;
    ints[21] = 1;
    ints[22] = 1;
    ints[23] = 1;
    ints[24] = 1;
    ints[25] = 1;
    ints[26] = 1;
    ints[27] = 256;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<boundaryCodeUpdate kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</boundaryCodeUpdate>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="e98d50bf-91f8-4acd-ba41-0618e6782a27" index="242" run="242" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct43"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 5, 0, 4, 4, 5, 5, 5, 6, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct43()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[8L] && array[1L] == array[9L] && 
                                                                                                                                                                                                                     array[8L] == array[9L] && array[1L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[1L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                      array[10L] == array[11L] && array[1L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && array[11L] == array[12L] && 13L < array.Length && 
array[1L] == array[13L] && array[8L] == array[13L] && array[9L] == array[13L] && array[10L] == array[13L] && array[11L] == array[13L] && array[12L] == array[13L] && array.Length == 14L && 
array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && 
array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              array[0L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && 
array[0L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && 
array[0L] != array[13L] && array[2L] != array[13L] && array[3L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && array[6L] != array[13L] && array[7L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="9f2483b7-1dec-4e8c-9681-7a07618427a2" index="243" run="243" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct55"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=27; 65, 0, 64, 64, 65, 65, 65, 64, 64, 64, 64, 64, 64, 64, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[27];
ints[0] = 65;
ints[2] = 64;
ints[3] = 64;
ints[4] = 65;
ints[5] = 65;
ints[6] = 65;
ints[7] = 64;
ints[8] = 64;
ints[9] = 64;
ints[10] = 64;
ints[11] = 64;
ints[12] = 64;
ints[13] = 64;
ints[14] = 65;
ints[24] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct55()
{
    int i;
    int[] ints = new int[27];
    ints[0] = 65;
    ints[2] = 64;
    ints[3] = 64;
    ints[4] = 65;
    ints[5] = 65;
    ints[6] = 65;
    ints[7] = 64;
    ints[8] = 64;
    ints[9] = 64;
    ints[10] = 64;
    ints[11] = 64;
    ints[12] = 64;
    ints[13] = 64;
    ints[14] = 65;
    ints[24] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="94526a50-5f88-4298-a792-8228e750382e" index="244" run="244" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct46801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 1, 1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[4] = 1;
ints[5] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct46801()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 1;
    ints[5] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 
                                                                                   array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && 
                                                                                                                                                                                                                                               array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[6L] == array[7L] && 8L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[6L] == array[8L] && array[7L] == array[8L] && array.Length == 9L && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[4L] != array[6L] && array[5L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && 
array[5L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ad7c106c-1936-4706-ab0f-2098aff0c43f" index="245" run="245" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct175"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{33, 65, 1, 0, 64, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 33;
ints[1] = 65;
ints[2] = 1;
ints[4] = 64;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct175()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 33;
    ints[1] = 65;
    ints[2] = 1;
    ints[4] = 64;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 5L < array.Length && array[3L] == array[5L] && array.Length == 6L && 
                                                                              array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                          array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="83d12e92-f0cd-4f1a-94be-5bf6d545bf91" index="246" run="246" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct41"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=24; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[24];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct41()
{
    int i;
    int[] ints = new int[24];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="f8b2eb08-cb61-4f8f-b717-a78e09a2f9d5" index="247" run="247" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct865"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=25; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[25];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct865()
{
    int i;
    int[] ints = new int[25];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="ec3d0d13-e307-48ae-a257-b8d22ad1c296" index="248" run="248" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct16302"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
ints[27] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct16302()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    ints[27] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="a22ee919-6e20-4b27-8b97-02fbff25b3f6" index="249" run="249" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct67"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 2, 1, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct67()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && 
                                                         array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && 
                                                                                                                                                                                                                     array[5L] == array[6L] && array[3L] == array[7L] && array[3L] == array[8L] && array[7L] == array[8L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                 array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && 
array[9L] == array[11L] && array[10L] == array[11L] && array[3L] == array[12L] && array[7L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      array[11L] == array[12L] && 13L < array.Length && array[3L] == array[13L] && array[7L] == array[13L] && array[8L] == array[13L] && array[9L] == array[13L] && array[10L] == array[13L] && 
array[11L] == array[13L] && array[12L] == array[13L] && array.Length == 14L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && 
array[1L] != array[8L] && array[2L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && 
array[2L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && 
array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[2L] != array[11L] && array[4L] != array[11L] && 
array[5L] != array[11L] && array[6L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[2L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && 
array[6L] != array[12L] && array[0L] != array[13L] && array[1L] != array[13L] && array[2L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && array[6L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="08b87b74-6912-498b-9e12-6c3bbca24c9a" index="250" run="250" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct790"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 65, 0, 64, 64, 65, 65, 65, 64, 64, 64, 64, 64, 64, 64, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 65;
ints[2] = 64;
ints[3] = 64;
ints[4] = 65;
ints[5] = 65;
ints[6] = 65;
ints[7] = 64;
ints[8] = 64;
ints[9] = 64;
ints[10] = 64;
ints[11] = 64;
ints[12] = 64;
ints[13] = 64;
ints[14] = 65;
ints[24] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct790()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 65;
    ints[2] = 64;
    ints[3] = 64;
    ints[4] = 65;
    ints[5] = 65;
    ints[6] = 65;
    ints[7] = 64;
    ints[8] = 64;
    ints[9] = 64;
    ints[10] = 64;
    ints[11] = 64;
    ints[12] = 64;
    ints[13] = 64;
    ints[14] = 65;
    ints[24] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9f8a579f-8729-4f25-bf78-fe1c1483be96" index="251" run="251" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct11701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 0, 0, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 2;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct11701()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 4L < array.Length && array[1L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="c9dc0c8d-ad64-49e6-84b7-c72754d7c057" index="252" run="252" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct108"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct108()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 
                                                                                   array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[7L] && 
                                                                                                                                                                                                                                               array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && array[1L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[7L] == array[8L] && array[1L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 
array[1L] == array[10L] && array[4L] == array[10L] && array[5L] == array[10L] && array[6L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && 
array[1L] == array[11L] && array[4L] == array[11L] && array[5L] == array[11L] && array[6L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && 
array[10L] == array[11L] && 12L < array.Length && array[1L] == array[12L] && array[4L] == array[12L] && array[5L] == array[12L] && array[6L] == array[12L] && array[7L] == array[12L] && 
array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && array[11L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && array[1L] != array[2L] && 
array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[0L] != array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                array[2L] != array[8L] && array[3L] != array[8L] && array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[0L] != array[10L] && array[2L] != array[10L] && 
array[3L] != array[10L] && array[0L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[0L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="20c50cfb-3134-47d1-8446-494e7e125e80" index="253" run="253" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct557"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 1, 1, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[4] = 1;
ints[5] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct557()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 1;
    ints[5] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                                                                       array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[6L] == array[7L] && array[6L] == array[8L] && array[7L] == array[8L] && 9L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && 
array[3L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && 
array[5L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="80451fcd-b9ea-402b-9ac6-4134df59b338" index="254" run="254" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException694"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 256, 0, 1, 512, 1, 256}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[1] = 256;
ints[3] = 1;
ints[4] = 512;
ints[5] = 1;
ints[6] = 256;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException694()
{
    int i;
    int[] ints = new int[7];
    ints[1] = 256;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 1;
    ints[6] = 256;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && 
                                                         6 < (int)(array.Length) && 6L < array.Length && array[1L] == array[6L] && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                 array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6fcababd-1c11-4d4d-86f4-c4dd2041902d" index="255" run="255" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct268"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{16, 1, 16, 0, 64, 0, 1}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 16;
ints[1] = 1;
ints[2] = 16;
ints[4] = 64;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct268()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 16;
    ints[1] = 1;
    ints[2] = 16;
    ints[4] = 64;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && 
                                                         6L < array.Length && array[1L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                            array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="dd8231dd-7c4f-4602-b63f-d839e7b90d87" index="256" run="256" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException606"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 1, 1, 4, 4, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 5;
ints[1] = 1;
ints[2] = 1;
ints[3] = 4;
ints[4] = 4;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException606()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 5;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 4;
    ints[4] = 4;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[3L] == array[4L] && 
                                                         6 < (int)(array.Length) && 6L < array.Length && array[5L] == array[6L] && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                 array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[3L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="59ae8385-1444-425b-a5d3-8ba80b78a552" index="257" run="257" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct77102"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{18, 2, 2, 0, 0, 1, 1}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 18;
ints[1] = 2;
ints[2] = 2;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct77102()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 18;
    ints[1] = 2;
    ints[2] = 2;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[3L] == array[4L] && 
                                                         6L < array.Length && array[5L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                            array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[3L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="89bcf9fa-732a-4151-b98f-375b43a4530d" index="258" run="258" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct49"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct49()
{
    int i;
    int[] ints = new int[6];
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                   array[0L] == array[4L] && array[1L] == array[4L] && array[3L] == array[4L] && 5L < array.Length && array[0L] == array[5L] && array[1L] == array[5L] && array[3L] == array[5L] && 
                                                                                                                                                                                                                                          array[4L] == array[5L] && array.Length == 6L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[3L] && array[2L] != array[4L] && array[2L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="f313be38-6973-4a11-96e5-812d2871ea2a" index="259" run="259" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct325"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[15] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct325()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[15] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="9b5e53f1-240e-4d1c-a198-0b873aa47354" index="260" run="260" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct628"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=27; 128, 16, 0, 0, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[27];
ints[0] = 128;
ints[1] = 16;
ints[4] = 128;
ints[5] = 128;
ints[6] = 128;
ints[26] = 128;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct628()
{
    int i;
    int[] ints = new int[27];
    ints[0] = 128;
    ints[1] = 16;
    ints[4] = 128;
    ints[5] = 128;
    ints[6] = 128;
    ints[26] = 128;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="a1122a26-c7ad-4b5e-bf95-c6ba198cef5c" index="261" run="261" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct384"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct384()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="63b7aec0-8ce1-4930-ae63-7bc41590d6db" index="262" run="262" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct730"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct730()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                   array[2L] == array[4L] && 5L < array.Length && array[2L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="8d5c10e2-c591-4fc7-a2b8-08554d59813f" index="263" run="263" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct880"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 512, 256, 512, 1, 0, 1, 1, 513, 0, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 512;
ints[1] = 256;
ints[2] = 512;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct880()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 512;
    ints[1] = 256;
    ints[2] = 512;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 
                               array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[8L] && array[4L] == array[9L] && array[8L] == array[9L] && 10L < array.Length && 
                                                                                                                                                                                           array[4L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                       array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && 
array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="8c86c488-b2e5-4bef-900d-ca3e5f7a38c8" index="264" run="264" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct907"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{512, 256, 512, 1, 0, 1, 1, 513}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 512;
ints[1] = 256;
ints[2] = 512;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct907()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 512;
    ints[1] = 256;
    ints[2] = 512;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && 
                                                         array[3L] == array[6L] && array[5L] == array[6L] && 7L < array.Length && array.Length == 8L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                            array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ced0c124-1800-467d-8e3e-08d73048318b" index="265" run="265" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct497"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 1, 3}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[1] = 1;
ints[3] = 1;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct497()
{
    int i;
    int[] ints = new int[5];
    ints[1] = 1;
    ints[3] = 1;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[1L] == array[3L] && 4L < array.Length && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="a8715a1a-7015-4ce9-868e-1c0535fb2368" index="266" run="266" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct11301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=29; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[29];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct11301()
{
    int i;
    int[] ints = new int[29];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="780325d4-184f-45ef-860d-c992e7df49ca" index="267" run="267" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct16201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 128, 16, 0, 0, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 128;
ints[1] = 16;
ints[4] = 128;
ints[5] = 128;
ints[6] = 128;
ints[26] = 128;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct16201()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 128;
    ints[1] = 16;
    ints[4] = 128;
    ints[5] = 128;
    ints[6] = 128;
    ints[26] = 128;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="caa8f3e0-19c5-4b65-ba25-115247237c69" index="268" run="268" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct14303"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 4, 0, 37, 37, 4, 4, 4, 37, 37, 37, 37, 37, 37, 37, 37, 0, 37, 37, 37, 4}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 4;
ints[2] = 37;
ints[3] = 37;
ints[4] = 4;
ints[5] = 4;
ints[6] = 4;
ints[7] = 37;
ints[8] = 37;
ints[9] = 37;
ints[10] = 37;
ints[11] = 37;
ints[12] = 37;
ints[13] = 37;
ints[14] = 37;
ints[16] = 37;
ints[17] = 37;
ints[18] = 37;
ints[19] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct14303()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 4;
    ints[2] = 37;
    ints[3] = 37;
    ints[4] = 4;
    ints[5] = 4;
    ints[6] = 4;
    ints[7] = 37;
    ints[8] = 37;
    ints[9] = 37;
    ints[10] = 37;
    ints[11] = 37;
    ints[12] = 37;
    ints[13] = 37;
    ints[14] = 37;
    ints[16] = 37;
    ints[17] = 37;
    ints[18] = 37;
    ints[19] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="90eefb0a-011c-4ccb-8613-001b91d3eb4b" index="269" run="269" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct539"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct539()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.03"/>
<generatedTest id="2e664240-600d-419d-802d-a15648f6a5f6" index="270" run="270" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct55401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct55401()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="a2e11808-b7df-4896-821f-235428af4fb9" index="271" run="271" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct611"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct611()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="3c20d6ff-ba19-4626-82f7-134f9a414129" index="272" run="272" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct63201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct63201()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="903a4eb5-bb20-4740-9f6a-8494ae5c1f91" index="273" run="273" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct11702"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{512, 256, 512, 1, 0, 1, 1, 513, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 512;
ints[1] = 256;
ints[2] = 512;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct11702()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 512;
    ints[1] = 256;
    ints[2] = 512;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && array[3L] == array[6L] && 
                                                                                   array[5L] == array[6L] && 8L < array.Length && array[4L] == array[8L] && array.Length == 9L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                      array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                                                  array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="34b1d61a-ec68-48c7-a52a-2c3af162ae9f" index="274" run="274" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct682"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=24; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[24];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct682()
{
    int i;
    int[] ints = new int[24];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7f61d125-c8b8-413e-bc25-12adf1565e4e" index="275" run="275" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct856"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 257, 256, 257, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 257;
ints[2] = 256;
ints[3] = 257;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct856()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 257;
    ints[2] = 256;
    ints[3] = 257;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[3L] && array[0L] == array[4L] && 5L < array.Length && 
                                                                                   array[0L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                           array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6b4c6872-984b-41c8-b197-28ffec217904" index="276" run="276" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct207"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 8, 0, 16, 1, 1}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 8;
ints[3] = 16;
ints[4] = 1;
ints[5] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct207()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 8;
    ints[3] = 16;
    ints[4] = 1;
    ints[5] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 5L < array.Length && array[4L] == array[5L] && 
                                                                              array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                      array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="82252e0e-f5af-4124-abd0-2c21593b2539" index="277" run="277" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct4602"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 0, 64, 1, 1, 0, 0, 0, 1, 1, 1, 64, 1, 64, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[1] = 64;
ints[2] = 1;
ints[3] = 1;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 64;
ints[11] = 1;
ints[12] = 64;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct4602()
{
    int i;
    int[] ints = new int[14];
    ints[1] = 64;
    ints[2] = 1;
    ints[3] = 1;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 64;
    ints[11] = 1;
    ints[12] = 64;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && 
                                                                                                                                                                                                                     array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                 array[1L] == array[10L] && array[2L] == array[11L] && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[1L] == array[12L] && 
array[10L] == array[12L] && 13L < array.Length && array[0L] == array[13L] && array[4L] == array[13L] && array[5L] == array[13L] && array[6L] == array[13L] && array.Length == 14L && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && 
array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && 
array[6L] != array[9L] && array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && 
array[7L] != array[10L] && array[8L] != array[10L] && array[9L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && 
array[6L] != array[11L] && array[10L] != array[11L] && array[0L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && 
array[6L] != array[12L] && array[7L] != array[12L] && array[8L] != array[12L] && array[9L] != array[12L] && array[11L] != array[12L] && array[1L] != array[13L] && array[2L] != array[13L] && 
array[3L] != array[13L] && array[7L] != array[13L] && array[8L] != array[13L] && array[9L] != array[13L] && array[10L] != array[13L] && array[11L] != array[13L] && array[12L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="c26899f2-df22-4d06-89cc-559dad2ce128" index="278" run="278" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct455"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 256, 1, 0, 0, 256, 256, 256, 0, 0, 0, 0, 0, 0, 0, 0, 256, 256}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 256;
ints[1] = 1;
ints[4] = 256;
ints[5] = 256;
ints[6] = 256;
ints[15] = 256;
ints[16] = 256;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct455()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 256;
    ints[1] = 1;
    ints[4] = 256;
    ints[5] = 256;
    ints[6] = 256;
    ints[15] = 256;
    ints[16] = 256;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="07dd09a0-5a4d-4331-8b75-f1e8f621ac8d" index="279" run="279" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct507"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 8, 0, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 8, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 8;
ints[2] = 1;
ints[3] = 1;
ints[4] = 8;
ints[5] = 8;
ints[6] = 8;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 8;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct507()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 8;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 8;
    ints[5] = 8;
    ints[6] = 8;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 8;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7cf9d357-b562-4b88-801f-0a0dc80083cf" index="280" run="280" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct699"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{512, 256, 512, 1, 0, 1, 1, 513, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 512;
ints[1] = 256;
ints[2] = 512;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct699()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 512;
    ints[1] = 256;
    ints[2] = 512;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[8L] && 
                                                                                                                                       9L < array.Length && array[4L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                           array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="138470d9-13b1-475a-b462-71bea7a7d02b" index="281" run="281" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException432"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException432()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && 
                                                         array[2L] == array[4L] && array[3L] == array[4L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 6 < (int)(array.Length) && 6L < array.Length && 
                                                                                                                                                                                                                      array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                  array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="fb891138-d6b4-48c8-a747-3dedc3e435c6" index="282" run="282" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct25701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct25701()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && 
                                                         array[2L] == array[4L] && array[3L] == array[4L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 6L < array.Length && array[2L] == array[6L] && 
                                                                                                                                                                                                                array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array.Length == 7L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="8d7410e2-9b36-4acb-90fd-6f1ba71b5b8e" index="283" run="283" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct77103"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 2, 1, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[2] = 2;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct77103()
{
    int i;
    int[] ints = new int[6];
    ints[2] = 2;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[4L] && array[1L] == array[4L] && 
                                                                                   5L < array.Length && array[0L] == array[5L] && array[1L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[2L] != array[4L] && array[3L] != array[4L] && array[2L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="819c38c2-b397-4636-9f17-5bbed8f93f88" index="284" run="284" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct68"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 4, 0, 37, 37, 4, 4, 4, 37, 37, 37, 37, 37, 37, 37, 37, 0, 37, 37, 37, 4, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[0] = 4;
ints[2] = 37;
ints[3] = 37;
ints[4] = 4;
ints[5] = 4;
ints[6] = 4;
ints[7] = 37;
ints[8] = 37;
ints[9] = 37;
ints[10] = 37;
ints[11] = 37;
ints[12] = 37;
ints[13] = 37;
ints[14] = 37;
ints[16] = 37;
ints[17] = 37;
ints[18] = 37;
ints[19] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct68()
{
    int i;
    int[] ints = new int[21];
    ints[0] = 4;
    ints[2] = 37;
    ints[3] = 37;
    ints[4] = 4;
    ints[5] = 4;
    ints[6] = 4;
    ints[7] = 37;
    ints[8] = 37;
    ints[9] = 37;
    ints[10] = 37;
    ints[11] = 37;
    ints[12] = 37;
    ints[13] = 37;
    ints[14] = 37;
    ints[16] = 37;
    ints[17] = 37;
    ints[18] = 37;
    ints[19] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="70007495-4154-476d-a02b-da1a428d3eac" index="285" run="285" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException820"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{33, 65, 1, 0, 64, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 33;
ints[1] = 65;
ints[2] = 1;
ints[4] = 64;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException820()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 33;
    ints[1] = 65;
    ints[2] = 1;
    ints[4] = 64;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && 6 < (int)(array.Length) && 
                                                         6L < array.Length && array[3L] == array[6L] && array[5L] == array[6L] && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                            array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="35009ffd-0754-4f00-9500-5a0535103e5d" index="286" run="286" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct651"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{32, 8, 128, 1, 0, 1, 1}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 32;
ints[1] = 8;
ints[2] = 128;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct651()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 32;
    ints[1] = 8;
    ints[2] = 128;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && 6L < array.Length && 
                                                         array[3L] == array[6L] && array[5L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                 array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="55cb1c9f-4f95-41db-908c-9eff0c9df405" index="287" run="287" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct382"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=25; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[25];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct382()
{
    int i;
    int[] ints = new int[25];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="e959407e-abf5-40b7-8a87-80e5cc1407f3" index="288" run="288" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct16303"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct16303()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[2L] == array[3L] && array[2L] == array[4L] && array[3L] == array[4L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[2L] == array[6L] && 
                                                                                                                                                                                           array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && 
                                                                                                                                                                                                                                                                                                                                                       array[6L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[2L] == array[9L] && array[3L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 
array.Length && array[2L] == array[10L] && array[3L] == array[10L] && array[4L] == array[10L] && array[5L] == array[10L] && array[6L] == array[10L] && array[7L] == array[10L] && 
array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
array[0L] != array[4L] && array[1L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[0L] != array[7L] && 
array[1L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="2aec58cf-dce0-4887-87dc-ee18c3a933d6" index="289" run="289" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct634"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct634()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && 
                                                         array[2L] == array[4L] && array[3L] == array[4L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[2L] == array[6L] && array[3L] == array[6L] && 
                                                                                                                                                                                                                     array[4L] == array[6L] && array[5L] == array[6L] && 7L < array.Length && array[2L] == array[7L] && array[3L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && 
                                                                                                                                                                                                                                                                                                                                                                            array[6L] == array[7L] && array.Length == 8L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && 
array[1L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="10010a34-f853-43e9-a8eb-007fc2130d57" index="290" run="290" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct178"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct178()
{
    int i;
    int[] ints = new int[22];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="b4186e30-8ecc-4bd4-b6c2-936fa3f3e1eb" index="291" run="291" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct936"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[11];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct936()
{
    int i;
    int[] ints = new int[11];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && 
                                                                                                                                                                                           array[2L] == array[4L] && array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 
                                                                                                                                                                                                                                                                                                                                                       array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[1L] == array[7L] && array[2L] == array[7L] && array[3L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && array[0L] == array[8L] && 
array[1L] == array[8L] && array[2L] == array[8L] && array[3L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && 
array[0L] == array[9L] && array[1L] == array[9L] && array[2L] == array[9L] && array[3L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && 
array[7L] == array[9L] && array[8L] == array[9L] && 10L < array.Length && array[0L] == array[10L] && array[1L] == array[10L] && array[2L] == array[10L] && array[3L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  array[4L] == array[10L] && array[5L] == array[10L] && array[6L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ddd86ad9-b2d6-4997-abfe-5b1d8fa01538" index="292" run="292" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct76101"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[8];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct76101()
{
    int i;
    int[] ints = new int[8];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && 
                                                                                                                                                                                                                     array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                 array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 7L < array.Length && array[0L] == array[7L] && 
array[1L] == array[7L] && array[2L] == array[7L] && array[3L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && array.Length == 8L;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:31:24Z" category="progress" message="  750 constraint systems (38.93% solved, 61.07% proven unsatisfiable), flipping location Question.countDistinct(Int32[]) at 0x0052 took 2s (62.85%)"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="27fe6566-7193-4f96-b732-49e83e816a7b" index="293" run="293" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct926"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 1, 3, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 1;
ints[3] = 1;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct926()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 1;
    ints[3] = 1;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[1L] == array[3L] && 5L < array.Length && 
                                                                                   array[0L] == array[5L] && array[2L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && 
                                                                                                                                                                                                                                           array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="35718f6e-d7c1-44c6-911f-cf9777c176aa" index="294" run="294" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct438"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 2, 1, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct438()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="4aba2ac0-75cf-4cea-bb82-53b54e0096f5" index="295" run="295" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct294"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct294()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="ded74103-9d9f-4691-adce-d8419327d0dc" index="296" run="296" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct910"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct910()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="f0df904c-3322-4a1e-a655-642ecd704553" index="297" run="297" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct98201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 1, 4, 1, 4, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 5;
ints[1] = 1;
ints[2] = 4;
ints[3] = 1;
ints[4] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct98201()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 5;
    ints[1] = 1;
    ints[2] = 4;
    ints[3] = 1;
    ints[4] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[3L] && array[2L] == array[4L] && 5L < array.Length && 
                                                                                   array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                           array[1L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="74281807-9d01-499b-8bf4-966def6bfec6" index="298" run="298" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct839"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 5, 6, 1, 1, 5, 5, 5, 4, 4, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 5;
ints[1] = 6;
ints[2] = 1;
ints[3] = 1;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 4;
ints[8] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct839()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 5;
    ints[1] = 6;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 4;
    ints[8] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 
                               array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[7L] == array[8L] && 
                                                                                                                                                                                           10L < array.Length && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                 array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && 
array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && 
array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && 
array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="56f02b77-c6b7-427b-b167-2ca47fce3d2d" index="299" run="299" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct826"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct826()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && array[2L] == array[4L] && 
                                                                                   array[3L] == array[4L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && 
                                                                                                                                                                                                                                               array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && 8L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[2L] == array[8L] && array[3L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && array.Length == 9L && 
array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[0L] != array[5L] && 
array[1L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="0b3e97d1-9ef8-4ec0-b931-39a9da2de4b6" index="300" run="300" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct869"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 512, 64, 0, 0, 512, 512, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 64, 64, 1}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 512;
ints[1] = 64;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[18] = 1;
ints[19] = 64;
ints[20] = 64;
ints[21] = 64;
ints[22] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct869()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 512;
    ints[1] = 64;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[18] = 1;
    ints[19] = 64;
    ints[20] = 64;
    ints[21] = 64;
    ints[22] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="4c3f2184-ad17-4744-a356-a28262005ee9" index="301" run="301" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct39"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=26; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[26];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct39()
{
    int i;
    int[] ints = new int[26];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="f3cb5d9e-1c76-4101-ab99-29cb21b2b13f" index="302" run="302" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct5"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct5()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                                                                       array[2L] == array[3L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[0L] == array[6L] && array[1L] == array[6L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[6L] && array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[7L] && array[4L] == array[8L] && array[7L] == array[8L] && array[4L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[7L] == array[9L] && array[8L] == array[9L] && array[4L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && 11L < array.Length && 
array[4L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && array.Length == 12L && array[0L] != array[4L] && 
array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[4L] != array[5L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && 
array[2L] != array[7L] && array[3L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && 
array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[5L] != array[10L] && 
array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="90ed3514-ce43-407b-a059-a870ccfd030d" index="303" run="303" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct644"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 2, 1, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct644()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="28aa1387-b6c0-49d9-b124-305987b15248" index="304" run="304" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct919"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[9];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct919()
{
    int i;
    int[] ints = new int[9];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 
                                                                                   array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && 
                                                                                                                                                                                                                                               array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[1L] == array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && array[1L] == array[7L] && array[2L] == array[7L] && 
array[3L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && 8L < array.Length && array[0L] == array[8L] && array[1L] == array[8L] && 
array[2L] == array[8L] && array[3L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && array.Length == 9L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="787e0cf0-5ed7-4e69-8595-54ce8562ac83" index="305" run="305" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct368"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 0, 0, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 2;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct368()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[1L] == array[4L] && 5L < array.Length && 
                                                                                   array[2L] == array[5L] && array[3L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                           array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="4bca5c3c-b8e9-4c50-878d-59e4c048a59a" index="306" run="306" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct85"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct85()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e7d04f40-631f-40c7-a2c4-2fd4c4811268" index="307" run="307" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException108"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0, 1}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException108()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && 
                                                         array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && 6 < (int)(array.Length) && 6L < array.Length && array[0L] == array[6L] && 
                                                                                                                                                                                                                 array[2L] == array[6L] && array[3L] == array[6L] && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="dd7e731d-a5e1-4cc4-a670-510e0920c3a5" index="308" run="308" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct99501"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 0, 1, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[1] = 1;
ints[4] = 1;
ints[5] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct99501()
{
    int i;
    int[] ints = new int[7];
    ints[1] = 1;
    ints[4] = 1;
    ints[5] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && 
                                                         array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && 6L < array.Length && array[0L] == array[6L] && array[2L] == array[6L] && 
                                                                                                                                                                                                                array[3L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="28b9fff0-3a48-473c-bda4-041a4fc0e8e5" index="309" run="309" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct708"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 1, 128, 129, 129, 1, 1, 1, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 133, 128, 128, 128, 160}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 1;
ints[1] = 128;
ints[2] = 129;
ints[3] = 129;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 129;
ints[8] = 129;
ints[9] = 129;
ints[10] = 129;
ints[11] = 129;
ints[12] = 129;
ints[13] = 129;
ints[14] = 129;
ints[15] = 129;
ints[16] = 129;
ints[17] = 129;
ints[18] = 133;
ints[19] = 128;
ints[20] = 128;
ints[21] = 128;
ints[22] = 160;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct708()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 1;
    ints[1] = 128;
    ints[2] = 129;
    ints[3] = 129;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 129;
    ints[8] = 129;
    ints[9] = 129;
    ints[10] = 129;
    ints[11] = 129;
    ints[12] = 129;
    ints[13] = 129;
    ints[14] = 129;
    ints[15] = 129;
    ints[16] = 129;
    ints[17] = 129;
    ints[18] = 133;
    ints[19] = 128;
    ints[20] = 128;
    ints[21] = 128;
    ints[22] = 160;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="bfd98d98-fc63-4f63-833b-9eeadf5e05a2" index="310" run="310" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct38801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 6, 0, 0, 2}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 1;
ints[2] = 6;
ints[5] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct38801()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 1;
    ints[2] = 6;
    ints[5] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && array[0L] == array[4L] && array[3L] == array[4L] && 
                                                                                   5L < array.Length && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && 
                                                                                                                                                                                                                                      array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a9bef800-5d57-45c4-aa5c-494902fe78c1" index="311" run="311" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException15"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 6, 0, 0, 2, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[1] = 1;
ints[2] = 6;
ints[5] = 2;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException15()
{
    int i;
    int[] ints = new int[7];
    ints[1] = 1;
    ints[2] = 6;
    ints[5] = 2;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && array[0L] == array[4L] && 
                                                         array[3L] == array[4L] && 6 < (int)(array.Length) && 6L < array.Length && array[0L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[0L] != array[1L] && 
                                                                                                                                                                                                                 array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="4f0528fd-6530-4a8c-951c-2b234113efc4" index="312" run="312" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct68201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 8, 2, 1, 1, 0, 1}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 8;
ints[2] = 2;
ints[3] = 1;
ints[4] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct68201()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 8;
    ints[2] = 2;
    ints[3] = 1;
    ints[4] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && array[0L] == array[4L] && 
                                                         array[3L] == array[4L] && 6L < array.Length && array[0L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && 
                                                                                                                                                                                                            array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="a1a1b455-222a-43de-90af-2ab605412f18" index="313" run="313" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct377"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=27; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[27];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct377()
{
    int i;
    int[] ints = new int[27];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<boundary kind="maxconditions" value="500" message="maximum number of conditions exceeded"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<generatedTest id="89b839f4-c3a4-4636-93eb-cab77f2a8cf5" index="314" run="314" status="pathboundsexceeded" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct649"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=31; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[31];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void countDistinct649()
{
    int i;
    int[] ints = new int[31];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<boundaryCodeUpdate kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</boundaryCodeUpdate>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="80b29c13-d6e4-4ae6-b5c2-c4ab080f004e" index="315" run="315" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct500"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 1, 0, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 2;
ints[2] = 1;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct500()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 2;
    ints[2] = 1;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[1L] == array[4L] && 5L < array.Length && 
                                                                                   array[3L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && 
                                                                                                                                                                                                                                           array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="cbea461b-03b0-496e-a206-1c82cba9cb5c" index="316" run="316" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct715"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 6, 1, 1, 5, 5, 5, 4, 4}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 5;
ints[1] = 6;
ints[2] = 1;
ints[3] = 1;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 4;
ints[8] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct715()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 5;
    ints[1] = 6;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 4;
    ints[8] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 8L < array.Length && array[7L] == array[8L] && array.Length == 9L && 
                                                                                                                                                                                                                                          array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                      array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="2fdec31d-5949-4779-8968-afe76eb9f18f" index="317" run="317" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct32802"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 0, 16, 17, 17, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[1] = 16;
ints[2] = 17;
ints[3] = 17;
ints[7] = 17;
ints[8] = 17;
ints[9] = 17;
ints[10] = 17;
ints[11] = 17;
ints[12] = 17;
ints[13] = 17;
ints[14] = 17;
ints[15] = 17;
ints[16] = 17;
ints[17] = 17;
ints[18] = 17;
ints[19] = 17;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct32802()
{
    int i;
    int[] ints = new int[22];
    ints[1] = 16;
    ints[2] = 17;
    ints[3] = 17;
    ints[7] = 17;
    ints[8] = 17;
    ints[9] = 17;
    ints[10] = 17;
    ints[11] = 17;
    ints[12] = 17;
    ints[13] = 17;
    ints[14] = 17;
    ints[15] = 17;
    ints[16] = 17;
    ints[17] = 17;
    ints[18] = 17;
    ints[19] = 17;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="5f9e18a2-2524-4d5d-a09e-c56b01c4358b" index="318" run="318" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct980"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 5, 0, 4, 4, 5, 5, 5, 6, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct980()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="827abacf-e654-4203-bb4f-3aae36af50f9" index="319" run="319" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct81"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[10];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct81()
{
    int i;
    int[] ints = new int[10];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                                                                       array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && array[1L] == array[7L] && array[2L] == array[7L] && array[3L] == array[7L] && array[4L] == array[7L] && 
array[5L] == array[7L] && array[6L] == array[7L] && array[0L] == array[8L] && array[1L] == array[8L] && array[2L] == array[8L] && array[3L] == array[8L] && array[4L] == array[8L] && 
array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && 9L < array.Length && array[0L] == array[9L] && array[1L] == array[9L] && array[2L] == array[9L] && 
array[3L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="820e8698-81e6-457c-9201-c59ecd6f6523" index="320" run="320" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct2201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 3, 1, 0, 2, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 3;
ints[1] = 3;
ints[2] = 1;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct2201()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 3;
    ints[1] = 3;
    ints[2] = 1;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 5L < array.Length && array[3L] == array[5L] && 
                                                                              array.Length == 6L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                      array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<boundary kind="maxconditions" value="500" message="maximum number of conditions exceeded"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<generatedTest id="38dd2bdb-fc4d-4f5c-ac03-8cd4601eee16" index="321" run="321" status="pathboundsexceeded" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct61802"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=31; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[31];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void countDistinct61802()
{
    int i;
    int[] ints = new int[31];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<boundaryCodeUpdate kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</boundaryCodeUpdate>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="897cac31-c976-4383-96fd-f1a4146becaa" index="322" run="322" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct35801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=24; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[24];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct35801()
{
    int i;
    int[] ints = new int[24];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="26c3dbc0-ad2d-4bd8-9c00-d15ae4f22949" index="323" run="323" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct252"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 1, 2, 8, 8, 1, 1, 1, 0, 1, 8, 8, 8, 8, 9}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 1;
ints[1] = 2;
ints[2] = 8;
ints[3] = 8;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[8] = 1;
ints[9] = 8;
ints[10] = 8;
ints[11] = 8;
ints[12] = 8;
ints[13] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct252()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 1;
    ints[1] = 2;
    ints[2] = 8;
    ints[3] = 8;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[8] = 1;
    ints[9] = 8;
    ints[10] = 8;
    ints[11] = 8;
    ints[12] = 8;
    ints[13] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && array[4L] == array[8L] && 
                                                                                                                                                                                                                     array[5L] == array[8L] && array[6L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[2L] == array[10L] && array[3L] == array[10L] && array[9L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                   array[2L] == array[11L] && array[3L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && array[2L] == array[12L] && array[3L] == array[12L] && array[9L] == array[12L] && 
array[10L] == array[12L] && array[11L] == array[12L] && 13L < array.Length && array.Length == 14L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && 
array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && 
array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && 
array[7L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && 
array[8L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && 
array[8L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && 
array[8L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && 
array[8L] != array[12L] && array[0L] != array[13L] && array[1L] != array[13L] && array[2L] != array[13L] && array[3L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      array[6L] != array[13L] && array[7L] != array[13L] && array[8L] != array[13L] && array[9L] != array[13L] && array[10L] != array[13L] && array[11L] != array[13L] && array[12L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="aa9a7e05-2f0b-44bf-aecd-758749584196" index="324" run="324" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct922"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 6, 1, 1, 5, 5, 5, 4, 4, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 5;
ints[1] = 6;
ints[2] = 1;
ints[3] = 1;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 4;
ints[8] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct922()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 5;
    ints[1] = 6;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 4;
    ints[8] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[7L] == array[8L] && 9L < array.Length && array.Length == 10L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                                                                                                                                                                                           array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && 
array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && 
array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && 
array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="35746b6b-cb23-4a20-a23a-3e552c5bb6d8" index="325" run="325" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct63401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 0, 64, 0, 1, 4, 1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct63401()
{
    int i;
    int[] ints = new int[12];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && 
                                                                                                                                       array[2L] == array[7L] && array[0L] == array[8L] && array[2L] == array[8L] && array[7L] == array[8L] && array[0L] == array[9L] && array[2L] == array[9L] && array[7L] == array[9L] && 
                                                                                                                                                                                                                                                                                                   array[8L] == array[9L] && array[0L] == array[10L] && array[2L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && 11L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    array[0L] == array[11L] && array[2L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && array.Length == 12L && 
array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && 
array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[1L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && 
array[6L] != array[7L] && array[1L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[1L] != array[9L] && 
array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[1L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && 
array[5L] != array[10L] && array[6L] != array[10L] && array[1L] != array[11L] && array[3L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="984fd863-daf8-47f2-b631-2c316d87ead1" index="326" run="326" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct45101"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 8, 0, 1, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 8;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct45101()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 8;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && array[2L] == array[4L] && 5L < array.Length && 
                                                                                   array[2L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                           array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="bae85cc6-c76a-4b0e-8be7-782f75d221cc" index="327" run="327" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct890"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 32, 8, 128, 1, 0, 1, 1, 0, 0, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 32;
ints[1] = 8;
ints[2] = 128;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct890()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 32;
    ints[1] = 8;
    ints[2] = 128;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && 
                               array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[7L] && array[4L] == array[8L] && array[7L] == array[8L] && array[4L] == array[9L] && array[7L] == array[9L] && 
                                                                                                                                                                                           array[8L] == array[9L] && 10L < array.Length && array[4L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && 
                                                                                                                                                                                                                                                                                                                                                       array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && 
array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && 
array[3L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && 
array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[5L] != array[9L] && 
array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b347826e-b58c-4e8d-a051-181b739bdfac" index="328" run="328" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct932"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{32, 8, 128, 1, 0, 1, 1, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 32;
ints[1] = 8;
ints[2] = 128;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct932()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 32;
    ints[1] = 8;
    ints[2] = 128;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && array[3L] == array[6L] && 
                                                         array[5L] == array[6L] && 7L < array.Length && array[4L] == array[7L] && array.Length == 8L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                                                                                                            array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && 
array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="a01140eb-0336-4dd9-8ec6-1a806aeee34d" index="329" run="329" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct882"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 5, 0, 4, 4, 5, 5, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct882()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="b58caa33-f825-4008-8c75-830d19db714b" index="330" run="330" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct754"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct754()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d3c26251-7c46-4b4a-9f81-e97a86eebe29" index="331" run="331" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct969"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{32, 8, 128, 1, 0, 1, 1, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 32;
ints[1] = 8;
ints[2] = 128;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct969()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 32;
    ints[1] = 8;
    ints[2] = 128;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && 
                                                                                   array[4L] == array[7L] && 8L < array.Length && array[4L] == array[8L] && array[7L] == array[8L] && array.Length == 9L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                                                                                                                                      array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                  array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && 
array[2L] != array[6L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[5L] != array[7L] && 
array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.03"/>
<generatedTest id="876302bc-aa10-4af8-8328-67c38925d97a" index="332" run="332" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct59802"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 9, 8, 0, 0, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 12}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 9;
ints[1] = 8;
ints[4] = 9;
ints[5] = 9;
ints[6] = 9;
ints[14] = 9;
ints[15] = 8;
ints[16] = 8;
ints[17] = 8;
ints[18] = 8;
ints[19] = 8;
ints[20] = 8;
ints[21] = 8;
ints[22] = 8;
ints[23] = 8;
ints[24] = 8;
ints[25] = 8;
ints[26] = 8;
ints[27] = 8;
ints[28] = 8;
ints[29] = 12;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct59802()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 9;
    ints[1] = 8;
    ints[4] = 9;
    ints[5] = 9;
    ints[6] = 9;
    ints[14] = 9;
    ints[15] = 8;
    ints[16] = 8;
    ints[17] = 8;
    ints[18] = 8;
    ints[19] = 8;
    ints[20] = 8;
    ints[21] = 8;
    ints[22] = 8;
    ints[23] = 8;
    ints[24] = 8;
    ints[25] = 8;
    ints[26] = 8;
    ints[27] = 8;
    ints[28] = 8;
    ints[29] = 12;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="ac80652e-8326-49fc-a81c-39f4b16939ad" index="333" run="333" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct65"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 0, 1, 129, 129, 0, 0, 0, 129, 129, 129, 129, 129, 129, 129, 129, 129, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[1] = 1;
ints[2] = 129;
ints[3] = 129;
ints[7] = 129;
ints[8] = 129;
ints[9] = 129;
ints[10] = 129;
ints[11] = 129;
ints[12] = 129;
ints[13] = 129;
ints[14] = 129;
ints[15] = 129;
ints[16] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct65()
{
    int i;
    int[] ints = new int[17];
    ints[1] = 1;
    ints[2] = 129;
    ints[3] = 129;
    ints[7] = 129;
    ints[8] = 129;
    ints[9] = 129;
    ints[10] = 129;
    ints[11] = 129;
    ints[12] = 129;
    ints[13] = 129;
    ints[14] = 129;
    ints[15] = 129;
    ints[16] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="22856609-ba3f-4378-8bc0-64efb040d3f5" index="334" run="334" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct272"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 17, 25, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[2] = 17;
ints[3] = 25;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct272()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[2] = 17;
    ints[3] = 25;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && 
                                                                              array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                      array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="407e40b8-fced-4a77-a432-141a5881246a" index="335" run="335" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct884"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 0, 64, 0, 1, 4, 1, 1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct884()
{
    int i;
    int[] ints = new int[13];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && array[3L] == array[6L] && 
                                                                                   array[5L] == array[6L] && array[0L] == array[7L] && array[2L] == array[7L] && array[0L] == array[8L] && array[2L] == array[8L] && array[7L] == array[8L] && array[0L] == array[9L] && 
                                                                                                                                                                                                                                               array[2L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[0L] == array[10L] && array[2L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                              array[9L] == array[10L] && array[0L] == array[11L] && array[2L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 
array.Length && array[0L] == array[12L] && array[2L] == array[12L] && array[7L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && 
array[11L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && 
array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && 
array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[1L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && 
array[6L] != array[8L] && array[1L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[1L] != array[10L] && 
array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[1L] != array[11L] && array[3L] != array[11L] && array[4L] != array[11L] && 
array[5L] != array[11L] && array[6L] != array[11L] && array[1L] != array[12L] && array[3L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="891901c5-d048-4b91-a9bc-04e237535eae" index="336" run="336" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct35305"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct35305()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[1L] == array[3L] && array[1L] == array[4L] && 
                                                                                   array[3L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                      array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="349818cd-6714-4238-a61c-5f9c25aebcc2" index="337" run="337" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct64401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct64401()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && array[2L] == array[4L] && array[3L] == array[4L] && array[2L] == array[5L] && 
                                                                                                                                       array[3L] == array[5L] && array[4L] == array[5L] && array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && 
                                                                                                                                                                                                                                                                                                   array[3L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[4L] == array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && 9L < array.Length && array[2L] == array[9L] && array[3L] == array[9L] && array[4L] == array[9L] && 
array[5L] == array[9L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[2L] && array[1L] != array[2L] && 
array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[0L] != array[6L] && 
array[1L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="6083bde3-15be-4e8b-9a83-43f35d39e028" index="338" run="338" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct16202"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct16202()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="21079aed-acb4-4b74-9c8f-21ee243b73ca" index="339" run="339" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct17801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 17, 0, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[2] = 17;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct17801()
{
    int i;
    int[] ints = new int[5];
    ints[2] = 17;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[3L] && array[1L] == array[3L] && 4L < array.Length && array.Length == 5L && 
                                                                                                                                  array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="cd6989c1-acae-4f11-a5fd-80986a7a54f3" index="340" run="340" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct115"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 0, 64, 1, 1, 0, 0, 0, 1, 1, 1, 64, 1, 64, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[1] = 64;
ints[2] = 1;
ints[3] = 1;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 64;
ints[11] = 1;
ints[12] = 64;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct115()
{
    int i;
    int[] ints = new int[15];
    ints[1] = 64;
    ints[2] = 1;
    ints[3] = 1;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 64;
    ints[11] = 1;
    ints[12] = 64;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="e6e99b73-dad4-42a6-8b7a-c2f3044ee7fa" index="341" run="341" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct914"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[15] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct914()
{
    int i;
    int[] ints = new int[21];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[15] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9cf246fd-aabc-4343-a792-db2cef8a1bd6" index="342" run="342" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct140"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 17, 0, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[2] = 17;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct140()
{
    int i;
    int[] ints = new int[6];
    ints[2] = 17;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                   5L < array.Length && array[0L] == array[5L] && array[1L] == array[5L] && array[3L] == array[5L] && array.Length == 6L && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="94d34ab7-a8a4-4fa1-b948-acb340ee2125" index="343" run="343" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct135"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 0, 1, 0, 0, 1, 1, 1, 1, 1, 3, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[1] = 1;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 1;
ints[8] = 1;
ints[9] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct135()
{
    int i;
    int[] ints = new int[11];
    ints[1] = 1;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 
                               array[0L] == array[3L] && array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && 
                                                                                                                                                                                           array[5L] == array[6L] && array[1L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && array[1L] == array[8L] && array[4L] == array[8L] && 
                                                                                                                                                                                                                                                                                                                                                       array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && 10L < array.Length && array[0L] == array[10L] && array[2L] == array[10L] && array[3L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 array.Length == 11L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
array[2L] != array[7L] && array[3L] != array[7L] && array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L] && 
array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L] && array[9L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1348a0d8-b80b-4fec-92bd-ef2c7448c4f4" index="344" run="344" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct89802"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{32, 8, 128, 1, 0, 1, 1, 0, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 32;
ints[1] = 8;
ints[2] = 128;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct89802()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 32;
    ints[1] = 8;
    ints[2] = 128;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[7L] && array[4L] == array[8L] && 
                                                                                                                                       array[7L] == array[8L] && 9L < array.Length && array[4L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                                                                           array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && 
array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="1b86e653-b882-4ee1-a22a-5da201139ad3" index="345" run="345" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct63402"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 0, 16, 17, 17, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[1] = 16;
ints[2] = 17;
ints[3] = 17;
ints[7] = 17;
ints[8] = 17;
ints[9] = 17;
ints[10] = 17;
ints[11] = 17;
ints[12] = 17;
ints[13] = 17;
ints[14] = 17;
ints[15] = 17;
ints[16] = 17;
ints[17] = 17;
ints[18] = 17;
ints[19] = 17;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct63402()
{
    int i;
    int[] ints = new int[23];
    ints[1] = 16;
    ints[2] = 17;
    ints[3] = 17;
    ints[7] = 17;
    ints[8] = 17;
    ints[9] = 17;
    ints[10] = 17;
    ints[11] = 17;
    ints[12] = 17;
    ints[13] = 17;
    ints[14] = 17;
    ints[15] = 17;
    ints[16] = 17;
    ints[17] = 17;
    ints[18] = 17;
    ints[19] = 17;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="bc493142-221a-4ae2-8793-fd2be3c44601" index="346" run="346" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct37701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct37701()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="8a3976d6-2983-4ca3-bd6b-809ba1f65776" index="347" run="347" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct313"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 8, 0, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 8, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 8;
ints[2] = 1;
ints[3] = 1;
ints[4] = 8;
ints[5] = 8;
ints[6] = 8;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 8;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct313()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 8;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 8;
    ints[5] = 8;
    ints[6] = 8;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 8;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="48caec3a-83e3-4d7e-9f98-f9bf250721cf" index="348" run="348" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct581"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 0, 1, 1, 1, 1, 1, 3}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[1] = 1;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 1;
ints[8] = 1;
ints[9] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct581()
{
    int i;
    int[] ints = new int[10];
    ints[1] = 1;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && 
                                                                                                                                       array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && 
                                                                                                                                                                                                                                                                                                   array[6L] == array[7L] && array[1L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && 9L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array.Length == 10L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
array[2L] != array[7L] && array[3L] != array[7L] && array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ca067e0e-bc03-4695-ab75-c13ae28a8de5" index="349" run="349" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct903"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{16, 0, 0, 1, 16, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 16;
ints[3] = 1;
ints[4] = 16;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct903()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 16;
    ints[3] = 1;
    ints[4] = 16;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[0L] == array[4L] && 5L < array.Length && 
                                                                                   array[1L] == array[5L] && array[2L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                           array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="2b9fbc12-9a2c-439c-af6d-c6aafb5f0547" index="350" run="350" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct562"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 32, 8, 128, 1, 0, 1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 32;
ints[1] = 8;
ints[2] = 128;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct562()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 32;
    ints[1] = 8;
    ints[2] = 128;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[7L] && array[4L] == array[8L] && 
                                                                                                                                       array[7L] == array[8L] && array[4L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[4L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && 
                                                                                                                                                                                                                                                                                                     array[9L] == array[10L] && 11L < array.Length && array[4L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  array.Length == 12L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && 
array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && 
array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && 
array[2L] != array[7L] && array[3L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && 
array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && 
array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[5L] != array[10L] && 
array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="e1b97f76-abdc-46cf-b8b5-a7f06bdea6d1" index="351" run="351" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct895"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 0, 66, 64, 64, 0, 0, 0, 65, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[1] = 66;
ints[2] = 64;
ints[3] = 64;
ints[7] = 65;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct895()
{
    int i;
    int[] ints = new int[11];
    ints[1] = 66;
    ints[2] = 64;
    ints[3] = 64;
    ints[7] = 65;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 
                               array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && 
                                                                                                                                                                                           array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[0L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                       array[8L] == array[9L] && 10L < array.Length && array[0L] == array[10L] && array[4L] == array[10L] && array[5L] == array[10L] && array[6L] == array[10L] && array[8L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[9L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && 
array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L] && array[1L] != array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 array[2L] != array[9L] && array[3L] != array[9L] && array[7L] != array[9L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[7L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="f8938674-5779-499a-b977-95a4f11215eb" index="352" run="352" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct309"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[12];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct309()
{
    int i;
    int[] ints = new int[12];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                                                                       array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && array[1L] == array[7L] && array[2L] == array[7L] && array[3L] == array[7L] && array[4L] == array[7L] && 
array[5L] == array[7L] && array[6L] == array[7L] && array[0L] == array[8L] && array[1L] == array[8L] && array[2L] == array[8L] && array[3L] == array[8L] && array[4L] == array[8L] && 
array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && array[0L] == array[9L] && array[1L] == array[9L] && array[2L] == array[9L] && array[3L] == array[9L] && 
array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[0L] == array[10L] && array[1L] == array[10L] && 
array[2L] == array[10L] && array[3L] == array[10L] && array[4L] == array[10L] && array[5L] == array[10L] && array[6L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  array[9L] == array[10L] && 11L < array.Length && array[0L] == array[11L] && array[1L] == array[11L] && array[2L] == array[11L] && array[3L] == array[11L] && array[4L] == array[11L] && 
array[5L] == array[11L] && array[6L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && array.Length == 12L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="716d9aa9-c9d7-47d2-8d97-77967d5901b9" index="353" run="353" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct517"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 66, 64, 64, 0, 0, 0, 65, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[1] = 66;
ints[2] = 64;
ints[3] = 64;
ints[7] = 65;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct517()
{
    int i;
    int[] ints = new int[10];
    ints[1] = 66;
    ints[2] = 64;
    ints[3] = 64;
    ints[7] = 65;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && 9L < array.Length && 
                                                                                                                                                                                                                                                                                                   array[0L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                            array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && 
array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[7L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="74e113f4-9d6a-4422-9c60-03ddc2d41794" index="354" run="354" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct676"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct676()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[1L] == array[3L] && array[2L] == array[3L] && 
                                                                                   5L < array.Length && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                                                                                                                                      array[0L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="e07a75ff-674c-413a-baa9-fc196a3f20fb" index="355" run="355" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct170"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 0, 64, 0, 1, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct170()
{
    int i;
    int[] ints = new int[14];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && 
                                                         array[3L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && array[2L] == array[7L] && array[0L] == array[8L] && array[2L] == array[8L] && array[7L] == array[8L] && 
                                                                                                                                                                                                                     array[0L] == array[9L] && array[2L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[0L] == array[10L] && array[2L] == array[10L] && array[7L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                   array[8L] == array[10L] && array[9L] == array[10L] && array[0L] == array[11L] && array[2L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     array[10L] == array[11L] && array[0L] == array[12L] && array[2L] == array[12L] && array[7L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && 
array[11L] == array[12L] && 13L < array.Length && array[0L] == array[13L] && array[2L] == array[13L] && array[7L] == array[13L] && array[8L] == array[13L] && array[9L] == array[13L] && 
array[10L] == array[13L] && array[11L] == array[13L] && array[12L] == array[13L] && array.Length == 14L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && 
array[1L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[3L] != array[8L] && 
array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[1L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && 
array[6L] != array[9L] && array[1L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[1L] != array[11L] && 
array[3L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[1L] != array[12L] && array[3L] != array[12L] && array[4L] != array[12L] && 
array[5L] != array[12L] && array[6L] != array[12L] && array[1L] != array[13L] && array[3L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && array[6L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="bea35fe4-b417-484f-af0f-33a8f844d53b" index="356" run="356" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct742"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 32, 8, 128, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 32;
ints[1] = 8;
ints[2] = 128;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct742()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 32;
    ints[1] = 8;
    ints[2] = 128;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && 
                                                                                   array[4L] == array[7L] && array[4L] == array[8L] && array[7L] == array[8L] && array[4L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[4L] == array[10L] && 
                                                                                                                                                                                                                                               array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[4L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                 array[10L] == array[11L] && 12L < array.Length && array[4L] == array[12L] && array[7L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && 
array[11L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[0L] != array[7L] && 
array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && 
array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && 
array[3L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[5L] != array[11L] && 
array[6L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.03"/>
<generatedTest id="877e05be-3c09-43cd-a88d-c2d8ce525d3a" index="357" run="357" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct11"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=26; 65, 0, 1, 1, 65, 65, 65, 1, 1, 1, 1, 1, 1, 1, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[26];
ints[0] = 65;
ints[2] = 1;
ints[3] = 1;
ints[4] = 65;
ints[5] = 65;
ints[6] = 65;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 65;
ints[25] = 65;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct11()
{
    int i;
    int[] ints = new int[26];
    ints[0] = 65;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 65;
    ints[5] = 65;
    ints[6] = 65;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 65;
    ints[25] = 65;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.03"/>
<generatedTest id="5eaf4a33-c431-4e54-9c9d-165265d8011c" index="358" run="358" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct568"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=26; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[26];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct568()
{
    int i;
    int[] ints = new int[26];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="1ff254ff-d235-4d01-a68e-f5073380d43e" index="359" run="359" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct803"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=29; 256, 0, 1, 1, 256, 256, 256, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 256, 256}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[29];
ints[0] = 256;
ints[2] = 1;
ints[3] = 1;
ints[4] = 256;
ints[5] = 256;
ints[6] = 256;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 1;
ints[16] = 1;
ints[17] = 1;
ints[18] = 1;
ints[19] = 1;
ints[20] = 1;
ints[21] = 1;
ints[22] = 1;
ints[23] = 1;
ints[24] = 1;
ints[25] = 1;
ints[26] = 1;
ints[27] = 256;
ints[28] = 256;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct803()
{
    int i;
    int[] ints = new int[29];
    ints[0] = 256;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 256;
    ints[5] = 256;
    ints[6] = 256;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 1;
    ints[16] = 1;
    ints[17] = 1;
    ints[18] = 1;
    ints[19] = 1;
    ints[20] = 1;
    ints[21] = 1;
    ints[22] = 1;
    ints[23] = 1;
    ints[24] = 1;
    ints[25] = 1;
    ints[26] = 1;
    ints[27] = 256;
    ints[28] = 256;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a133b9d5-bd11-42c8-9c1f-5b4b89b3fb79" index="360" run="360" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct663"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{6, 2, 0, 3, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 6;
ints[1] = 2;
ints[3] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct663()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 6;
    ints[1] = 2;
    ints[3] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 4L < array.Length && array[2L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                              array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<boundary kind="maxruns" value="360" message="maximum runs reached"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxRuns=720" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="720"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxRuns" token="17000346"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<coverage domain="usercodeundertest" unit="block" covered="15" total="15" coveredRatio="1"/>
<sourceCoverage xml="cov\e334\cov.xml" html="cov\e334\cov.html"/>
<result name="countDistinct(Int32[])" state="success" duration="12.7219892"/>
<duration start="2019-02-15 20:31:15Z" end="2019-02-15 20:31:27Z" seconds="12.7238917"/>
<trajectory><image src="fix\solutionquestion636858378878582277.trajectories.png" width="800" height="1600"/>
</trajectory>
</exploration>
<coverage domain="usercodeundertest" unit="block" covered="15" total="15" coveredRatio="1"/>
<sourceCoverage xml="cov\t604\cov.xml" html="cov\t604\cov.html"/>
<duration start="2019-02-15 20:31:15Z" end="2019-02-15 20:31:27Z" seconds="12.7578014"/>
</fixture>
<fixture name="Question" type="Submission.Question" typeName="Question" token="2000004" href="fix\meta_projectAddToEnd.614.html"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
</type>
<settings typeUnderTest="Submission.Question"/>
<exploration shortName="countDistinct(Int32[])" fullName="Submission.Question.countDistinct(Int32[])"><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b2"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
<settings maxRuns="60" testEmissionFilter="All"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="bbd9f17d-20a9-4bae-95b3-cf998fa3d7f1" index="1" run="1" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct260"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="11" acov="2" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">null</value>
<value name="result">0</value>
<code><![CDATA[int i;
i = Question.countDistinct((int[])null);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct260()
{
    int i;
    i = Question.countDistinct((int[])null);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array == (int[])null;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:31:29Z" category="coverage" message="coverage increased from 0 to 2 blocks (+2) after flipping Submission.Question.countDistinct at 0x000e"/>
<log level="message" time="2019-02-15 20:31:29Z" category="progress" message="    1 runs, 2/11 blocks covered"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="52454955-57d3-4439-b78e-71f8cc958071" index="2" run="2" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct504"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="0" acov="4" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[0];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct504()
{
    int i;
    int[] ints = new int[0];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && (int)(array.Length) < 2;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:31:29Z" category="coverage" message="coverage increased from 2 to 4 blocks (+2) after flipping Submission.Question.countDistinct at 0x000e"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="84ea8c9a-5f7f-4af9-9049-6b3984ef97f9" index="3" run="3" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException415"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="5" dtot="0" acov="9" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[2];
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException415()
{
    int i;
    int[] ints = new int[2];
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs(39)" method="Question.countDistinct(Int32[])" offset="85" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs" line="39"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b2"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[		}
		for (int i = 0; i < array.Length; i++)
		{]]></beforeSource>
<source><![CDATA[			for (int j = 0; j < array.Length; j++)]]></source>
<afterSource><![CDATA[			{
				if (array[i] != array[j])
				{]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && 1L < array.Length && array[0L] == array[1L] && array[1L] == array[0L] && array.Length == 2L;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:31:29Z" category="coverage" message="coverage increased from 4 to 9 blocks (+5) after flipping Submission.Question.countDistinct at 0x0022"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ae002df8-8189-42a5-ad12-cbdf12069c36" index="4" run="4" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct888"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[2];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct888()
{
    int i;
    int[] ints = new int[2];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 1L < array.Length && array.Length == 2L && array[0L] != array[1L] && array[1L] != array[0L];
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:31:29Z" category="coverage" message="coverage increased from 9 to 11 blocks (+2) after flipping Submission.Question.countDistinct at 0x003f"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="871d67a3-6b0f-43d8-a41c-1893c37f39a9" index="5" run="5" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException710"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[3];
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException710()
{
    int i;
    int[] ints = new int[3];
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs(39)" method="Question.countDistinct(Int32[])" offset="85" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs" line="39"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b2"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[		}
		for (int i = 0; i < array.Length; i++)
		{]]></beforeSource>
<source><![CDATA[			for (int j = 0; j < array.Length; j++)]]></source>
<afterSource><![CDATA[			{
				if (array[i] != array[j])
				{]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 2L < array.Length && array[0L] == array[2L] && array.Length == 3L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a92911ce-15db-4a4e-a0a6-bc64160e249c" index="6" run="6" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException222"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[0] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException222()
{
    int i;
    int[] ints = new int[3];
    ints[0] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs(39)" method="Question.countDistinct(Int32[])" offset="85" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs" line="39"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b2"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[		}
		for (int i = 0; i < array.Length; i++)
		{]]></beforeSource>
<source><![CDATA[			for (int j = 0; j < array.Length; j++)]]></source>
<afterSource><![CDATA[			{
				if (array[i] != array[j])
				{]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && 1L < array.Length && 2 < (int)(array.Length) && array[0L] != array[1L] && array[1L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="94b53d48-ff1e-44e7-9599-de62c14ae375" index="7" run="7" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct419"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[2];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct419()
{
    int i;
    int[] ints = new int[2];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 1L < array.Length && array[0L] == array[1L] && array[1L] == array[0L] && array.Length == 2L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="2a96b98c-6da7-40fb-9654-ee07c391ac79" index="8" run="8" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct578"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct578()
{
    int i;
    int[] ints = new int[3];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 2L < array.Length && array.Length == 3L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9653e5cb-d9a3-44d0-a1f0-f13d4eac8f53" index="9" run="9" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException684"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[4];
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException684()
{
    int i;
    int[] ints = new int[4];
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs(37)" method="Question.countDistinct(Int32[])" offset="102" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs" line="37"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b2"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[		{
			return 0;
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			for (int j = 0; j < array.Length; j++)
			{]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 3L < array.Length && array[0L] == array[3L] && array.Length == 4L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3af33d05-b349-4d4a-8f3f-62745f348125" index="10" run="10" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct90"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[3];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct90()
{
    int i;
    int[] ints = new int[3];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && 2L < array.Length && array[0L] == array[2L] && array[1L] == array[0L] && array[1L] == array[2L] && array[2L] == array[0L] && array[2L] == array[1L] && array.Length == 3L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="bdcedde8-8181-4e98-a956-ed249989941e" index="11" run="11" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct361"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[4];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct361()
{
    int i;
    int[] ints = new int[4];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && array[0L] == array[2L] && 3L < array.Length && array[0L] == array[3L] && array[1L] == array[0L] && array[1L] == array[2L] && array[1L] == array[3L] && 
                                                                                                                                                              array[2L] == array[0L] && array[2L] == array[1L] && array[2L] == array[3L] && array[3L] == array[0L] && array[3L] == array[1L] && array[3L] == array[2L] && array.Length == 4L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="51512035-8be7-4b03-a934-c5af43667fa1" index="12" run="12" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException15"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[5];
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException15()
{
    int i;
    int[] ints = new int[5];
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs(39)" method="Question.countDistinct(Int32[])" offset="85" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs" line="39"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b2"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[		}
		for (int i = 0; i < array.Length; i++)
		{]]></beforeSource>
<source><![CDATA[			for (int j = 0; j < array.Length; j++)]]></source>
<afterSource><![CDATA[			{
				if (array[i] != array[j])
				{]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[0L] == array[3L] && 4 < (int)(array.Length) && 4L < array.Length && array[0L] == array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="863ebbc4-5d3e-4219-b577-18b01b12dc3c" index="13" run="13" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct358"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[5];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct358()
{
    int i;
    int[] ints = new int[5];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[0L] == array[2L] && array[0L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array[1L] == array[0L] && array[1L] == array[2L] && array[1L] == array[3L] && 
                                                                                                                                                                                      array[1L] == array[4L] && array[2L] == array[0L] && array[2L] == array[1L] && array[2L] == array[3L] && array[2L] == array[4L] && array[3L] == array[0L] && array[3L] == array[1L] && 
                                                                                                                                                                                                                                                                                                                                                  array[3L] == array[2L] && array[3L] == array[4L] && array[4L] == array[0L] && array[4L] == array[1L] && array[4L] == array[2L] && array[4L] == array[3L] && array.Length == 5L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d9d00bff-7757-4fff-b7d0-fb9f7910b676" index="14" run="14" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException760"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 1}</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[2] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException760()
{
    int i;
    int[] ints = new int[3];
    ints[2] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs(39)" method="Question.countDistinct(Int32[])" offset="85" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs" line="39"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b2"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[		}
		for (int i = 0; i < array.Length; i++)
		{]]></beforeSource>
<source><![CDATA[			for (int j = 0; j < array.Length; j++)]]></source>
<afterSource><![CDATA[			{
				if (array[i] != array[j])
				{]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 2 < (int)(array.Length) && 2L < array.Length && array[1L] == array[0L] && array[0L] != array[2L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1880a0b0-c523-4a05-b701-2c8a0b8b3b13" index="15" run="15" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct212"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct212()
{
    int i;
    int[] ints = new int[3];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 2L < array.Length && array[1L] == array[0L] && array.Length == 3L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7fbb339c-50ee-4bf6-ae91-fec341d306e6" index="16" run="16" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct39"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[6];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct39()
{
    int i;
    int[] ints = new int[6];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[0L] == array[3L] && array[0L] == array[4L] && 
                                                                                                             5L < array.Length && array[0L] == array[5L] && array[1L] == array[0L] && array[1L] == array[2L] && array[1L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && 
                                                                                                                                                                                                                                                                    array[2L] == array[0L] && array[2L] == array[1L] && array[2L] == array[3L] && array[2L] == array[4L] && array[2L] == array[5L] && array[3L] == array[0L] && array[3L] == array[1L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                array[3L] == array[2L] && array[3L] == array[4L] && array[3L] == array[5L] && array[4L] == array[0L] && array[4L] == array[1L] && array[4L] == array[2L] && array[4L] == array[3L] && 
array[4L] == array[5L] && array[5L] == array[0L] && array[5L] == array[1L] && array[5L] == array[2L] && array[5L] == array[3L] && array[5L] == array[4L] && array.Length == 6L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="68ae0a55-4025-4d2f-a99e-ee8a63829174" index="17" run="17" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct828"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct828()
{
    int i;
    int[] ints = new int[3];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 2L < array.Length && array[2L] == array[0L] && array.Length == 3L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="cd25a6d7-6efe-4a52-8a02-735fc114b33d" index="18" run="18" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct659"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[7];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct659()
{
    int i;
    int[] ints = new int[7];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[0L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 6L < array.Length && array[0L] == array[6L] && array[1L] == array[0L] && array[1L] == array[2L] && 
                                                                                                                                                                                                                array[1L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[1L] == array[6L] && array[2L] == array[0L] && array[2L] == array[1L] && array[2L] == array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                            array[2L] == array[4L] && array[2L] == array[5L] && array[2L] == array[6L] && array[3L] == array[0L] && array[3L] == array[1L] && array[3L] == array[2L] && array[3L] == array[4L] && 
array[3L] == array[5L] && array[3L] == array[6L] && array[4L] == array[0L] && array[4L] == array[1L] && array[4L] == array[2L] && array[4L] == array[3L] && array[4L] == array[5L] && 
array[4L] == array[6L] && array[5L] == array[0L] && array[5L] == array[1L] && array[5L] == array[2L] && array[5L] == array[3L] && array[5L] == array[4L] && array[5L] == array[6L] && 
array[6L] == array[0L] && array[6L] == array[1L] && array[6L] == array[2L] && array[6L] == array[3L] && array[6L] == array[4L] && array[6L] == array[5L] && array.Length == 7L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a447660c-2c9b-48d8-8713-d5f500e2c3ab" index="19" run="19" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException68"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 1}</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[3] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException68()
{
    int i;
    int[] ints = new int[4];
    ints[3] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs(39)" method="Question.countDistinct(Int32[])" offset="85" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs" line="39"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b2"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[		}
		for (int i = 0; i < array.Length; i++)
		{]]></beforeSource>
<source><![CDATA[			for (int j = 0; j < array.Length; j++)]]></source>
<afterSource><![CDATA[			{
				if (array[i] != array[j])
				{]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 3 < (int)(array.Length) && 3L < array.Length && array[0L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="2562a23a-376e-4b6e-94a8-7e5173153c5a" index="20" run="20" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct614"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct614()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 3L < array.Length && array[1L] == array[0L] && array[1L] == array[2L] && 
                                                                                                                                  array[2L] == array[0L] && array[2L] == array[1L] && array.Length == 4L && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[3L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="b4434382-f3c9-49d5-89a6-9ef5f15d18e9" index="21" run="21" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct166"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[11];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct166()
{
    int i;
    int[] ints = new int[11];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="082cc37b-8ee1-43ef-be51-dda37ff9fb1d" index="22" run="22" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct731"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[8];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct731()
{
    int i;
    int[] ints = new int[8];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[0L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[0L] == array[6L] && 7L < array.Length && array[0L] == array[7L] && array[1L] == array[0L] && 
                                                                                                                                                                                                                array[1L] == array[2L] && array[1L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[1L] == array[6L] && array[1L] == array[7L] && array[2L] == array[0L] && 
                                                                                                                                                                                                                                                                                                                                                                            array[2L] == array[1L] && array[2L] == array[3L] && array[2L] == array[4L] && array[2L] == array[5L] && array[2L] == array[6L] && array[2L] == array[7L] && array[3L] == array[0L] && 
array[3L] == array[1L] && array[3L] == array[2L] && array[3L] == array[4L] && array[3L] == array[5L] && array[3L] == array[6L] && array[3L] == array[7L] && array[4L] == array[0L] && 
array[4L] == array[1L] && array[4L] == array[2L] && array[4L] == array[3L] && array[4L] == array[5L] && array[4L] == array[6L] && array[4L] == array[7L] && array[5L] == array[0L] && 
array[5L] == array[1L] && array[5L] == array[2L] && array[5L] == array[3L] && array[5L] == array[4L] && array[5L] == array[6L] && array[5L] == array[7L] && array[6L] == array[0L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            array[6L] == array[1L] && array[6L] == array[2L] && array[6L] == array[3L] && array[6L] == array[4L] && array[6L] == array[5L] && array[6L] == array[7L] && array[7L] == array[0L] && 
array[7L] == array[1L] && array[7L] == array[2L] && array[7L] == array[3L] && array[7L] == array[4L] && array[7L] == array[5L] && array[7L] == array[6L] && array.Length == 8L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3df99904-1bdc-4b11-baaa-4599150abf1a" index="23" run="23" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct269"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">7</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(7, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct269()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(7, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 6L < array.Length && array.Length == 7L && 
                                                    array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1f497815-25ab-4fc0-b192-ceb84073c9ee" index="24" run="24" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct373"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">11</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(11, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct373()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(11, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 10L < array.Length && array.Length == 11L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && 
                                                                                                                                                          array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="bd31fcee-7787-48f8-b9b2-dff3ac23806d" index="25" run="25" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct725"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">12</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(12, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct725()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(12, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       11L < array.Length && array.Length == 12L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && 
                                                                                                                                                            array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L] && array[11L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="083c75d7-14d7-4784-8612-9338b6c7b154" index="26" run="26" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct145"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 0, 0, 0}</value>
<value name="result">7</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(7, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct145()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(7, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[0L] && 6L < array.Length && array.Length == 7L && 
                                                                              array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="58f24ecc-dc06-4324-8bc7-a4282038b4ec" index="27" run="27" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct699"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 0, 0}</value>
<value name="result">6</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(6, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct699()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(6, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[0L] && 
                               5L < array.Length && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9e80edea-ddb2-4f26-b045-e892c8224f17" index="28" run="28" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct829"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">8</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(8, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct829()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(8, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 7L < array.Length && array.Length == 8L && array[0L] != array[1L] && 
                                                                          array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="d49d2c8f-f00e-4dc2-bc06-9979f1092821" index="29" run="29" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct597"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[9];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct597()
{
    int i;
    int[] ints = new int[9];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[0L] == array[3L] && array[0L] == array[4L] && 
                                                                                                             array[0L] == array[5L] && array[0L] == array[6L] && array[0L] == array[7L] && 8L < array.Length && array[0L] == array[8L] && array[1L] == array[0L] && array[1L] == array[2L] && 
                                                                                                                                                                                                                                                                    array[1L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[1L] == array[6L] && array[1L] == array[7L] && array[1L] == array[8L] && array[2L] == array[0L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                array[2L] == array[1L] && array[2L] == array[3L] && array[2L] == array[4L] && array[2L] == array[5L] && array[2L] == array[6L] && array[2L] == array[7L] && array[2L] == array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            array[3L] == array[0L] && array[3L] == array[1L] && array[3L] == array[2L] && array[3L] == array[4L] && array[3L] == array[5L] && array[3L] == array[6L] && array[3L] == array[7L] && 
array[3L] == array[8L] && array[4L] == array[0L] && array[4L] == array[1L] && array[4L] == array[2L] && array[4L] == array[3L] && array[4L] == array[5L] && array[4L] == array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    array[4L] == array[7L] && array[4L] == array[8L] && array[5L] == array[0L] && array[5L] == array[1L] && array[5L] == array[2L] && array[5L] == array[3L] && array[5L] == array[4L] && 
array[5L] == array[6L] && array[5L] == array[7L] && array[5L] == array[8L] && array[6L] == array[0L] && array[6L] == array[1L] && array[6L] == array[2L] && array[6L] == array[3L] && 
array[6L] == array[4L] && array[6L] == array[5L] && array[6L] == array[7L] && array[6L] == array[8L] && array[7L] == array[0L] && array[7L] == array[1L] && array[7L] == array[2L] && 
array[7L] == array[3L] && array[7L] == array[4L] && array[7L] == array[5L] && array[7L] == array[6L] && array[7L] == array[8L] && array[8L] == array[0L] && array[8L] == array[1L] && 
array[8L] == array[2L] && array[8L] == array[3L] && array[8L] == array[4L] && array[8L] == array[5L] && array[8L] == array[6L] && array[8L] == array[7L] && array.Length == 9L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="86ed2472-508d-4099-9dff-c8ebadaff01c" index="30" run="30" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct377"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">9</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(9, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct377()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(9, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 8L < array.Length && array.Length == 9L && array[0L] != array[1L] && array[1L] != array[0L] && 
                                                                                                    array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d1b9d56a-0ae7-4cd2-9c5c-d444222f9717" index="31" run="31" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct974"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct974()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[0L] && 3L < array.Length && array.Length == 4L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L] && array[3L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e66cb269-8dad-4f7c-89ee-301206f15d2d" index="32" run="32" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct300"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">10</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(10, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct300()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(10, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 9L < array.Length && array.Length == 10L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && 
                                                                                                                               array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="26510e31-0130-4334-95b2-9de0a378e9f4" index="33" run="33" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct619"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[10];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct619()
{
    int i;
    int[] ints = new int[10];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[0L] == array[2L] && array[0L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[0L] == array[6L] && array[0L] == array[7L] && array[0L] == array[8L] && 
                                                                                                                                                                                           9L < array.Length && array[0L] == array[9L] && array[1L] == array[0L] && array[1L] == array[2L] && array[1L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && 
                                                                                                                                                                                                                                                                                                                                                  array[1L] == array[6L] && array[1L] == array[7L] && array[1L] == array[8L] && array[1L] == array[9L] && array[2L] == array[0L] && array[2L] == array[1L] && array[2L] == array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              array[2L] == array[4L] && array[2L] == array[5L] && array[2L] == array[6L] && array[2L] == array[7L] && array[2L] == array[8L] && array[2L] == array[9L] && array[3L] == array[0L] && 
array[3L] == array[1L] && array[3L] == array[2L] && array[3L] == array[4L] && array[3L] == array[5L] && array[3L] == array[6L] && array[3L] == array[7L] && array[3L] == array[8L] && 
array[3L] == array[9L] && array[4L] == array[0L] && array[4L] == array[1L] && array[4L] == array[2L] && array[4L] == array[3L] && array[4L] == array[5L] && array[4L] == array[6L] && 
array[4L] == array[7L] && array[4L] == array[8L] && array[4L] == array[9L] && array[5L] == array[0L] && array[5L] == array[1L] && array[5L] == array[2L] && array[5L] == array[3L] && 
array[5L] == array[4L] && array[5L] == array[6L] && array[5L] == array[7L] && array[5L] == array[8L] && array[5L] == array[9L] && array[6L] == array[0L] && array[6L] == array[1L] && 
array[6L] == array[2L] && array[6L] == array[3L] && array[6L] == array[4L] && array[6L] == array[5L] && array[6L] == array[7L] && array[6L] == array[8L] && array[6L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      array[7L] == array[0L] && array[7L] == array[1L] && array[7L] == array[2L] && array[7L] == array[3L] && array[7L] == array[4L] && array[7L] == array[5L] && array[7L] == array[6L] && 
array[7L] == array[8L] && array[7L] == array[9L] && array[8L] == array[0L] && array[8L] == array[1L] && array[8L] == array[2L] && array[8L] == array[3L] && array[8L] == array[4L] && 
array[8L] == array[5L] && array[8L] == array[6L] && array[8L] == array[7L] && array[8L] == array[9L] && array[9L] == array[0L] && array[9L] == array[1L] && array[9L] == array[2L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          array[9L] == array[3L] && array[9L] == array[4L] && array[9L] == array[5L] && array[9L] == array[6L] && array[9L] == array[7L] && array[9L] == array[8L] && array.Length == 10L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="212f068a-22bf-4498-9098-d229bce620c9" index="34" run="34" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct492"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct492()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[2L] == array[0L] && 4L < array.Length && array.Length == 5L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L] && array[3L] != array[0L] && array[4L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="34d13414-df29-4773-93ea-d9d361760ea3" index="35" run="35" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct40"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">13</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(13, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct40()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(13, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 12L < array.Length && 
                               array.Length == 13L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && 
                                                                                                                                                                                        array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L] && array[11L] != array[0L] && array[12L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ef961d0f-3cce-4784-8e9e-7e5aa6c457d0" index="36" run="36" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct568"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">14</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(14, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct568()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(14, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 13L < array.Length && array.Length == 14L && 
                                                     array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && 
                                                                                                                                                                                                                 array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L] && array[11L] != array[0L] && array[12L] != array[0L] && array[13L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="93ddde42-481c-411e-ab2d-efbaad66d2c9" index="37" run="37" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct648"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">7</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(7, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct648()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(7, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[1L] == array[0L] && 6L < array.Length && array.Length == 7L && 
                                                                                                        array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="8eb31edc-5154-4d38-843d-52c1a423f4bc" index="38" run="38" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct935"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[12];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct935()
{
    int i;
    int[] ints = new int[12];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="41e252d0-c3c6-4060-a5df-b7c54e02a325" index="39" run="39" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct752"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">15</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(15, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct752()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(15, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 14L < array.Length && array.Length == 15L && array[0L] != array[1L] && 
                                                                            array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && 
                                                                                                                                                                                                                                        array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L] && array[11L] != array[0L] && array[12L] != array[0L] && array[13L] != array[0L] && array[14L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ef392440-73b8-48d4-96f7-d9848654d450" index="40" run="40" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct29"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct29()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[0L] && array[1L] == array[2L] && array[2L] == array[0L] && 
                                                                                                                                       array[2L] == array[1L] && 4L < array.Length && array.Length == 5L && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[3L] != array[0L] && array[4L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a0588a35-45f0-4ee5-a54c-6ebe90758c59" index="41" run="41" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct635"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 1, 0, 0, 0}</value>
<value name="result">7</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(7, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct635()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(7, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[0L] && 6L < array.Length && array.Length == 7L && 
                                                                              array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[1L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="81b4e1f1-87e0-4067-8fe7-1411d4a476b4" index="42" run="42" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct143"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[13];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct143()
{
    int i;
    int[] ints = new int[13];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="8c96ea72-7c0b-459f-aae0-089ac5a98f52" index="43" run="43" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct147"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">11</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(11, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct147()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(11, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[1L] == array[0L] && 10L < array.Length && array.Length == 11L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[0L] && array[3L] != array[0L] && 
                                                                                                                                                                                    array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="33fb519c-10f7-4caf-9b58-aededfa1f912" index="44" run="44" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct902"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">16</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(16, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct902()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(16, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 15L < array.Length && array.Length == 16L && array[0L] != array[1L] && array[1L] != array[0L] && 
                                                                                                      array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && 
                                                                                                                                                                                                                                                                  array[9L] != array[0L] && array[10L] != array[0L] && array[11L] != array[0L] && array[12L] != array[0L] && array[13L] != array[0L] && array[14L] != array[0L] && array[15L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="510692a0-f966-4543-b28c-fdd2d590d662" index="45" run="45" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct206"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[14];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct206()
{
    int i;
    int[] ints = new int[14];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="4e3d9f7f-2229-4f41-b1af-92ff1ae79c70" index="46" run="46" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct634"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">17</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(17, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct634()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(17, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 16L < array.Length && array.Length == 17L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && 
                                                                                                                                array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && 
                                                                                                                                                                                                                                                                                            array[10L] != array[0L] && array[11L] != array[0L] && array[12L] != array[0L] && array[13L] != array[0L] && array[14L] != array[0L] && array[15L] != array[0L] && array[16L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ba20137f-95ed-404a-9d22-43585d87ce75" index="47" run="47" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct169"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct169()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[1L] == array[0L] && 4L < array.Length && array.Length == 5L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="051b1872-5f53-42aa-8206-9a1d89b74dd3" index="48" run="48" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct282"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct282()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && array[1L] == array[0L] && 3L < array.Length && array.Length == 4L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[0L] && array[3L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.03"/>
<generatedTest id="5496a4d0-8a44-4ea3-afed-b495be363a4f" index="49" run="49" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct290"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[15];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct290()
{
    int i;
    int[] ints = new int[15];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="11568585-96d3-4f28-a068-86ac68da90bb" index="50" run="50" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct755"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">18</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(18, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct755()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(18, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 17L < array.Length && array.Length == 18L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && 
                                                                                                                                                          array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L] && 
                                                                                                                                                                                                                                                                                                                      array[11L] != array[0L] && array[12L] != array[0L] && array[13L] != array[0L] && array[14L] != array[0L] && array[15L] != array[0L] && array[16L] != array[0L] && array[17L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="515393c4-ef2f-442c-9fc5-5392977532f3" index="51" run="51" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct427"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[16];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct427()
{
    int i;
    int[] ints = new int[16];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="75004dfc-f92d-411c-bc54-d54cbaab5483" index="52" run="52" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct779"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct779()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 3L < array.Length && array.Length == 4L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="033ab38e-25b8-4d01-b553-5d88eb6300b6" index="53" run="53" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct468"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[17];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct468()
{
    int i;
    int[] ints = new int[17];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="91d54d13-8fcd-4d9c-969f-6ce58687aece" index="54" run="54" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct42"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">11</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(11, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct42()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(11, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[2L] == array[0L] && 10L < array.Length && array.Length == 11L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L] && array[3L] != array[0L] && 
                                                                                                                                                            array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="991843e2-31d3-465e-aee4-daf6f4d30723" index="55" run="55" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct737"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0, 0}</value>
<value name="result">7</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(7, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct737()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(7, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[0L] && array[3L] == array[0L] && 6L < array.Length && array.Length == 7L && 
                                                                                                        array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L] && array[3L] != array[1L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a3b7e920-e85f-42a1-85f7-e426fff3a44e" index="56" run="56" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct986"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">19</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(19, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct986()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(19, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       18L < array.Length && array.Length == 19L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && 
                                                                                                                                                            array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L] && array[11L] != array[0L] && 
                                                                                                                                                                                                                                                                                                                         array[12L] != array[0L] && array[13L] != array[0L] && array[14L] != array[0L] && array[15L] != array[0L] && array[16L] != array[0L] && array[17L] != array[0L] && array[18L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.04"/>
<generatedTest id="d48bf901-5348-4cb4-9752-c5787b20b850" index="57" run="57" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct372"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[18];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct372()
{
    int i;
    int[] ints = new int[18];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.04"/>
<generatedTest id="6377db7c-de30-4d02-bd89-bc6f85a17575" index="58" run="58" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct735"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}</value>
<value name="result">18</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[17] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(18, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct735()
{
    int i;
    int[] ints = new int[18];
    ints[17] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(18, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="80285ec7-510a-4ab7-9474-5f8faaf6fe2e" index="59" run="59" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct34"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">10</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(10, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct34()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(10, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[0L] && 9L < array.Length && array.Length == 10L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L] && 
                                                                                                                                                         array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b9b5ea1c-f0bb-4352-a377-eab8d40236f8" index="60" run="60" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct643"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">12</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(12, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct643()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(12, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[1L] == array[0L] && 
                                                         11L < array.Length && array.Length == 12L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && 
                                                                                                                                                                                                              array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L] && array[11L] != array[0L];
]]></pathCondition>
</generatedTest>
<boundary kind="maxruns" value="60" message="maximum runs reached"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxRuns=120" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="120"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxRuns" token="17000346"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000b2"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<coverage domain="usercodeundertest" unit="block" covered="11" total="11" coveredRatio="1"/>
<sourceCoverage xml="cov\e337\cov.xml" html="cov\e337\cov.html"/>
<result name="countDistinct(Int32[])" state="success" duration="2.6933217"/>
<duration start="2019-02-15 20:31:27Z" end="2019-02-15 20:31:30Z" seconds="2.6946898"/>
<trajectory><image src="fix\submissionquesti636858378905868257.trajectories.png" width="800" height="1600"/>
</trajectory>
</exploration>
<coverage domain="usercodeundertest" unit="block" covered="11" total="11" coveredRatio="1"/>
<sourceCoverage xml="cov\t614\cov.xml" html="cov\t614\cov.html"/>
<duration start="2019-02-15 20:31:27Z" end="2019-02-15 20:31:30Z" seconds="2.7026661"/>
</fixture>
<coverage domain="usercodeundertest" unit="block" covered="78" total="82" coveredRatio="0.95121951219512191"/>
<sourceCoverage xml="cov\a27652464\cov.xml" html="cov\a27652464\cov.html"/>
<duration start="2019-02-15 20:31:08Z" end="2019-02-15 20:31:30Z" seconds="22.4030406"/>
<frameTreeRef exceptionCount="1"/>
</assembly>
<duration start="2019-02-15 20:31:08Z" end="2019-02-15 20:31:30Z" seconds="22.5003273"/>
<background/>
</pex>
