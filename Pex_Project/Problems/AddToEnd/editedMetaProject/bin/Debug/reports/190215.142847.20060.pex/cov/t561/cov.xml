<documents created="2019-02-15 20:28:53Z"><document src="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\MetaProgram.cs" renderPrefix="s0"><chunk hits="-1" domain="unknown"><source><![CDATA[using System.Text.RegularExpressions;
using System;
using Microsoft.Pex.Framework;
using Microsoft.Pex.Framework.Settings;
using PexAPIWrapper;
using System.Diagnostics;
namespace MetaProject
{
    [PexClass(typeof(MetaProgram))]
    public partial class MetaProgram
    {

        public class List
        {
            public int value;
            public List next;

            ]]></source>
</chunk>
<method name=".ctor" namespace="MetaProject" type="MetaProject.MetaProgram+List" typeName="MetaProgram+List" token="60000a0" module="meta_projectAddToEnd.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[public List()]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="0007" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="0008" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<method name=".ctor" namespace="MetaProject" type="MetaProject.MetaProgram+List" typeName="MetaProgram+List" token="60000a1" module="meta_projectAddToEnd.dll"><hits><hit index="0" value="4"/>
<hit index="1" value="4"/>
<hit index="2" value="4"/>
<hit index="3" value="4"/>
<hit index="4" value="4"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<chunk hits="4" offset="0000" domain="usercodeundertest"><source><![CDATA[public List(int setValue)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0007" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="4" offset="0008" domain="usercodeundertest"><source><![CDATA[value = setValue;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="8" offset="000f" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            /**
             * Add a value as the last item in the list.
             *
             * Can be called on any item of the list, although will normally be called
             * on the first item.
             */
            public virtual void addToEnd(int newValue)
            ]]></source>
</chunk>
<method name="addToEnd" namespace="MetaProject" type="MetaProject.MetaProgram+List" typeName="MetaProgram+List" token="60000a2" module="meta_projectAddToEnd.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="2"/>
<hit index="2" value="3"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
<hit index="10" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="14" value="2"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="6" total="6" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                List now;
                for (]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[now = this]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="3" offset="000e" domain="usercodeundertest"><source><![CDATA[now.next != null]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="usercodeundertest"><source><![CDATA[now = now.next]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                ]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    /*if (now.next == null)
                    {
                        now.next = new List(newValue);
                        now.next.next = null;
                        break;
                    } */

                ]]></source>
</chunk>
<chunk hits="2" offset="0006" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="001e" domain="usercodeundertest"><source><![CDATA[if (now.next == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="002e" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="002f" domain="usercodeundertest"><source><![CDATA[now.next = new List(newValue);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="003b" domain="usercodeundertest"><source><![CDATA[now.next.next = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0047" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0048" domain="usercodeundertest"><source><![CDATA[return;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="004a" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
   


            public void addToEndSolution(int newValue)
            ]]></source>
</chunk>
<method name="addToEndSolution" namespace="MetaProject" type="MetaProject.MetaProgram+List" typeName="MetaProgram+List" token="60000a3" module="meta_projectAddToEnd.dll"><hits><hit index="0" value="6"/>
<hit index="1" value="6"/>
<hit index="2" value="3"/>
<hit index="3" value="3"/>
<hit index="5" value="3"/>
<hit index="6" value="3"/>
<hit index="7" value="3"/>
<hit index="8" value="3"/>
<hit index="9" value="3"/>
<hit index="10" value="3"/>
<hit index="11" value="3"/>
<hit index="12" value="6"/>
<hit index="13" value="3"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="5" total="5" coveredRatio="1"/>
</method>
<chunk hits="6" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="6" offset="0001" domain="usercodeundertest"><source><![CDATA[if (this.next == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="3" offset="0011" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="3" offset="0012" domain="usercodeundertest"><source><![CDATA[this.next = new List(newValue);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="6" offset="001e" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else
                ]]></source>
</chunk>
<chunk hits="3" offset="0021" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="3" offset="0022" domain="usercodeundertest"><source><![CDATA[this.next.addToEndSolution(newValue);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="9" offset="002f" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="15" offset="0030" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // Make method static; take input a list and check if it null; 
            public static bool isNull(List l)
            {
                return l == null;
            }

            public int Count()
            ]]></source>
</chunk>
<method name="Count" namespace="MetaProject" type="MetaProject.MetaProgram+List" typeName="MetaProgram+List" token="60000a5" module="meta_projectAddToEnd.dll"><hits><hit index="0" value="8"/>
<hit index="1" value="29"/>
<hit index="2" value="8"/>
<hit index="3" value="29"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<chunk hits="8" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="8" offset="0001" domain="usercodeundertest"><source><![CDATA[int count = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                ]]></source>
</chunk>
<chunk hits="8" offset="0003" domain="usercodeundertest"><source><![CDATA[List current = this;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="37" offset="0014" domain="usercodeundertest"><source><![CDATA[while (current != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="29" offset="0007" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="29" offset="0008" domain="usercodeundertest"><source><![CDATA[count++;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="29" offset="000c" domain="usercodeundertest"><source><![CDATA[current = current.next;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="29" offset="0013" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="8" offset="001f" domain="usercodeundertest"><source><![CDATA[return count;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="8" offset="0023" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            public override bool Equals(object obj)
            ]]></source>
</chunk>
<method name="Equals" namespace="MetaProject" type="MetaProject.MetaProgram+List" typeName="MetaProgram+List" token="60000a6" module="meta_projectAddToEnd.dll"><hits><hit index="0" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="2"/>
<hit index="7" value="1"/>
<hit index="8" value="1"/>
<hit index="10" value="1"/>
<hit index="11" value="4"/>
<hit index="12" value="4"/>
<hit index="14" value="4"/>
<hit index="15" value="4"/>
<hit index="16" value="1"/>
<hit index="17" value="1"/>
<hit index="18" value="1"/>
<hit index="19" value="4"/>
<hit index="20" value="4"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="8" total="11" coveredRatio="0.72727272727272729"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                //If not a list
                ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[if (!(obj is List))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="000e" domain="usercodeundertest"><source><![CDATA[return false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[


                ]]></source>
</chunk>
<chunk hits="1" offset="0012" domain="usercodeundertest"><source><![CDATA[if (((List)obj).Count() != this.Count())]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0029" domain="usercodeundertest"><source><![CDATA[return false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else // same length
                ]]></source>
</chunk>
<chunk hits="1" offset="002d" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    //Deep check
                    ]]></source>
</chunk>
<chunk hits="1" offset="002e" domain="usercodeundertest"><source><![CDATA[List current = this;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="0030" domain="usercodeundertest"><source><![CDATA[List temp = (List)obj;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="5" offset="005f" domain="usercodeundertest"><source><![CDATA[while (current != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="4" offset="0039" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="4" offset="003a" domain="usercodeundertest"><source><![CDATA[if (temp.value != current.value)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="004c" domain="usercodeundertest"><source><![CDATA[return false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="4" offset="0050" domain="usercodeundertest"><source><![CDATA[current = current.next;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="4" offset="0057" domain="usercodeundertest"><source><![CDATA[temp = temp.next;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ //Iterate                    
                    ]]></source>
</chunk>
<chunk hits="4" offset="005e" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="006a" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="006b" domain="usercodeundertest"><source><![CDATA[return true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="006f" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            public List Clone()
            ]]></source>
</chunk>
<method name="Clone" namespace="MetaProject" type="MetaProject.MetaProgram+List" typeName="MetaProgram+List" token="60000a7" module="meta_projectAddToEnd.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="2"/>
<hit index="9" value="1"/>
<hit index="10" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="2"/>
<hit index="13" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="1"/>
<hit index="16" value="1"/>
<hit index="17" value="1"/>
<hit index="18" value="1"/>
<hit index="19" value="1"/>
<hit index="20" value="1"/>
<hit index="21" value="2"/>
<hit index="22" value="2"/>
<hit index="23" value="2"/>
<hit index="24" value="2"/>
<hit index="25" value="4"/>
<hit index="26" value="2"/>
<hit index="27" value="1"/>
<hit index="28" value="1"/>
<hit index="29" value="1"/>
<hit index="30" value="2"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="10" total="11" coveredRatio="0.90909090909090906"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[List temp = new List();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                ]]></source>
</chunk>
<chunk hits="1" offset="0007" domain="usercodeundertest"><source><![CDATA[List current = this;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0009" domain="usercodeundertest"><source><![CDATA[if (current.Count() == 0)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0019" domain="usercodeundertest"><source><![CDATA[return temp;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else ]]></source>
</chunk>
<chunk hits="1" offset="001d" domain="usercodeundertest"><source><![CDATA[if (current.Count() == 1)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="002d" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="002e" domain="usercodeundertest"><source><![CDATA[temp.value = current.value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="003a" domain="usercodeundertest"><source><![CDATA[return temp;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                }
                else
                ]]></source>
</chunk>
<chunk hits="1" offset="003e" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="003f" domain="usercodeundertest"><source><![CDATA[temp.value = current.value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="004b" domain="usercodeundertest"><source><![CDATA[current = current.next;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="3" offset="006a" domain="usercodeundertest"><source><![CDATA[while (current != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="0054" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="0055" domain="usercodeundertest"><source><![CDATA[temp.addToEndSolution(current.value);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="6" offset="0062" domain="usercodeundertest"><source><![CDATA[current = current.next;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                    ]]></source>
</chunk>
<chunk hits="2" offset="0069" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0075" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0076" domain="usercodeundertest"><source><![CDATA[return temp;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="007a" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            public bool AreAllSame()
            {
                List current = this;
                if (current.Count() <= 1)
                {
                    return true;
                }
                else
                {
                    List other = new List();
                    while (current != null)
                    {
                        other = current.next; // since list is at least length 2, the next is guaranteed to not be null, 
                        while (other != null)
                        {
                            if (current.value != other.value)
                            {
                                return false;
                            }
                            other = other.next;
                        }

                        current = current.next;
                    }
                    return true;
                }
            }

            public bool IsInLast(int incomingVal)
            {
                List current = this;
                if (current.Count() == 1 && incomingVal == current.value)
                {
                    return true;
                }
                else
                {
                    List last = current;
                    while (current != null)
                    {
                        last = current;
                        current = current.next;
                    }
                    if (last.value == incomingVal)
                        return true;
                    return false;
                }
            }

            public bool isLengthOdd(){

                return this.Count() % 2 != 0;
            }

        }



        //[PexMethod(TestEmissionFilter=PexTestEmissionFilter.All)]
        [PexMethod]
        public static void Check([PexAssumeNotNull]MetaProgram.List l, int x)
        ]]></source>
</chunk>
<method name="Check" namespace="MetaProject" type="MetaProject.MetaProgram" typeName="MetaProgram" token="600009e" module="meta_projectAddToEnd.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="2"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
<hit index="8" value="2"/>
<hit index="9" value="1"/>
<hit index="10" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="1"/>
<hit index="16" value="2"/>
<hit index="17" value="1"/>
<hit index="18" value="1"/>
<hit index="19" value="1"/>
<hit index="20" value="1"/>
<hit index="21" value="1"/>
<hit index="22" value="2"/>
<hit index="23" value="1"/>
<hit index="24" value="1"/>
<hit index="25" value="1"/>
<hit index="26" value="1"/>
<hit index="27" value="1"/>
<hit index="28" value="2"/>
<hit index="29" value="1"/>
<hit index="30" value="1"/>
<hit index="31" value="1"/>
<hit index="32" value="2"/>
<hit index="33" value="1"/>
<hit index="34" value="1"/>
<hit index="35" value="1"/>
<hit index="36" value="1"/>
<hit index="37" value="1"/>
<hit index="38" value="1"/>
<hit index="39" value="1"/>
<hit index="40" value="1"/>
<hit index="41" value="1"/>
<hit index="42" value="2"/>
<hit index="43" value="1"/>
<hit index="44" value="1"/>
<hit index="45" value="1"/>
<hit index="46" value="1"/>
<hit index="47" value="1"/>
<hit index="48" value="2"/>
<hit index="49" value="1"/>
<hit index="50" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="18" total="18" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            /*

            //START: Do not include this part in the generalization as I edit CodeSimilarity's MetaProgram generator.......
            //What to do w/ this part: Create an additional input field in createMetaProgram(~, ~, "") and input an empty string for now.
            //This MUST be input as a string parameter (b/c it's variable and diff for every coding problem)
            List l2 = l.Clone();
            PexObserve.ValueForViewing("$input_x", x);
            PexObserve.ValueForViewing("$input_Count", l == null ? 0 : l.Count());
            PexObserve.ValueForViewing("$input_head", l.value);
            PexObserve.ValueForViewing("$input_AreAllDistinct", l.AreAllSame());
            PexObserve.ValueForViewing("$input_IsInLast", l.IsInLast(x));
            PexObserve.ValueForViewing("$input_IsOddLength", l.isLengthOdd());
            //PexObserve.ValueForViewing("$input_AreAllDistinct", l.AreAllDistinct());
            //PexObserve.ValueForViewing("$input_isNull", l == null);
            //END here.......

            AssumePrecondition.IsTrue(true);

            //PexObserve.ValueForViewing("$input_before l", l);
            //PexObserve.ValueForViewing("$input_before l2", l2);

            l.addToEnd(x);
            l2.addToEndSolution(x);

            //PexObserve.ValueForViewing("$input_after l", l);
            //PexObserve.ValueForViewing("$input_after l2", l2);

            //NotpAssume.IsTrue(l.Equals(l2));
            PexAssert.IsTrue(l.Equals(l2));
             */

            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[List l2 = l.Clone();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="3" offset="0008" domain="usercodeundertest"><source><![CDATA[PexObserve.ValueForViewing("Old_lcount", l.Count());]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0019" domain="usercodeundertest"><source><![CDATA[PexObserve.ValueForViewing("Old_list", l);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0025" domain="usercodeundertest"><source><![CDATA[l.addToEnd(x);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="002d" domain="usercodeundertest"><source><![CDATA[PexObserve.ValueForViewing("New_list", l);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0039" domain="usercodeundertest"><source><![CDATA[PexObserve.ValueForViewing("New_lcount", l.Count());]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="004a" domain="usercodeundertest"><source><![CDATA[l2.addToEndSolution(x);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="0052" domain="usercodeundertest"><source><![CDATA[PexObserve.ValueForViewing("Old_l2.count", l2.Count());]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0063" domain="usercodeundertest"><source><![CDATA[PexObserve.ValueForViewing("Old_list", l2);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="1" offset="006f" domain="usercodeundertest"><source><![CDATA[PexObserve.ValueForViewing("New_list", l2);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="007b" domain="usercodeundertest"><source><![CDATA[PexObserve.ValueForViewing("New_l2.count", l2.Count());]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="008c" domain="usercodeundertest"><source><![CDATA[PexAssert.IsTrue(l.Equals(l2));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        ]]></source>
</chunk>
<chunk hits="1" offset="0099" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        

    }
}
]]></source>
</chunk>
</document>
</documents>
