<?xml version="1.0" encoding="utf-8"?>
<pex id="{c9838d8c-6f09-4769-a830-2ceaac0f6551}" creationTime="2019-02-15 20:28:47Z" configuration="*\*\*" created="2019-02-15 20:28:47Z" pexVersion="0.94.51023.0" xml="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\reports\190215.142847.20060.pex\report.per" html="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\reports\190215.142847.20060.pex\report.html"><environment commandLine="&quot;C:\Program Files\Microsoft Pex\bin\Microsoft.Pex.exe&quot; &quot;C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll&quot; /x64failsilently /clrversion:v4.0.30319 /donotopenreport /reportlevel:Xml /reportrootpath:&quot;C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\reports&quot; /testframework:VisualStudioUnitTest /testlanguage:cs /testprojectfile:&quot;C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\meta_projectAddToEnd.csproj&quot; /testprojectnotupdate /testprojectskip" machineName="DESKTOP-OS6C121" osVersion="Microsoft Windows NT 6.2.9200.0" processorCount="8" clrVersion="4.0.30319.42000" bitness="x64" user="Vijayendra Jagtap"><envVars><envVar name="SESSIONNAME" value="Console"/>
<envVar name="CLRMONITOR_INJECT_TYPES" value=""/>
<envVar name="FPS_BROWSER_USER_PROFILE_STRING" value="Default"/>
<envVar name="COMPLUS_DEFAULTVERSION" value="v4.0.30319"/>
<envVar name="CLRMONITOR_INJECT_ASSEMBLIES" value=""/>
<envVar name="PROCESSOR_IDENTIFIER" value="Intel64 Family 6 Model 142 Stepping 10, GenuineIntel"/>
<envVar name="TMP" value="C:\Users\VIJAYE~1\AppData\Local\Temp"/>
<envVar name="CLRMONITOR_INSTRUMENT_ASSEMBLIES_EXCLUSIONS" value=""/>
<envVar name="Path" value="C:\Program Files\Java\jdk-11.0.2\bin;C:\Program Files\Git\bin;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;c:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;c:\Program Files\Microsoft SQL Server\100\Tools\Binn\;c:\Program Files\Microsoft SQL Server\100\DTS\Binn\;C:\Program Files\Sublime Text 3;C:\WINDOWS\system32;C:\HashiCorp\Vagrant\bin;C:\Users\Vijayendra Jagtap\AppData\Local\Programs\Python\Python37\Scripts\;C:\Users\Vijayendra Jagtap\AppData\Local\Programs\Python\Python37\;C:\Users\Vijayendra Jagtap\AppData\Local\Microsoft\WindowsApps;C:\Users\Vijayendra Jagtap\AppData\Local\GitHubDesktop\bin;C:\Users\Vijayendra Jagtap\AppData\Local\Microsoft\WindowsApps;;C:\intelFPGA\18.0\modelsim_ase\win32aloem;C:\intelFPGA_lite\18.0\modelsim_ase\win32aloem"/>
<envVar name="PROCESSOR_REVISION" value="8e0a"/>
<envVar name="CLRMONITOR_INSTRUMENT_TYPES" value="System.Array,System.Array+ArrayEnumerator,System.Array+FunctorComparer`1,System.Array+SZArrayEnumerator,System.Array+SorterGenericArray,System.Array+SorterObjectArray,System.Boolean,System.Byte,System.Char,System.CharEnumerator,System.ComponentModel.Component,System.ComponentModel.Container,System.ComponentModel.Container+Site,System.Convert,System.Currency,System.DateTime,System.Decimal,System.Diagnostics.Assert,System.Double,System.Globalization.CharUnicodeInfo,System.Globalization.CultureTableRecord,System.Globalization.TextInfo,System.Guid,System.IO.MemoryStream,System.IO.Stream,System.IO.StreamReader,System.IO.StreamWriter,System.IO.StringReader,System.IO.StringWriter,System.Int16,System.Int32,System.Int64,System.Lazy`1,System.Lazy`1+Boxed,System.Lazy`1+LazyInternalExceptionHolder,System.Math,System.Nullable,System.Nullable`1,System.OrdinalComparer,System.SByte,System.SZArrayHelper,System.SZArrayHelper+SZGenericArrayEnumerator`1,System.Single,System.String,System.StringComparer,System.Text.ASCIIEncoding,System.Text.DecoderNLS,System.Text.Encoding,System.Text.UTF8Encoding,System.TimeSpan,System.Tuple,System.Tuple`1,System.Tuple`2,System.Tuple`3,System.Tuple`4,System.Tuple`5,System.Tuple`6,System.Tuple`7,System.Tuple`8,System.UInt16,System.UInt32,System.UInt64,System.Xml.XmlTextWriter,System.Xml.XmlTextWriter+Namespace,System.Xml.XmlTextWriter+NamespaceState,System.Xml.XmlTextWriter+SpecialAttr,System.Xml.XmlTextWriter+State,System.Xml.XmlTextWriter+TagInfo,System.Xml.XmlTextWriter+Token,System.Xml.XmlWriter,System.Xml.XmlWriter+&lt;WriteAttributeStringAsyncHelper&gt;d__82,System.Xml.XmlWriter+&lt;WriteAttributesAsync&gt;d__102,System.Xml.XmlWriter+&lt;WriteElementStringAsync&gt;d__107,System.Xml.XmlWriter+&lt;WriteLocalNamespacesAsync&gt;d__108,System.Xml.XmlWriter+&lt;WriteNodeAsync&gt;d__106,System.Xml.XmlWriter+&lt;WriteNodeAsync_CallAsyncReader&gt;d__105,System.Xml.XmlWriter+&lt;WriteNodeAsync_CallSyncReader&gt;d__104,System.Xml.XmlWriter+&lt;WriteQualifiedNameAsync&gt;d__101,__Box`1,__SzArrayHelper`1"/>
<envVar name="COMPLUS_ProfAPI_ProfilerCompatibilitySetting" value="EnableV2Profiler"/>
<envVar name="CLRMONITOR_CLSID" value="{fa6276ae-c2b7-443f-9cac-ea13fd3b342a}"/>
<envVar name="QSYS_ROOTDIR" value="C:\intelFPGA_lite\18.0\quartus\sopc_builder\bin"/>
<envVar name="FPS_BROWSER_APP_PROFILE_STRING" value="Internet Explorer"/>
<envVar name="CLRMONITOR_SUBSTITUTIONS" value="C:\WINDOWS\assembly\GAC_MSIL\Microsoft.ExtendedReflection\0.94.0.0__31bf3856ad364e35\Microsoft.ExtendedReflection.dll"/>
<envVar name="CLRMONITOR_ERASE_FINALIZER_TYPES" value=""/>
<envVar name="CLRMONITOR_INJECT_NAMESPACES" value=""/>
<envVar name="USERNAME" value="Vijayendra Jagtap"/>
<envVar name="SystemRoot" value="C:\WINDOWS"/>
<envVar name="CLRMONITOR_INITIALIZED" value="0x7"/>
<envVar name="CLRMONITOR_INSTRUMENT_NAMESPACES_EXCLUSIONS" value=""/>
<envVar name="VS100COMNTOOLS" value="C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\Tools\"/>
<envVar name="OS" value="Windows_NT"/>
<envVar name="TEMP" value="C:\Users\VIJAYE~1\AppData\Local\Temp"/>
<envVar name="CLRMONITOR_INSTRUMENT_ATTRIBUTE" value="Microsoft.Moles.Framework.Moles.MolesInstrumentAttribute"/>
<envVar name="OneDrive" value="C:\Users\Vijayendra Jagtap\OneDrive"/>
<envVar name="CLRMONITOR_INSTRUMENT_NAMESPACES" value="System.Collections,System.Collections.Generic,System.Collections.ObjectModel,System.Collections.Specialized,System.Diagnostics.Contracts"/>
<envVar name="CommonProgramFiles" value="C:\Program Files\Common Files"/>
<envVar name="PROCESSOR_LEVEL" value="6"/>
<envVar name="ProgramW6432" value="C:\Program Files"/>
<envVar name="pex_instrumentation" value="1"/>
<envVar name="ProgramData" value="C:\ProgramData"/>
<envVar name="HOMEPATH" value="\Users\Vijayendra Jagtap"/>
<envVar name="pex_server_channel" value="pex7260"/>
<envVar name="COR_PROFILER" value="{fa6276ae-c2b7-443f-9cac-ea13fd3b342a}"/>
<envVar name="CLRMONITOR_FLAGS" value=""/>
<envVar name="CommonProgramW6432" value="C:\Program Files\Common Files"/>
<envVar name="SOPC_KIT_NIOS2" value="C:\intelFPGA_lite\18.0\nios2eds"/>
<envVar name="CLRMONITOR_PROTECT_ALL_CCTORS" value="1"/>
<envVar name="ProgramFiles(x86)" value="C:\Program Files (x86)"/>
<envVar name="VisualStudioDir" value="C:\Users\Vijayendra Jagtap\OneDrive\Documents\Visual Studio 2010"/>
<envVar name="PROCESSOR_ARCHITECTURE" value="AMD64"/>
<envVar name="CLRMONITOR_INSTRUMENT_ASSEMBLIES" value="FSharp.Core,FSharp.PowerPack,Microsoft.Contracts,Microsoft.VisualBasic,Microsoft.VisualStudio.QualityTools.UnitTestFramework,System,System.Core,System.Web,meta_projectAddToEnd"/>
<envVar name="DriverData" value="C:\Windows\System32\Drivers\DriverData"/>
<envVar name="HOMEDRIVE" value="C:"/>
<envVar name="windir" value="C:\WINDOWS"/>
<envVar name="SystemDrive" value="C:"/>
<envVar name="NUMBER_OF_PROCESSORS" value="8"/>
<envVar name="CLRMONITOR_INSTRUMENT_TYPES_EXCLUSIONS" value=""/>
<envVar name="CLRMONITOR_PROTECT_TYPES" value="Microsoft.FSharp.Text.Printf,Microsoft.FSharp.Text.PrintfImpl"/>
<envVar name="USERPROFILE" value="C:\Users\Vijayendra Jagtap"/>
<envVar name="ProgramFiles" value="C:\Program Files"/>
<envVar name="ComSpec" value="C:\WINDOWS\system32\cmd.exe"/>
<envVar name="USERDOMAIN_ROAMINGPROFILE" value="DESKTOP-OS6C121"/>
<envVar name="PATHEXT" value=".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC"/>
<envVar name="LOGONSERVER" value="\\DESKTOP-OS6C121"/>
<envVar name="ALLUSERSPROFILE" value="C:\ProgramData"/>
<envVar name="PSModulePath" value="C:\Program Files\WindowsPowerShell\Modules;C:\WINDOWS\system32\WindowsPowerShell\v1.0\Modules"/>
<envVar name="APPDATA" value="C:\Users\Vijayendra Jagtap\AppData\Roaming"/>
<envVar name="USERDOMAIN" value="DESKTOP-OS6C121"/>
<envVar name="COMPUTERNAME" value="DESKTOP-OS6C121"/>
<envVar name="pex_clientid" value="pex7260_1"/>
<envVar name="LOCALAPPDATA" value="C:\Users\Vijayendra Jagtap\AppData\Local"/>
<envVar name="CLRMONITOR_ERASE_CCTOR_TYPES" value=""/>
<envVar name="QUARTUS_ROOTDIR" value="C:\intelFPGA_lite\18.0\quartus"/>
<envVar name="CommonProgramFiles(x86)" value="C:\Program Files (x86)\Common Files"/>
<envVar name="PUBLIC" value="C:\Users\Public"/>
<envVar name="pex_wait_for_server_channel" value="1"/>
</envVars>
</environment>
<settings/>
<reflection/>
<assembly name="meta_projectAddToEnd" version="1.0.0.0" fileVersion="1.0.0.0" fullName="meta_projectAddToEnd, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll" fileName="meta_projectAddToEnd.dll"><settings testFramework="VisualStudioUnitTest" testLanguage="cs"/>
<fixture name="MetaProgram" type="MetaProject.MetaProgram" typeName="MetaProgram" token="2000002" href="fix\meta_projectAddToEnd.561.html"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="MetaProgram" token="2000002" namespace="MetaProject"/>
</type>
<settings typeUnderTest="MetaProject.MetaProgram"/>
<exploration shortName="Check(List, Int32)" fullName="MetaProject.MetaProgram.Check(List, Int32)"><method><definition assemblyName="meta_projectAddToEnd" name="Check" static="true" token="600009e"><declaringType assemblyName="meta_projectAddToEnd" name="MetaProgram" token="2000002" namespace="MetaProject"/>
<parameter name="l" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="List" token="2000003"><declaringType assemblyName="meta_projectAddToEnd" name="MetaProgram" token="2000002" namespace="MetaProject"/>
</definition>
</type>
</parameter>
<parameter name="x" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<test name="Check" state="success" duration="0.48"/>
<generatedTest id="07a2934d-f289-41ee-9a74-9f9170c740ae" index="1" run="1" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="Check81642"><declaringType assemblyName="meta_projectAddToEnd" name="MetaProgram" token="ffffffff" namespace="MetaProject"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="MetaProgram" token="ffffffff" namespace="MetaProject"/>
</type>
</parameter>
<rcov name="Block" dcov="47" dtot="58" acov="47" atot="58"/>
<rcov name="asserts" dcov="1" dtot="1" acov="1" atot="1"/>
<value name="l">new List{value=0,next=null}</value>
<value name="x">0</value>
<value name="Old_lcount">1</value>
<value name="Old_list">new List{value=0,next=null}</value>
<value name="New_list">new List{value=0,next=new List{value=0,next=null}}</value>
<value name="New_lcount">2</value>
<value name="Old_l2.count">2</value>
<value name="Old_list01">new List{value=0,next=new List{value=0,next=null}}</value>
<value name="New_list01">new List{value=0,next=new List{value=0,next=null}}</value>
<value name="New_l2.count">2</value>
<code><![CDATA[MetaProgram.List s0 = new MetaProgram.List();
s0.value = 0;
s0.next = (MetaProgram.List)null;
MetaProgram.Check(s0, 0);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(MetaProgram))]
public void Check81642()
{
    MetaProgram.List s0 = new MetaProgram.List();
    s0.value = 0;
    s0.next = (MetaProgram.List)null;
    MetaProgram.Check(s0, 0);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return l != (MetaProgram.List)null && l.next == (MetaProgram.List)null && methodof(l.addToEnd) == methodof(MetaProgram.List.addToEnd) && methodof(l.Equals) == methodof(MetaProgram.List.Equals);
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:28:48Z" category="coverage" message="coverage increased from 0 to 47 blocks (+47) after flipping MetaProject.MetaProgram.Check at 0x0002"/>
<test name="Check" state="success" duration="0.03"/>
<generatedTest id="3e627a83-c726-423a-99af-d3ba8662bfb8" index="2" run="2" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="Check89535"><declaringType assemblyName="meta_projectAddToEnd" name="MetaProgram" token="ffffffff" namespace="MetaProject"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="MetaProgram" token="ffffffff" namespace="MetaProject"/>
</type>
</parameter>
<rcov name="Block" dcov="7" dtot="0" acov="54" atot="58"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="l">new List{value=0,next=new List{value=0,next=null}}</value>
<value name="x">0</value>
<value name="Old_lcount">2</value>
<value name="Old_list">new List{value=0,next=new List{value=0,next=null}}</value>
<value name="New_list">new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}</value>
<value name="New_lcount">3</value>
<value name="Old_l2.count">3</value>
<value name="Old_list01">new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}</value>
<value name="New_list01">new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}</value>
<value name="New_l2.count">3</value>
<code><![CDATA[MetaProgram.List s0 = new MetaProgram.List();
s0.value = 0;
MetaProgram.List s1 = new MetaProgram.List();
s1.value = 0;
s1.next = (MetaProgram.List)null;
s0.next = s1;
MetaProgram.Check(s0, 0);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(MetaProgram))]
public void Check89535()
{
    MetaProgram.List s0 = new MetaProgram.List();
    s0.value = 0;
    MetaProgram.List s1 = new MetaProgram.List();
    s1.value = 0;
    s1.next = (MetaProgram.List)null;
    s0.next = s1;
    MetaProgram.Check(s0, 0);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[MetaProgram.List s2 = new;
MetaProgram.List s1 = l == l.next ? s2 : l.next;
MetaProgram.List s0 = s1;
MetaProgram.List s8 = new;
MetaProgram.List s9 = new;
MetaProgram.List s7 = s0 == s8 ? s9 : s0 == s2 ? (MetaProgram.List)null : s0 == s9 ? (MetaProgram.List)null : s0.next;
MetaProgram.List s6 = s0 == l.next ? s2 : s7;
MetaProgram.List s5 = s6;
MetaProgram.List s4 = s0 == s2 ? (MetaProgram.List)null : s5;
MetaProgram.List s3 = s4;
MetaProgram.List s12 = new;
MetaProgram.List s11 = s0 == s12 ? (MetaProgram.List)null : s0 == s2 ? (MetaProgram.List)null : s0 == s9 ? s12 : s5;
MetaProgram.List s10 = s11;
int s13 = s0 == s12 ? x : s0 == s8 ? l.value : s0 == s2 ? x : s0 == s9 ? l.next.value : s0.value;
int s14 = s10 == s12 ? x : s10 == s8 ? l.value : s10 == s2 ? x : s10 == s9 ? l.next.value : s10.value;
MetaProgram.List s17 = s3 == s8 ? s9 : s3 == s2 ? (MetaProgram.List)null : s3 == s9 ? (MetaProgram.List)null : s3.next;
MetaProgram.List s16 = s3 == l.next ? s2 : s17;
MetaProgram.List s15 = s3 == s2 ? (MetaProgram.List)null : s16;
MetaProgram.List s20 = s10 == s8 ? s9 : s10 == s2 ? (MetaProgram.List)null : s10 == s9 ? (MetaProgram.List)null : s10.next;
MetaProgram.List s19 = s10 == l.next ? s2 : s20;
MetaProgram.List s18 = s10 == s12 ? (MetaProgram.List)null : s10 == s2 ? (MetaProgram.List)null : s10 == s9 ? s12 : s19;
return l != (MetaProgram.List)null && l.next != (MetaProgram.List)null && 
                                      s0 != (MetaProgram.List)null && s3 != (MetaProgram.List)null && s10 != (MetaProgram.List)null && l.next.value == s13 && x == s14 && l.next.next == (MetaProgram.List)null && 
                                                                                                                                                                          methodof(l.addToEnd) == methodof(MetaProgram.List.addToEnd) && s15 == (MetaProgram.List)null && methodof(l.Equals) == methodof(MetaProgram.List.Equals) && s18 == (MetaProgram.List)null;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:28:48Z" category="coverage" message="coverage increased from 47 to 54 blocks (+7) after flipping MetaProject.MetaProgram+List.Count at 0x001d"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<generatedTest id="6fb046a8-a1a3-4a05-8c88-454921533746" index="3" run="5" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="Check53935"><declaringType assemblyName="meta_projectAddToEnd" name="MetaProgram" token="ffffffff" namespace="MetaProject"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="MetaProgram" token="ffffffff" namespace="MetaProject"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="54" atot="58"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="l">new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}</value>
<value name="x">0</value>
<value name="Old_lcount">3</value>
<value name="Old_list">new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}</value>
<value name="New_list">new List{value=0,next=new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}}</value>
<value name="New_lcount">4</value>
<value name="Old_l2.count">4</value>
<value name="Old_list01">new List{value=0,next=new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}}</value>
<value name="New_list01">new List{value=0,next=new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}}</value>
<value name="New_l2.count">4</value>
<code><![CDATA[MetaProgram.List s0 = new MetaProgram.List();
s0.value = 0;
MetaProgram.List s1 = new MetaProgram.List();
s1.value = 0;
MetaProgram.List s2 = new MetaProgram.List();
s2.value = 0;
s2.next = (MetaProgram.List)null;
s1.next = s2;
s0.next = s1;
MetaProgram.Check(s0, 0);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(MetaProgram))]
public void Check53935()
{
    MetaProgram.List s0 = new MetaProgram.List();
    s0.value = 0;
    MetaProgram.List s1 = new MetaProgram.List();
    s1.value = 0;
    MetaProgram.List s2 = new MetaProgram.List();
    s2.value = 0;
    s2.next = (MetaProgram.List)null;
    s1.next = s2;
    s0.next = s1;
    MetaProgram.Check(s0, 0);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[MetaProgram.List s2 = new;
MetaProgram.List s1 = l == l.next.next ? s2 : l.next;
MetaProgram.List s0 = s1;
MetaProgram.List s8 = new;
MetaProgram.List s9 = new;
MetaProgram.List s10 = new;
MetaProgram.List s7 = s0 == s2 ? (MetaProgram.List)null : s0 == s8 ? s9 : s0 == s10 ? (MetaProgram.List)null : s0 == s9 ? s10 : s0.next;
MetaProgram.List s6 = s0 == l.next.next ? s2 : s7;
MetaProgram.List s5 = s6;
MetaProgram.List s4 = s0 == s2 ? (MetaProgram.List)null : s5;
MetaProgram.List s3 = s4;
MetaProgram.List s14 = s3 == s2 ? (MetaProgram.List)null : s3 == s8 ? s9 : s3 == s10 ? (MetaProgram.List)null : s3 == s9 ? s10 : s3.next;
MetaProgram.List s13 = s3 == l.next.next ? s2 : s14;
MetaProgram.List s12 = s3 == s2 ? (MetaProgram.List)null : s13;
MetaProgram.List s11 = s12;
MetaProgram.List s17 = new;
MetaProgram.List s16 = s0 == s2 ? (MetaProgram.List)null : s0 == s10 ? s17 : s0 == s17 ? (MetaProgram.List)null : s5;
MetaProgram.List s15 = s16;
MetaProgram.List s21 = s15 == s2 ? (MetaProgram.List)null : s15 == s8 ? s9 : s15 == s10 ? (MetaProgram.List)null : s15 == s9 ? s10 : s15.next;
MetaProgram.List s20 = s15 == l.next.next ? s2 : s21;
MetaProgram.List s19 = s15 == s2 ? (MetaProgram.List)null : s15 == s10 ? s17 : s15 == s17 ? (MetaProgram.List)null : s20;
MetaProgram.List s18 = s19;
int s22 = s0 == s2 ? x : s0 == s8 ? l.value : s0 == s17 ? x : s0 == s10 ? l.next.next.value : s0 == s9 ? l.next.value : s0.value;
int s23 = s15 == s2 ? x : s15 == s8 ? l.value : s15 == s17 ? x : s15 == s10 ? l.next.next.value : s15 == s9 ? l.next.value : s15.value;
int s24 = s18 == s2 ? x : s18 == s8 ? l.value : s18 == s17 ? x : s18 == s10 ? l.next.next.value : s18 == s9 ? l.next.value : s18.value;
MetaProgram.List s27 = s11 == s2 ? (MetaProgram.List)null : s11 == s8 ? s9 : s11 == s10 ? (MetaProgram.List)null : s11 == s9 ? s10 : s11.next;
MetaProgram.List s26 = s11 == l.next.next ? s2 : s27;
MetaProgram.List s25 = s11 == s2 ? (MetaProgram.List)null : s26;
MetaProgram.List s30 = s18 == s2 ? (MetaProgram.List)null : s18 == s8 ? s9 : s18 == s10 ? (MetaProgram.List)null : s18 == s9 ? s10 : s18.next;
MetaProgram.List s29 = s18 == l.next.next ? s2 : s30;
MetaProgram.List s28 = s18 == s2 ? (MetaProgram.List)null : s18 == s10 ? s17 : s18 == s17 ? (MetaProgram.List)null : s29;
return l != (MetaProgram.List)null && 
       l.next != (MetaProgram.List)null && l.next.next != (MetaProgram.List)null && s0 != (MetaProgram.List)null && s3 != (MetaProgram.List)null && s11 != (MetaProgram.List)null && 
                                                                                                                                                    s15 != (MetaProgram.List)null && s18 != (MetaProgram.List)null && l.next.value == s22 && l.next.next.value == s23 && x == s24 && l.next.next.next == (MetaProgram.List)null && 
                                                                                                                                                                                                                                                                                     methodof(l.addToEnd) == methodof(MetaProgram.List.addToEnd) && s25 == (MetaProgram.List)null && methodof(l.Equals) == methodof(MetaProgram.List.Equals) && s28 == (MetaProgram.List)null;
]]></pathCondition>
</generatedTest>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<boundary kind="maxrunswithoutnewtests" value="100" message="maximum runs without new tests reached"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxRunsWithoutNewTests=200" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="200"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxRunsWithoutNewTests" token="17000348"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="Check" static="true" token="600009e"><declaringType assemblyName="meta_projectAddToEnd" name="MetaProgram" token="2000002" namespace="MetaProject"/>
<parameter name="l" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="List" token="2000003"><declaringType assemblyName="meta_projectAddToEnd" name="MetaProgram" token="2000002" namespace="MetaProject"/>
</definition>
</type>
</parameter>
<parameter name="x" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</parameter>
</definition>
</method>
</target>
</update>
</boundary>
<coverage domain="usercodeundertest" unit="block" covered="54" total="58" coveredRatio="0.93103448275862066"/>
<sourceCoverage xml="cov\e319\cov.xml" html="cov\e319\cov.html"/>
<result name="Check(List, Int32)" state="success" duration="6.1247606"/>
<duration start="2019-02-15 20:28:47Z" end="2019-02-15 20:28:53Z" seconds="6.1554198"/>
<trajectory><image src="fix\metaprojectmetap636858377337999809.trajectories.png" width="800" height="1600"/>
</trajectory>
</exploration>
<coverage domain="usercodeundertest" unit="block" covered="54" total="58" coveredRatio="0.93103448275862066"/>
<sourceCoverage xml="cov\t561\cov.xml" html="cov\t561\cov.html"/>
<duration start="2019-02-15 20:28:47Z" end="2019-02-15 20:28:53Z" seconds="6.2022914"/>
</fixture>
<fixture name="Question" type="Solution.Question" typeName="Question" token="2000005" href="fix\meta_projectAddToEnd.604.html"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
</type>
<settings typeUnderTest="Solution.Question"/>
<exploration shortName="countDistinct(Int32[])" fullName="Solution.Question.countDistinct(Int32[])"><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
<settings maxRuns="360" testEmissionFilter="All"/>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="1fbc422b-c16c-49c8-9934-19cc6d276c86" index="1" run="1" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct260"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="3" dtot="15" acov="3" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">null</value>
<value name="result">0</value>
<code><![CDATA[int i;
i = Question.countDistinct((int[])null);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct260()
{
    int i;
    i = Question.countDistinct((int[])null);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array == (int[])null;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:28:53Z" category="coverage" message="coverage increased from 0 to 3 blocks (+3) after flipping Solution.Question.countDistinct at 0x0006"/>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="9c9aa679-c4bf-4df8-8f0c-518c3c0ff6e0" index="2" run="2" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct504"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="1" dtot="0" acov="4" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[0];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct504()
{
    int i;
    int[] ints = new int[0];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array.Length == 0L;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:28:53Z" category="coverage" message="coverage increased from 3 to 4 blocks (+1) after flipping Solution.Question.countDistinct at 0x0006"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7ad790bd-9544-476d-baf7-e9df6de28578" index="3" run="3" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct703"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="0" acov="6" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[1];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct703()
{
    int i;
    int[] ints = new int[1];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array.Length == 1L;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:28:53Z" category="coverage" message="coverage increased from 4 to 6 blocks (+2) after flipping Solution.Question.countDistinct at 0x0018"/>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="7101ad19-34fd-4c59-b27a-7716a049c110" index="4" run="4" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct585"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="9" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[2];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct585()
{
    int i;
    int[] ints = new int[2];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 1L < array.Length && array[0L] == array[1L] && array.Length == 2L;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:28:54Z" category="coverage" message="coverage increased from 6 to 15 blocks (+9) after flipping Solution.Question.countDistinct at 0x002e"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="65cfcfd6-330b-4f82-a68f-6aabece43ca9" index="5" run="5" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct888"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[2];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct888()
{
    int i;
    int[] ints = new int[2];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 1L < array.Length && array.Length == 2L && array[0L] != array[1L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="14f74aa0-fd26-4663-ab8f-368432481b67" index="6" run="6" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct609"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct609()
{
    int i;
    int[] ints = new int[3];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 2L < array.Length && array[1L] == array[2L] && array.Length == 3L && array[0L] != array[1L] && array[0L] != array[2L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="c78f96fc-4cfb-43ab-81f9-71414c948cf1" index="7" run="7" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct114"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 0, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[0] = 3;
ints[2] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct114()
{
    int i;
    int[] ints = new int[3];
    ints[0] = 3;
    ints[2] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 2L < array.Length && array.Length == 3L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="83f0237c-e6ba-4977-bd85-f9f1f996fa2f" index="8" run="8" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct181"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct181()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[1L] == array[2L] && 3L < array.Length && array[1L] == array[3L] && array[2L] == array[3L] && array.Length == 4L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7dc8cf1a-8ee5-4619-a9f6-ba33de3fe859" index="9" run="9" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct640"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[3];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct640()
{
    int i;
    int[] ints = new int[3];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 2L < array.Length && array[0L] == array[2L] && array[1L] == array[2L] && array.Length == 3L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9a1e872f-898a-40c7-b4a6-cb649ababd7f" index="10" run="10" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct873"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct873()
{
    int i;
    int[] ints = new int[3];
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 2L < array.Length && array.Length == 3L && array[0L] != array[2L] && array[1L] != array[2L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="0b5ecf1f-b3a9-4536-a89b-31132162f7d0" index="11" run="11" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct875"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct875()
{
    int i;
    int[] ints = new int[3];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 2L < array.Length && array[0L] == array[2L] && array.Length == 3L && array[0L] != array[1L] && array[1L] != array[2L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="85e0b653-95b2-4dc8-b080-debbe41bbc00" index="12" run="12" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct468"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct468()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[2L] && 3L < array.Length && array[1L] == array[3L] && array.Length == 4L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="bebab2a7-4cf5-4d99-9585-fff273c2fcf7" index="13" run="13" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct171"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct171()
{
    int i;
    int[] ints = new int[4];
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && 3L < array.Length && array[0L] == array[3L] && array[1L] == array[3L] && array.Length == 4L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="935e17f4-59b9-4750-b313-4eedcf9d4d2c" index="14" run="14" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct117"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 0, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 3;
ints[2] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct117()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 3;
    ints[2] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       3L < array.Length && array[1L] == array[3L] && array.Length == 4L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="07c93570-61ac-4ccb-a477-d3fe5831e099" index="15" run="15" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct620"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct620()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && 3L < array.Length && array[2L] == array[3L] && array.Length == 4L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d4fd3a66-fdd7-41af-a90d-2d484f5fbbf0" index="16" run="16" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct653"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[4];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct653()
{
    int i;
    int[] ints = new int[4];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 3L < array.Length && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array.Length == 4L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b93d048e-c58a-49d2-affb-dfe146028a5f" index="17" run="17" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct38"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 32, 1, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[1] = 32;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct38()
{
    int i;
    int[] ints = new int[4];
    ints[1] = 32;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       3L < array.Length && array[2L] == array[3L] && array.Length == 4L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="350e851c-9221-4c50-83db-92cd4cd06b31" index="18" run="18" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct297"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct297()
{
    int i;
    int[] ints = new int[4];
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 3L < array.Length && array.Length == 4L && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="366fa344-c02d-4445-8325-cc5844507147" index="19" run="19" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct680"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 32, 1, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[1] = 32;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct680()
{
    int i;
    int[] ints = new int[5];
    ints[1] = 32;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b04fa2c0-9281-4934-8a04-53bb312a194b" index="20" run="20" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct236"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 32, 1, 1, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 32;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct236()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 32;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 5L < array.Length && 
                                                                                   array[0L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                           array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5fd0eb1b-bfed-4dec-9844-0b349eda9423" index="21" run="21" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct832"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{16, 0, 1, 16}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 16;
ints[2] = 1;
ints[3] = 16;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct832()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 16;
    ints[2] = 1;
    ints[3] = 16;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       3L < array.Length && array[0L] == array[3L] && array.Length == 4L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="8a87f40e-656c-46af-909b-d0a5a1eee025" index="22" run="22" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct668"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[5];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct668()
{
    int i;
    int[] ints = new int[5];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && 
                                                                                                             array[1L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && array.Length == 5L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="84a0741e-1936-4433-a073-a4d81428c2dc" index="23" run="23" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException903"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 32, 1, 1, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[1] = 32;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException903()
{
    int i;
    int[] ints = new int[7];
    ints[1] = 32;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && 6 < (int)(array.Length) && 6L < array.Length && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 
                                                                                                                                                                                                                 array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ffa4752a-b127-4b1f-8a01-f81003e00dd5" index="24" run="24" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct143"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 0, 0, 1, 1, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct143()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && 6L < array.Length && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array.Length == 7L && 
                                                                                                                                                                                                                array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                            array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d2c67c08-8664-4733-9995-9a384c8fb0ae" index="25" run="25" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct927"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct927()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[2L] && 3L < array.Length && array[0L] == array[3L] && array[2L] == array[3L] && array.Length == 4L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="de89feec-2ccd-4286-97c0-30b5ca514584" index="26" run="26" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct954"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct954()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array[1L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="a4145cd1-5810-42e0-9a5a-12ed8e41a315" index="27" run="27" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct126"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct126()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 
                               array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && 
                                                                                                                                                                                           array[3L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                       array[8L] == array[9L] && 10L < array.Length && array[2L] == array[10L] && array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array.Length == 11L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && 
array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && 
array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && 
array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && 
array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="69d866c0-0ce7-46ad-adbc-6ebe1db0bcd2" index="28" run="28" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct983"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{16, 0, 1, 16, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 16;
ints[2] = 1;
ints[3] = 16;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct983()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 16;
    ints[2] = 1;
    ints[3] = 16;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && 4L < array.Length && array[1L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a3f36e32-57a4-4a89-8ab0-f650a09b2584" index="29" run="29" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct111"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 16, 0, 0, 17}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[1] = 16;
ints[4] = 17;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct111()
{
    int i;
    int[] ints = new int[5];
    ints[1] = 16;
    ints[4] = 17;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array.Length == 5L && 
                                                                                                                                  array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="608a7e5e-5526-471e-91c4-33202771f862" index="30" run="30" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct637"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct637()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 
                               array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && 
                                                                                                                                                                                           array[3L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                       array[8L] == array[9L] && 10L < array.Length && array[1L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && 
array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && 
array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[2L] != array[10L] && 
array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L] && array[9L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="bc8990f0-fc6d-4666-a31f-7004837df699" index="31" run="31" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct394"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct394()
{
    int i;
    int[] ints = new int[5];
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 4L < array.Length && array[0L] == array[4L] && 
                                                                                                                                  array[1L] == array[4L] && array[2L] == array[4L] && array.Length == 5L && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="29cb3975-d698-4b7e-aa0c-734395ff5ae7" index="32" run="32" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct768"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 5, 0, 4, 4, 5, 5, 5, 6, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct768()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 
                               array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[8L] && 
                                                                                                                                                                                           array[1L] == array[9L] && array[8L] == array[9L] && 10L < array.Length && array[1L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && 
                                                                                                                                                                                                                                                                                                                                                      array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && 
array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="20e5f7bb-7829-4bb7-ae35-c7732155ea15" index="33" run="33" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct976"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 0, 4, 4, 5, 5, 5, 6, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct976()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[8L] && 9L < array.Length && array[1L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && 
                                                                                                                                                                                                                                                                                              array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                          array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b2a62c49-50ce-4c60-beb4-8eaad8eb920a" index="34" run="34" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct79"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct79()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[1L] == array[2L] && 3L < array.Length && array[0L] == array[3L] && array.Length == 4L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9f59993c-0739-471f-92bb-f3d71a2b1d6a" index="35" run="35" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct502"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct502()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[2L] == array[10L] && array[3L] == array[10L] && array[7L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 array[8L] == array[10L] && array[9L] == array[10L] && 11L < array.Length && array[2L] == array[11L] && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && 
array[9L] == array[11L] && array[10L] == array[11L] && array.Length == 12L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && 
array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && 
array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && 
array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6437cac9-25a3-4a6a-970e-6603125e70d0" index="36" run="36" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct478"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct478()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && 
                                                                                                                                                                                                                                               array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[2L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[2L] == array[11L] && array[3L] == array[11L] && array[7L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 12L < array.Length && array[2L] == array[12L] && array[3L] == array[12L] && array[7L] == array[12L] && 
array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && array[11L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && array[0L] != array[2L] && 
array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && 
array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && 
array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && 
array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && 
array[5L] != array[11L] && array[6L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6780f6af-ea2f-4991-a8fc-7bcdea544314" index="37" run="37" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct993"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 0, 0, 1, 1, 1, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct993()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && 8L < array.Length && 
                                                                                                                                                                                                                                               array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && array.Length == 9L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                                                                                                                                                                                       array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && 
array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && 
array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="6c7afc7c-7970-4095-b8b7-8682c845313b" index="38" run="38" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct431"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct431()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && 
                                                                                                                                                                                                                     array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                 array[2L] == array[10L] && array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[2L] == array[11L] && array[3L] == array[11L] && 
array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && array[2L] == array[12L] && array[3L] == array[12L] && array[7L] == array[12L] && 
array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && array[11L] == array[12L] && 13L < array.Length && array[2L] == array[13L] && array[3L] == array[13L] && 
array[7L] == array[13L] && array[8L] == array[13L] && array[9L] == array[13L] && array[10L] == array[13L] && array[11L] == array[13L] && array[12L] == array[13L] && array.Length == 14L && 
array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && 
array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && 
array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && 
array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[4L] != array[12L] && 
array[5L] != array[12L] && array[6L] != array[12L] && array[0L] != array[13L] && array[1L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && array[6L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="86116670-e0f3-44db-8de8-f70eba8d2e3a" index="39" run="39" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct426"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct426()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="05247b3f-a31e-4fe6-9507-ecb7b448bf32" index="40" run="40" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct206"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct206()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="59b7d4f3-625f-4682-b11a-b090347e0b5f" index="41" run="41" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct571"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 0, 0, 1, 1, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct571()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 7L < array.Length && array[2L] == array[7L] && 
                                                                                                                                                                                                                array[3L] == array[7L] && array.Length == 8L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && 
array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a0f550d3-d5b1-4dc0-b43f-080aad44f9d9" index="42" run="42" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct909"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct909()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && 4L < array.Length && array[2L] == array[4L] && array[3L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5002e949-3f79-4fc9-8220-a07aa629c70d" index="43" run="43" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct324"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct324()
{
    int i;
    int[] ints = new int[5];
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && 
                                                                                                             array[1L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array.Length == 5L && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="430ace99-74fb-4abc-a9c7-d5d5aaa670a7" index="44" run="44" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct780"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct780()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 
                                                                                   array[1L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="ca78b5f8-12ae-4ce6-bece-5d0dce6e7c2d" index="45" run="45" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct731"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct731()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="c758de21-3661-4ac5-a647-6eb0149a8a6a" index="46" run="46" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct608"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 0, 0, 3}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 2;
ints[3] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct608()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 2;
    ints[3] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[1L] == array[2L] && 3L < array.Length && array.Length == 4L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6a5de7d7-8915-4822-a3c4-8de4f08dbd72" index="47" run="47" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct597"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct597()
{
    int i;
    int[] ints = new int[6];
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 
                                                                                   array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && 5L < array.Length && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                                                                                                                          array[3L] == array[5L] && array.Length == 6L && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="4ce7f681-ddd8-47f6-82a7-cd1e7e27346b" index="48" run="48" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct769"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct769()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="41457fd0-79a1-41c7-b363-abf6b97a35f5" index="49" run="49" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct828"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct828()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[1L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array[1L] == array[4L] && 
                                                                                                                                  array[2L] == array[4L] && array[3L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[0L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="065bc550-79b7-4c64-a887-e415dc8f8923" index="50" run="50" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct492"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 0, 2, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 3;
ints[2] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct492()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 3;
    ints[2] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[3L] && 4L < array.Length && array[1L] == array[4L] && array[3L] == array[4L] && array.Length == 5L && 
                                                                                                                                  array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="9d068a82-714e-42ba-9d25-3ace6143aea3" index="51" run="51" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct966"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 32}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[15] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct966()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[15] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="42b916f8-dd86-435b-bb3d-fc3d049cefbd" index="52" run="52" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct29701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct29701()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="8d6c5a5f-cf1c-4824-b582-52218c418b35" index="53" run="53" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct8"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 0, 4, 4, 5, 5, 5, 6}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct8()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 7L < array.Length && array.Length == 8L && 
                                                                                                                                                                                                                array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                            array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="704c036a-bd86-4066-84c3-e4297d7d20d4" index="54" run="54" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct353"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct353()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="12bfccd3-8dd3-41a2-a305-aa370c5cfe58" index="55" run="55" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct234"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 0, 0, 1, 1, 1, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct234()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && 
                                                                                                                                                                                                                                                                                                   9L < array.Length && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && 
array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="66f03b77-1805-4e2c-9228-72cab5bd4fbd" index="56" run="56" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct647"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct647()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1f6e8b16-e665-4c52-96b1-a2faf27a3eea" index="57" run="57" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct23401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct23401()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[0L] == array[3L] && 4L < array.Length && array[1L] == array[4L] && array[2L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="57073d09-aa48-4cde-ab96-8b5dcae3b004" index="58" run="58" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct123"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct123()
{
    int i;
    int[] ints = new int[21];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="ad2e80cb-199d-4378-93fb-aa44862668d5" index="59" run="59" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct269"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct269()
{
    int i;
    int[] ints = new int[22];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="836006d8-2fe6-4ccc-92ff-c59347eb276c" index="60" run="60" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct756"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[1] = 1;
ints[3] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct756()
{
    int i;
    int[] ints = new int[4];
    ints[1] = 1;
    ints[3] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[2L] && 3L < array.Length && array.Length == 4L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="65a23ec2-efb0-4afb-ad41-40f29ed982fc" index="61" run="61" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct217"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 5, 0, 4, 4, 5, 5, 5, 6, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct217()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[8L] && array[1L] == array[9L] && array[8L] == array[9L] && array[1L] == array[10L] && array[8L] == array[10L] && 
                                                                                                                                                                                                                                                                                                    array[9L] == array[10L] && 11L < array.Length && array[1L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && array.Length == 12L && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && 
array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && 
array[0L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="43f356c0-ccc2-4ebd-a741-8ec32038eab5" index="62" run="62" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct952"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct952()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="dd8651d1-5974-4773-b4d3-1274626a0e0f" index="63" run="63" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct618"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=24; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[24];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct618()
{
    int i;
    int[] ints = new int[24];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="1e931097-f5bc-480a-a03e-e1d676b161fd" index="64" run="64" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct537"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct537()
{
    int i;
    int[] ints = new int[22];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="b3ca2610-1d98-4db5-afea-f961712b7c80" index="65" run="65" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct481"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=25; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[25];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct481()
{
    int i;
    int[] ints = new int[25];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="57dd8b7e-7971-4965-847b-29dcc762306a" index="66" run="66" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct322"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=26; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[26];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct322()
{
    int i;
    int[] ints = new int[26];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="c1b04146-3bd2-4730-8223-0fdae41e92b5" index="67" run="67" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct46"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[1] = 1;
ints[3] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct46()
{
    int i;
    int[] ints = new int[5];
    ints[1] = 1;
    ints[3] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 4L < array.Length && array[0L] == array[4L] && array[2L] == array[4L] && array.Length == 5L && 
                                                                                                                                  array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="c8d3376e-7ea2-4ab5-b280-1f87c06ca8ab" index="68" run="68" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct106"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 0, 0, 3, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 2;
ints[3] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct106()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 2;
    ints[3] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && 4L < array.Length && array[1L] == array[4L] && array[2L] == array[4L] && array.Length == 5L && 
                                                                                                                                  array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="d5daeeaa-244e-45f0-a927-610ed3b1e9ec" index="69" run="69" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct623"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=27; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[27];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct623()
{
    int i;
    int[] ints = new int[27];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="43a8d109-d753-4683-b7df-fb9e9cdf6053" index="70" run="70" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct876"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct876()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="8394b828-d542-450d-b923-3e578901a289" index="71" run="71" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct598"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=29; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[29];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct598()
{
    int i;
    int[] ints = new int[29];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="ac99ce5f-5716-4579-83e2-f76ff81c685a" index="72" run="72" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct726"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct726()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="fa7591cc-2811-43b7-96bc-933e6a1f39c5" index="73" run="73" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct363"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 5, 0, 4, 4, 5, 5, 5, 6, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct363()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[8L] && array[1L] == array[9L] && array[8L] == array[9L] && 
                                                                                                                                                                                                                                               array[1L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[1L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                 12L < array.Length && array[1L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && array[11L] == array[12L] && array.Length == 13L && 
array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && 
array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && 
array[0L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && 
array[0L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<boundary kind="maxconditions" value="500" message="maximum number of conditions exceeded"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<generatedTest id="9e1c0fd2-0f55-4cce-a2b3-7e40a558e424" index="74" run="74" status="pathboundsexceeded" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct891"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=31; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[31];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void countDistinct891()
{
    int i;
    int[] ints = new int[31];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<boundaryCodeUpdate kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</boundaryCodeUpdate>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="8e46d9e4-9d53-4f38-a144-b698a6e9e3b6" index="75" run="75" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct71"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct71()
{
    int i;
    int[] ints = new int[5];
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[3L] && array[1L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && 
                                                                                                                                  array[1L] == array[4L] && array[3L] == array[4L] && array.Length == 5L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[3L] && array[2L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="045071a2-7b05-4eaa-ac3e-b35c42d28128" index="76" run="76" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct163"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[6];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct163()
{
    int i;
    int[] ints = new int[6];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && 
                                                                                                                                                                                                                     array[3L] == array[4L] && 5L < array.Length && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array.Length == 6L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9b5a824f-b0bf-4667-af85-874fd37ddf76" index="77" run="77" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct281"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 2, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[2] = 2;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct281()
{
    int i;
    int[] ints = new int[4];
    ints[2] = 2;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && 3L < array.Length && array.Length == 4L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="19c6c5c8-0160-4264-afb1-9d12daa7695f" index="78" run="78" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct531"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct531()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[1L] == array[3L] && array[2L] == array[3L] && 
                                                                                   array[1L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && 
                                                                                                                                                                                                                                          array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[0L] != array[4L] && array[0L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="8022cd98-f6e4-4d26-8eeb-1a386ba6c178" index="79" run="79" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct35301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 17, 25}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[2] = 17;
ints[3] = 25;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct35301()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[2] = 17;
    ints[3] = 25;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       3L < array.Length && array.Length == 4L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="3070f856-4893-49aa-8cb0-7f20372a9f43" index="80" run="80" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct425"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct425()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1198c460-1d2d-42cb-90e0-677fa7364030" index="81" run="81" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct854"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 17, 25, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[2] = 17;
ints[3] = 25;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct854()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[2] = 17;
    ints[3] = 25;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 4L < array.Length && array[1L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                              array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="23ea01de-d2c1-4551-b529-0bb6f0afaffb" index="82" run="82" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct89"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct89()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 
                               array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && 
                                                                                                                                                                                           array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && 10L < array.Length && array[2L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                   array[3L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L] && 
array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d53dc2e2-28d7-4706-92e0-84e8cbb673aa" index="83" run="83" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct173"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{512, 8, 0, 0, 512, 512, 512, 1, 512}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct173()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 8L < array.Length && array[0L] == array[8L] && array[4L] == array[8L] && 
                                                                                                                                                                                                                                          array[5L] == array[8L] && array[6L] == array[8L] && array.Length == 9L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                  array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="950c1fc2-804d-43e3-a2ad-8a27f8e2a443" index="84" run="84" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct3801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 2, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 1;
ints[3] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct3801()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 1;
    ints[3] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && array[2L] == array[4L] && 
                                                                                   5L < array.Length && array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="8e215295-92ee-4432-858b-2c27cbec8b86" index="85" run="85" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct830"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 2, 0, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 2;
ints[2] = 1;
ints[3] = 1;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 1;
ints[16] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct830()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 2;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 1;
    ints[16] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="cc6a9d38-d69f-4722-8cd2-e0c42940a523" index="86" run="86" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct613"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct613()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9a34bbd2-263d-497a-a24f-46d71f8cdbc0" index="87" run="87" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct696"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 0, 1, 3}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 1;
ints[4] = 1;
ints[5] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct696()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 1;
    ints[4] = 1;
    ints[5] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 
                                                                                   array[1L] == array[4L] && 5L < array.Length && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                      array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9b643dc1-c514-4f1e-9c65-77dd85dc8436" index="88" run="88" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException11"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 2, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[1] = 1;
ints[3] = 2;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException11()
{
    int i;
    int[] ints = new int[7];
    ints[1] = 1;
    ints[3] = 2;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && 
                                                         array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && 6 < (int)(array.Length) && 6L < array.Length && array[0L] == array[6L] && 
                                                                                                                                                                                                                 array[2L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[3L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7b2c635a-9b5d-448a-9ff1-a13a4994af1e" index="89" run="89" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct364"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 1, 2, 0, 2, 2, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct364()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && 
                                                         array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && 6L < array.Length && array[0L] == array[6L] && array[2L] == array[6L] && 
                                                                                                                                                                                                                array[4L] == array[6L] && array[5L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[3L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="28940c3f-2704-4a9f-9528-3362a7d9b7d5" index="90" run="90" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct36401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{512, 8, 0, 0, 512, 512, 512, 1, 512, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct36401()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && 9L < array.Length && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[9L] && array[3L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                            array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="48f2b058-670b-412e-8e95-c945c2080e9e" index="91" run="91" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct764"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 1, 128, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 1;
ints[1] = 128;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[29] = 128;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct764()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 1;
    ints[1] = 128;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[29] = 128;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="fe2d1c7e-bc53-400e-90f4-285891649a9c" index="92" run="92" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct654"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct654()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[2L] == array[9L] && 
                                                                                                                                                                                                                                                                                                   array[3L] == array[9L] && array[2L] == array[10L] && array[3L] == array[10L] && array[9L] == array[10L] && 11L < array.Length && array[2L] == array[11L] && array[3L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[9L] == array[11L] && array[10L] == array[11L] && array.Length == 12L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L] && 
array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L] && 
array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && array[8L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="d76e9d70-8480-4228-9ab5-e96e8d96166a" index="93" run="93" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct72"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=24; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[24];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct72()
{
    int i;
    int[] ints = new int[24];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="417540fa-5bca-4514-be3b-8472f52f820b" index="94" run="94" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct442"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct442()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[1L] == array[3L] && 4L < array.Length && array[1L] == array[4L] && array[3L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="08eb56eb-f1ce-4080-9b52-f40f5e1677ed" index="95" run="95" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct328"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 8, 0, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 8}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 8;
ints[2] = 1;
ints[3] = 1;
ints[4] = 8;
ints[5] = 8;
ints[6] = 8;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 8;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct328()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 8;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 8;
    ints[5] = 8;
    ints[6] = 8;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 8;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="2068e1c2-0e5a-4f9f-9003-0fc233b57351" index="96" run="96" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct402"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=25; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[25];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct402()
{
    int i;
    int[] ints = new int[25];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="29fdb342-5b83-4137-913f-151dc19f01de" index="97" run="97" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct151"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct151()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="bfd3d344-c339-49fd-84da-4c2b7aae1e02" index="98" run="98" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct456"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=26; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[26];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct456()
{
    int i;
    int[] ints = new int[26];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="11df93db-608b-40c4-a1a5-d02b2726d907" index="99" run="99" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct354"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 0, 4, 4, 5, 5, 5, 6, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct354()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 8L < array.Length && array[1L] == array[8L] && array.Length == 9L && 
                                                                                                                                                                                                                                          array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                      array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="1b26c272-47bf-43ac-8275-4db651fb18cf" index="100" run="100" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct565"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=27; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[27];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct565()
{
    int i;
    int[] ints = new int[27];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5d9cfdcf-15d9-4904-91bf-5b6f32a0203b" index="101" run="101" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct366"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct366()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && 
                                                                                                                                  array[2L] == array[4L] && array[3L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[1L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="53b4e0d9-afdf-4bc5-a455-e312174a3283" index="102" run="102" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct95401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct95401()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[1L] == array[10L] && 11L < array.Length && array[2L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                            array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array.Length == 12L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && 
array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && 
array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && 
array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L] && 
array[9L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[10L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="176f2fd6-f6db-4f06-a837-99bbbffe42f5" index="103" run="103" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct928"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct928()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && array[2L] == array[4L] && 
                                                                                   array[3L] == array[4L] && 5L < array.Length && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[2L] && 
                                                                                                                                                                                                                                      array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6f07ac45-0b96-49fb-b123-e9d9abbd6e35" index="104" run="104" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct12"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[2] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct12()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[2] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[1L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array[2L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="d2c3c5d0-60ec-452f-ba74-f96b68abf231" index="105" run="105" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct874"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct874()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="63151517-d023-4a13-b6fe-ee99e4c69268" index="106" run="106" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct308"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 2, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[2] = 2;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct308()
{
    int i;
    int[] ints = new int[5];
    ints[2] = 2;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 4L < array.Length && array[0L] == array[4L] && array[1L] == array[4L] && array.Length == 5L && 
                                                                                                                                  array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="027a3184-0a12-474a-8e03-c42d36e3a1dd" index="107" run="107" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct337"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 5, 0, 1, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 5;
ints[3] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct337()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 5;
    ints[3] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array[3L] == array[4L] && array.Length == 5L && 
                                                                                                                                  array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L];
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:28:56Z" category="progress" message="  250 constraint systems (42.80% solved, 57.20% proven unsatisfiable), flipping location Question.countDistinct(Int32[]) at 0x0052 took 0s (57.26%)"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="56130457-eb9b-4bb6-962a-95f54d4da487" index="108" run="108" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct544"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct544()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && 
                                                                                                                                                                                                                                               array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[2L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[2L] == array[11L] && array[3L] == array[11L] && array[7L] == array[11L] && 
array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 12L < array.Length && array.Length == 13L && array[0L] != array[1L] && array[0L] != array[2L] && 
array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && 
array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && 
array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && 
array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && 
array[5L] != array[11L] && array[6L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && array[4L] != array[12L] && 
array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && array[8L] != array[12L] && array[9L] != array[12L] && array[10L] != array[12L] && array[11L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9ef4823d-fb5c-4a6d-99cd-bb4d3f486623" index="109" run="109" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct87501"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct87501()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[4L] && 
                                                                                   array[2L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                      array[0L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="0ac85853-312a-4931-8f94-38d2019f77c1" index="110" run="110" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct771"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct771()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[3L] && array[1L] == array[3L] && 4L < array.Length && array[2L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="ca48faf8-d81c-4568-9d8f-4f10819e631d" index="111" run="111" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct543"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[15] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct543()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[15] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e13739dd-f4d3-47e7-85af-fb374db6a09f" index="112" run="112" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct643"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct643()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[1L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="2dc16c88-6ffa-462c-9e4c-e8087f1bd9b5" index="113" run="113" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException49"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException49()
{
    int i;
    int[] ints = new int[7];
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && 
                                                                                                                                                                                                                     array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 6 < (int)(array.Length) && 
                                                                                                                                                                                                                                                                                                                                                                                 6L < array.Length && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3520b122-facd-4950-bdaa-1099cf62b75f" index="114" run="114" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct735"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[7];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct735()
{
    int i;
    int[] ints = new int[7];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && 
                                                                                                                                                                                           array[2L] == array[4L] && array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 
                                                                                                                                                                                                                                                                                                                                                       6L < array.Length && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array.Length == 7L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<boundary kind="maxconditions" value="500" message="maximum number of conditions exceeded"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<generatedTest id="f5d6e9ce-b85f-4f52-a784-b9c22fef73d9" index="115" run="115" status="pathboundsexceeded" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct440"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=31; 1, 128, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[31];
ints[0] = 1;
ints[1] = 128;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[29] = 128;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void countDistinct440()
{
    int i;
    int[] ints = new int[31];
    ints[0] = 1;
    ints[1] = 128;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[29] = 128;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<boundaryCodeUpdate kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</boundaryCodeUpdate>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="4f4c5d5c-c60c-426e-9034-524343c7de4f" index="116" run="116" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct745"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct745()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && 
                                                                                                                                                                                                                     array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                 array[2L] == array[10L] && array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[2L] == array[11L] && array[3L] == array[11L] && 
array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 13L < array.Length && array[2L] == array[13L] && array[3L] == array[13L] && 
array[7L] == array[13L] && array[8L] == array[13L] && array[9L] == array[13L] && array[10L] == array[13L] && array[11L] == array[13L] && array.Length == 14L && array[0L] != array[1L] && 
array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && 
array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && 
array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && 
array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && array[8L] != array[12L] && array[9L] != array[12L] && array[10L] != array[12L] && 
array[11L] != array[12L] && array[0L] != array[13L] && array[1L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && array[6L] != array[13L] && array[12L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a36beb53-619f-4c00-840f-a26c102f6f9d" index="117" run="117" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct519"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{16, 0, 1, 16, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 16;
ints[2] = 1;
ints[3] = 16;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct519()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 16;
    ints[2] = 1;
    ints[3] = 16;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && array[1L] == array[4L] && 5L < array.Length && 
                                                                                   array[1L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                           array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="91a9f99b-5e3d-4dfc-b680-4fd3d28fe4b6" index="118" run="118" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct987"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 0, 0, 3, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 2;
ints[3] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct987()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 2;
    ints[3] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[1L] == array[4L] && array[2L] == array[4L] && 
                                                                                   5L < array.Length && array[1L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                                                                                                                                      array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="046b9fd8-2c32-435f-9f1d-71c9537d993c" index="119" run="119" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct561"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 1, 3, 0, 2}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 3;
ints[1] = 1;
ints[2] = 3;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct561()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 3;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 4L < array.Length && array.Length == 5L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                              array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="d596e04e-6503-462e-bd34-2cf41f27077b" index="120" run="120" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct686"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 8, 0, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 8, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 8;
ints[2] = 1;
ints[3] = 1;
ints[4] = 8;
ints[5] = 8;
ints[6] = 8;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 8;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct686()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 8;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 8;
    ints[5] = 8;
    ints[6] = 8;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 8;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="0c984b30-fa26-44d7-9d48-c61e99fba121" index="121" run="121" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct179"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 1, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[3] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct179()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[3] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[0L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array[3L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="4ae0ac88-b3c0-4e09-8ce9-5ef33fa8c94e" index="122" run="122" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct995"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 1, 3, 0, 2, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 3;
ints[1] = 1;
ints[2] = 3;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct995()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 3;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 5L < array.Length && array[3L] == array[5L] && 
                                                                              array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                      array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="2f10bc3b-3838-41cd-a08b-65bbb6e7b38b" index="123" run="123" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct761"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 2, 1, 2, 0, 2, 2, 2, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct761()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 
                               array[0L] == array[4L] && array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && 
                                                                                                                                                                                           array[4L] == array[6L] && array[5L] == array[6L] && array[3L] == array[7L] && array[3L] == array[8L] && array[7L] == array[8L] && array[3L] == array[9L] && array[7L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                       array[8L] == array[9L] && 10L < array.Length && array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && 
array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[4L] != array[8L] && 
array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && 
array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a525c7c9-5d35-4aba-96e9-d94bf24393ae" index="124" run="124" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct265"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 1, 2, 0, 2, 2, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct265()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && 
                                                         array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && 
                                                                                                                                                                                                                     array[5L] == array[6L] && 7L < array.Length && array[3L] == array[7L] && array.Length == 8L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ba9a2606-e0af-4030-84ac-1a879a144d9a" index="125" run="125" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct691"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct691()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 4L < array.Length && array[3L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5363ae3b-12ff-441a-ba6f-ba780005d211" index="126" run="126" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct255"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct255()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && 
                                                                                                                                                                                                                                               array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[1L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[2L] == array[11L] && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && 12L < array.Length && array[2L] == array[12L] && 
array[3L] == array[12L] && array[7L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[11L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && 
array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && 
array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && 
array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && 
array[8L] != array[10L] && array[9L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && 
array[10L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[10L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="f6145503-7d10-4471-b15f-6b898ab24ef3" index="127" run="127" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct435"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{16, 0, 0, 1, 16}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 16;
ints[3] = 1;
ints[4] = 16;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct435()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 16;
    ints[3] = 1;
    ints[4] = 16;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && 4L < array.Length && array[0L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="05f8c7fb-f51d-4b55-85b9-596ae414d23f" index="128" run="128" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException127"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 1, 3, 0, 2, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 3;
ints[1] = 1;
ints[2] = 3;
ints[4] = 2;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException127()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 3;
    ints[4] = 2;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && 
                                                         6 < (int)(array.Length) && 6L < array.Length && array[3L] == array[6L] && array[5L] == array[6L] && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                 array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="10b7c203-3c4c-484d-a5da-6d170925143f" index="129" run="129" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct43101"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 64, 0, 1, 4, 1, 1}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct43101()
{
    int i;
    int[] ints = new int[7];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && 
                                                         6L < array.Length && array[3L] == array[6L] && array[5L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                            array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="d375b6c6-f997-44a3-8d3b-95aa8f6a1712" index="130" run="130" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct246"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=29; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[29];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct246()
{
    int i;
    int[] ints = new int[29];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="a3d7f169-5190-4466-a64e-4776ada1f03b" index="131" run="131" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct408"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[15] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct408()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[15] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<log level="message" time="2019-02-15 20:28:57Z" category="progress" message="  131 runs, 15/15 blocks covered"/>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="1c9b39f3-6cfe-4221-9c67-3304a3f74df7" index="132" run="132" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct35302"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct35302()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="e6ddad75-ae10-45c5-a0fb-e805bc354d9a" index="133" run="133" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct266"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct266()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="5a115259-aa99-45b1-975a-9f26d6b2fb69" index="134" run="134" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct677"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct677()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="b2b3f243-4c44-4ae0-b8c2-e12633cb0ad7" index="135" run="135" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct807"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct807()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e1f91b36-be4d-4ac4-8162-e8e2a9786a91" index="136" run="136" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct280"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 1, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[3] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct280()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[3] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[0L] == array[3L] && array[0L] == array[4L] && 
                                                                                   array[3L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && array[2L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                                                                                                                                      array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="baa8f1ee-502a-4c4c-8568-f320716fc927" index="137" run="137" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct285"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 256, 0, 1, 1, 256, 256, 256, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 256}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 256;
ints[2] = 1;
ints[3] = 1;
ints[4] = 256;
ints[5] = 256;
ints[6] = 256;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 1;
ints[16] = 1;
ints[17] = 1;
ints[18] = 1;
ints[19] = 1;
ints[20] = 1;
ints[21] = 1;
ints[22] = 1;
ints[23] = 1;
ints[24] = 1;
ints[25] = 1;
ints[26] = 1;
ints[27] = 256;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct285()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 256;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 256;
    ints[5] = 256;
    ints[6] = 256;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 1;
    ints[16] = 1;
    ints[17] = 1;
    ints[18] = 1;
    ints[19] = 1;
    ints[20] = 1;
    ints[21] = 1;
    ints[22] = 1;
    ints[23] = 1;
    ints[24] = 1;
    ints[25] = 1;
    ints[26] = 1;
    ints[27] = 256;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7481f51b-aaef-4c68-b963-6535bfabd68f" index="138" run="138" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct624"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 1, 2, 0, 2, 2, 2, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct624()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && array[2L] == array[4L] && 
                                                                                   array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 
                                                                                                                                                                                                                                               array[3L] == array[7L] && 8L < array.Length && array[3L] == array[8L] && array[7L] == array[8L] && array.Length == 9L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                                                                                                                                                                                  array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && 
array[1L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && 
array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="b7375850-99c0-4127-95df-30e1f6ee907e" index="139" run="139" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct632"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=27; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[27];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct632()
{
    int i;
    int[] ints = new int[27];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="cbf8cf57-1633-4bd3-bf21-56f0050fe265" index="140" run="140" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct965"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct965()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array[1L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="556db79b-c327-4ec4-9273-2e0d654910a0" index="141" run="141" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct588"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 16, 0, 0, 17, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 16;
ints[4] = 17;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct588()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 16;
    ints[4] = 17;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 
                                                                                   5L < array.Length && array[0L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="6983ddd0-18e1-4f24-8940-85f73f47aa09" index="142" run="142" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct20601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct20601()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="dbef506b-752f-4ba7-b180-041d0d81bb8e" index="143" run="143" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct116"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct116()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="620488ba-162f-47d2-814e-9cf211735917" index="144" run="144" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct319"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct319()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 
                                                                                   array[0L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                      array[1L] != array[2L] && array[1L] != array[3L] && array[1L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="3df6f877-381c-4394-a7c3-a6eb811ec5a8" index="145" run="145" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct188"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct188()
{
    int i;
    int[] ints = new int[21];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9ff6b1d5-0e64-408e-b538-b46434a3983f" index="146" run="146" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct409"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 1, 2, 0, 2, 2, 2, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct409()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                       array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[3L] == array[7L] && array[3L] == array[8L] && 
                                                                                                                                                                                                                                                                                                   array[7L] == array[8L] && 9L < array.Length && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && 
array[3L] != array[5L] && array[1L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && 
array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && 
array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="64242a84-eabc-4122-b778-bc517a693d81" index="147" run="147" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct343"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 0, 8, 9, 9, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[1] = 8;
ints[2] = 9;
ints[3] = 9;
ints[7] = 9;
ints[8] = 9;
ints[9] = 9;
ints[10] = 9;
ints[11] = 9;
ints[12] = 9;
ints[13] = 9;
ints[14] = 9;
ints[15] = 9;
ints[16] = 9;
ints[17] = 9;
ints[18] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct343()
{
    int i;
    int[] ints = new int[20];
    ints[1] = 8;
    ints[2] = 9;
    ints[3] = 9;
    ints[7] = 9;
    ints[8] = 9;
    ints[9] = 9;
    ints[10] = 9;
    ints[11] = 9;
    ints[12] = 9;
    ints[13] = 9;
    ints[14] = 9;
    ints[15] = 9;
    ints[16] = 9;
    ints[17] = 9;
    ints[18] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d0ccf132-c1e6-4863-844d-50def4440a72" index="148" run="148" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct54"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 515, 513, 0, 3}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 3;
ints[1] = 515;
ints[2] = 513;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct54()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 3;
    ints[1] = 515;
    ints[2] = 513;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 4L < array.Length && array[0L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                              array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="ad12adce-9359-4405-bf68-8d7b057229bb" index="149" run="149" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct464"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=29; 256, 0, 1, 1, 256, 256, 256, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 256, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[29];
ints[0] = 256;
ints[2] = 1;
ints[3] = 1;
ints[4] = 256;
ints[5] = 256;
ints[6] = 256;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 1;
ints[16] = 1;
ints[17] = 1;
ints[18] = 1;
ints[19] = 1;
ints[20] = 1;
ints[21] = 1;
ints[22] = 1;
ints[23] = 1;
ints[24] = 1;
ints[25] = 1;
ints[26] = 1;
ints[27] = 256;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct464()
{
    int i;
    int[] ints = new int[29];
    ints[0] = 256;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 256;
    ints[5] = 256;
    ints[6] = 256;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 1;
    ints[16] = 1;
    ints[17] = 1;
    ints[18] = 1;
    ints[19] = 1;
    ints[20] = 1;
    ints[21] = 1;
    ints[22] = 1;
    ints[23] = 1;
    ints[24] = 1;
    ints[25] = 1;
    ints[26] = 1;
    ints[27] = 256;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="b7c680c4-6a8e-475f-b5fa-bad93cd89cfd" index="150" run="150" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct831"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct831()
{
    int i;
    int[] ints = new int[22];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5c24e5aa-e88b-436c-95ef-1d879d8bfb1a" index="151" run="151" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct439"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 0, 2, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 3;
ints[2] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct439()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 3;
    ints[2] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[3L] && array[1L] == array[4L] && array[3L] == array[4L] && 
                                                                                   5L < array.Length && array[1L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                                                                                                                                      array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="245d051e-3dc6-4597-88f9-78539f350312" index="152" run="152" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct810"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 0, 1, 1, 3}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 2;
ints[2] = 1;
ints[3] = 1;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct810()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 2;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 4L < array.Length && array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                              array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="4f7df51a-542b-4588-a89d-f33e79951e6c" index="153" run="153" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct220"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 0, 64, 0, 1, 4, 1, 1, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct220()
{
    int i;
    int[] ints = new int[11];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 
                               array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && array[2L] == array[7L] && array[0L] == array[8L] && array[2L] == array[8L] && 
                                                                                                                                                                                           array[7L] == array[8L] && array[0L] == array[9L] && array[2L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 10L < array.Length && array[0L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                   array[2L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && 
array[4L] != array[6L] && array[1L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[1L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && 
array[5L] != array[9L] && array[6L] != array[9L] && array[1L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="c0555618-8371-4bda-9ac9-92db2f9404ff" index="154" run="154" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct412"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 64, 0, 1, 4, 1, 1, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct412()
{
    int i;
    int[] ints = new int[8];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && 
                                                         array[3L] == array[6L] && array[5L] == array[6L] && 7L < array.Length && array[0L] == array[7L] && array[2L] == array[7L] && array.Length == 8L && array[0L] != array[1L] && 
                                                                                                                                                                                                            array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && 
array[2L] != array[6L] && array[4L] != array[6L] && array[1L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="fa15ff65-4a29-4d19-8a7c-511d3dfd7e6c" index="155" run="155" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct475"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 257, 256, 257, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[1] = 257;
ints[2] = 256;
ints[3] = 257;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct475()
{
    int i;
    int[] ints = new int[5];
    ints[1] = 257;
    ints[2] = 256;
    ints[3] = 257;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a65ad744-dce9-487e-9094-21221fa01646" index="156" run="156" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct10"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 515, 513, 0, 3, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 3;
ints[1] = 515;
ints[2] = 513;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct10()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 3;
    ints[1] = 515;
    ints[2] = 513;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[4L] && 5L < array.Length && array[3L] == array[5L] && 
                                                                              array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && 
                                                                                                                                                                                                                                      array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="57e0e47b-c748-4837-861d-e5f62497ed4b" index="157" run="157" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct153"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct153()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<boundary kind="maxconditions" value="500" message="maximum number of conditions exceeded"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<generatedTest id="b6bcdbed-6941-4e01-8e15-033dec9c0ad3" index="158" run="158" status="pathboundsexceeded" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct95201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=31; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[31];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void countDistinct95201()
{
    int i;
    int[] ints = new int[31];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<boundaryCodeUpdate kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</boundaryCodeUpdate>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="18a99aa0-f91e-470a-8d0d-e7ca9bb579e9" index="159" run="159" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct604"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[2] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct604()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[2] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[1L] == array[3L] && array[0L] == array[4L] && 
                                                                                   array[2L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && array[3L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[0L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="cc7abe2b-1e3a-4dda-b6cc-5fefb5c06fd7" index="160" run="160" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct457"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct457()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1c925fb9-7cf1-4f8e-a7ad-97734f7add79" index="161" run="161" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct199"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 3, 1, 0, 2}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 3;
ints[1] = 3;
ints[2] = 1;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct199()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 3;
    ints[1] = 3;
    ints[2] = 1;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 4L < array.Length && array.Length == 5L && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                              array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5bf69131-a342-45a3-b094-42e54dc53924" index="162" run="162" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct142"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 2, 1, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct142()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                       array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[3L] == array[7L] && array[3L] == array[8L] && 
                                                                                                                                                                                                                                                                                                   array[7L] == array[8L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 array[9L] == array[10L] && 11L < array.Length && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 
array.Length == 12L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && 
array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && 
array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && 
array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[4L] != array[9L] && 
array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && 
array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[2L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="e2c294c6-60f9-4b80-9aef-e2e400c64598" index="163" run="163" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct262"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 0, 8, 9, 9, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[1] = 8;
ints[2] = 9;
ints[3] = 9;
ints[7] = 9;
ints[8] = 9;
ints[9] = 9;
ints[10] = 9;
ints[11] = 9;
ints[12] = 9;
ints[13] = 9;
ints[14] = 9;
ints[15] = 9;
ints[16] = 9;
ints[17] = 9;
ints[18] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct262()
{
    int i;
    int[] ints = new int[21];
    ints[1] = 8;
    ints[2] = 9;
    ints[3] = 9;
    ints[7] = 9;
    ints[8] = 9;
    ints[9] = 9;
    ints[10] = 9;
    ints[11] = 9;
    ints[12] = 9;
    ints[13] = 9;
    ints[14] = 9;
    ints[15] = 9;
    ints[16] = 9;
    ints[17] = 9;
    ints[18] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e734d8c8-931e-4b68-b6b6-709ac21bbf7b" index="164" run="164" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct982"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 64, 0, 1, 4, 1, 1, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct982()
{
    int i;
    int[] ints = new int[9];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && array[3L] == array[6L] && 
                                                                                   array[5L] == array[6L] && array[0L] == array[7L] && array[2L] == array[7L] && 8L < array.Length && array[0L] == array[8L] && array[2L] == array[8L] && array[7L] == array[8L] && 
                                                                                                                                                                                                                                          array.Length == 9L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                  array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && 
array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[1L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && 
array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="190bd4c1-f24d-4047-9440-fa534ae1bc9b" index="165" run="165" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct984"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct984()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="28a2367d-d4f1-4cb7-b28d-5fb5959ca0f8" index="166" run="166" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct645"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct645()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ea6c058a-719e-40a2-9383-f0a16876dba1" index="167" run="167" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct27"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct27()
{
    int i;
    int[] ints = new int[6];
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 
                                                                                   array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && 5L < array.Length && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                                                                                                                          array[4L] == array[5L] && array.Length == 6L && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[3L] != array[4L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="f6e81efc-dffe-4c09-9ee6-f417301e431e" index="168" run="168" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException858"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 0, 1, 3, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[1] = 1;
ints[4] = 1;
ints[5] = 3;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException858()
{
    int i;
    int[] ints = new int[7];
    ints[1] = 1;
    ints[4] = 1;
    ints[5] = 3;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && 
                                                         array[2L] == array[3L] && array[1L] == array[4L] && 6 < (int)(array.Length) && 6L < array.Length && array[0L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && 
                                                                                                                                                                                                                 array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L] && array[1L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="95cbf026-2063-48d3-9221-bd894eb4db39" index="169" run="169" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct145"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 16, 1, 1, 16, 0, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 16;
ints[2] = 1;
ints[3] = 1;
ints[4] = 16;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct145()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 16;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 16;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && 
                                                         array[2L] == array[3L] && array[1L] == array[4L] && 6L < array.Length && array[0L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array.Length == 7L && 
                                                                                                                                                                                                                array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                            array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L] && array[1L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="e9f95dc3-9476-4f4b-a4fb-8669bb2b2406" index="170" run="170" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct962"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=24; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[24];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct962()
{
    int i;
    int[] ints = new int[24];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="2d151781-547e-46b0-a9e9-779de62cd861" index="171" run="171" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct639"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 64, 0, 1, 4, 1, 1, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct639()
{
    int i;
    int[] ints = new int[10];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && 
                                                                                                                                       array[2L] == array[7L] && array[0L] == array[8L] && array[2L] == array[8L] && array[7L] == array[8L] && 9L < array.Length && array[0L] == array[9L] && array[2L] == array[9L] && 
                                                                                                                                                                                                                                                                                              array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && 
array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[1L] != array[7L] && 
array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && 
array[5L] != array[8L] && array[6L] != array[8L] && array[1L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="92a6bb25-c7fe-406e-9c89-8f9cc5e273e0" index="172" run="172" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct917"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 0, 8, 9, 9, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[1] = 8;
ints[2] = 9;
ints[3] = 9;
ints[7] = 9;
ints[8] = 9;
ints[9] = 9;
ints[10] = 9;
ints[11] = 9;
ints[12] = 9;
ints[13] = 9;
ints[14] = 9;
ints[15] = 9;
ints[16] = 9;
ints[17] = 9;
ints[18] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct917()
{
    int i;
    int[] ints = new int[22];
    ints[1] = 8;
    ints[2] = 9;
    ints[3] = 9;
    ints[7] = 9;
    ints[8] = 9;
    ints[9] = 9;
    ints[10] = 9;
    ints[11] = 9;
    ints[12] = 9;
    ints[13] = 9;
    ints[14] = 9;
    ints[15] = 9;
    ints[16] = 9;
    ints[17] = 9;
    ints[18] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9e5d9919-1732-446a-9986-9719eb2b514c" index="173" run="173" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct257"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct257()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 
                                                                                   array[3L] == array[4L] && 5L < array.Length && array[3L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                      array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="f6b1fc76-669f-4a1b-a8e6-95c7c755ef85" index="174" run="174" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct721"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 0, 16, 17, 17, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[1] = 16;
ints[2] = 17;
ints[3] = 17;
ints[7] = 17;
ints[8] = 17;
ints[9] = 17;
ints[10] = 17;
ints[11] = 17;
ints[12] = 17;
ints[13] = 17;
ints[14] = 17;
ints[15] = 17;
ints[16] = 17;
ints[17] = 17;
ints[18] = 17;
ints[19] = 17;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct721()
{
    int i;
    int[] ints = new int[21];
    ints[1] = 16;
    ints[2] = 17;
    ints[3] = 17;
    ints[7] = 17;
    ints[8] = 17;
    ints[9] = 17;
    ints[10] = 17;
    ints[11] = 17;
    ints[12] = 17;
    ints[13] = 17;
    ints[14] = 17;
    ints[15] = 17;
    ints[16] = 17;
    ints[17] = 17;
    ints[18] = 17;
    ints[19] = 17;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="0949eed1-c806-4b21-8c1e-949ac8f2e549" index="175" run="175" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct226"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct226()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="eb5ba24e-4190-4ab8-8623-7868af98838e" index="176" run="176" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException900"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 1, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[4] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException900()
{
    int i;
    int[] ints = new int[7];
    ints[4] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                                                                                                     array[3L] == array[5L] && 6 < (int)(array.Length) && 6L < array.Length && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[5L] == array[6L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[4L] != array[5L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e05ead32-7e25-4a6f-9e95-f53a661c41fa" index="177" run="177" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct422"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 0, 1, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct422()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                                                                                                     array[3L] == array[5L] && 6L < array.Length && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[5L] == array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                            array.Length == 7L && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[4L] != array[5L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="15744f5d-1db4-4c08-a943-ddf3424e4fd0" index="178" run="178" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct871"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct871()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && 
                                                                                                                                                                                                                     array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                 array[1L] == array[10L] && array[2L] == array[11L] && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[2L] == array[12L] && 
array[3L] == array[12L] && array[7L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[11L] == array[12L] && 13L < array.Length && array[2L] == array[13L] && 
array[3L] == array[13L] && array[7L] == array[13L] && array[8L] == array[13L] && array[9L] == array[13L] && array[11L] == array[13L] && array[12L] == array[13L] && array.Length == 14L && 
array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && 
array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && 
array[6L] != array[9L] && array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      array[7L] != array[10L] && array[8L] != array[10L] && array[9L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && 
array[6L] != array[11L] && array[10L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && 
array[10L] != array[12L] && array[0L] != array[13L] && array[1L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && array[6L] != array[13L] && array[10L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="878748f3-2ce5-466c-b39a-20d2d5594b37" index="179" run="179" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct898"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct898()
{
    int i;
    int[] ints = new int[21];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="1d3bcaba-5d1b-4141-8d55-b4bf019a873a" index="180" run="180" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct11401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct11401()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="2f2bc34e-7761-4c68-8a94-0d3eac47828a" index="181" run="181" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct578"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct578()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="4c79d72d-ca4b-452a-8cb4-5c14b3e51d39" index="182" run="182" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct76801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 2, 1, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct76801()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && array[2L] == array[4L] && 
                                                                                   array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 
                                                                                                                                                                                                                                               array[3L] == array[7L] && array[3L] == array[8L] && array[7L] == array[8L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[3L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && 
array[10L] == array[11L] && 12L < array.Length && array[3L] == array[12L] && array[7L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && 
array[11L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && 
array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && 
array[2L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && 
array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[4L] != array[10L] && 
array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[2L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && 
array[6L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[2L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="f7002acb-e88b-4be0-bc8a-b3b59297c60e" index="183" run="183" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct133"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[15] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct133()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[15] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="97b13aef-a2a0-430b-bf42-019ab19999ee" index="184" run="184" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct22"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 8, 0, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 8;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct22()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 8;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && 4L < array.Length && array[2L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="de8a2288-b9c3-469d-a08d-220acea1082e" index="185" run="185" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct41201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct41201()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && 
                                                                                                                                                                                                                                               array[6L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[2L] == array[10L] && array[3L] == array[10L] && array[9L] == array[10L] && array[2L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                              array[3L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 12L < array.Length && array[2L] == array[12L] && array[3L] == array[12L] && array[9L] == array[12L] && 
array[10L] == array[12L] && array[11L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L] && 
array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L] && 
array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && array[8L] != array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             array[0L] != array[12L] && array[1L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && array[8L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="34a3f5d2-3d1b-41e1-bbfe-b45532a099df" index="186" run="186" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct113"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct113()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && array[4L] == array[8L] && 
                                                                                                                                                                                                                     array[5L] == array[8L] && array[6L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[2L] == array[10L] && array[3L] == array[10L] && array[9L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                   array[2L] == array[11L] && array[3L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && array[2L] == array[12L] && array[3L] == array[12L] && array[9L] == array[12L] && 
array[10L] == array[12L] && array[11L] == array[12L] && 13L < array.Length && array[2L] == array[13L] && array[3L] == array[13L] && array[9L] == array[13L] && array[10L] == array[13L] && 
array[11L] == array[13L] && array[12L] == array[13L] && array.Length == 14L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L] && 
array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && array[8L] != array[11L] && 
array[0L] != array[12L] && array[1L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && array[8L] != array[12L] && 
array[0L] != array[13L] && array[1L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && array[6L] != array[13L] && array[7L] != array[13L] && array[8L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="c886adf7-64e8-4ea7-bb94-5d8e40b160ea" index="187" run="187" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct20602"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct20602()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                                                   array[1L] == array[4L] && 5L < array.Length && array[2L] == array[5L] && array[3L] == array[5L] && array.Length == 6L && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="73ee7861-ad66-4a1f-961b-83ad341f1be9" index="188" run="188" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException998"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException998()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && 
                                                         array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && 6 < (int)(array.Length) && 6L < array.Length && array[1L] == array[6L] && 
                                                                                                                                                                                                                 array[4L] == array[6L] && array[5L] == array[6L] && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b2f62d72-1a15-4dee-b343-cdf5b35267de" index="189" run="189" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct956"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct956()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && 
                                                         array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && 6L < array.Length && array[1L] == array[6L] && array[4L] == array[6L] && 
                                                                                                                                                                                                                array[5L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="2cf6ddc6-f20f-4183-b6ed-5a7b546a7781" index="190" run="190" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct191"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 1, 0, 128, 128, 1, 1, 1, 128, 128, 128, 128, 2}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 1;
ints[2] = 128;
ints[3] = 128;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 128;
ints[8] = 128;
ints[9] = 128;
ints[10] = 128;
ints[11] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct191()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 1;
    ints[2] = 128;
    ints[3] = 128;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 128;
    ints[8] = 128;
    ints[9] = 128;
    ints[10] = 128;
    ints[11] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[2L] == array[10L] && array[3L] == array[10L] && array[7L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 array[8L] == array[10L] && array[9L] == array[10L] && 11L < array.Length && array.Length == 12L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && 
array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && 
array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && 
array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && 
array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && array[8L] != array[11L] && array[9L] != array[11L] && array[10L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="7d68b900-eb57-4c14-897b-a49a6175def4" index="191" run="191" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct533"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct533()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="4f448380-8e4c-41cc-9aaa-253f6aaadcfe" index="192" run="192" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct87502"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 1, 1, 4, 4}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 5;
ints[1] = 1;
ints[2] = 1;
ints[3] = 4;
ints[4] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct87502()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 5;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 4;
    ints[4] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && 4L < array.Length && array[3L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="d2473e6f-9b9b-413b-bf27-37e8c387c45b" index="193" run="193" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct587"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 256, 0, 1, 1, 256, 256, 256, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 256, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 256;
ints[2] = 1;
ints[3] = 1;
ints[4] = 256;
ints[5] = 256;
ints[6] = 256;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 1;
ints[16] = 1;
ints[17] = 1;
ints[18] = 1;
ints[19] = 1;
ints[20] = 1;
ints[21] = 1;
ints[22] = 1;
ints[23] = 1;
ints[24] = 1;
ints[25] = 1;
ints[26] = 1;
ints[27] = 256;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct587()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 256;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 256;
    ints[5] = 256;
    ints[6] = 256;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 1;
    ints[16] = 1;
    ints[17] = 1;
    ints[18] = 1;
    ints[19] = 1;
    ints[20] = 1;
    ints[21] = 1;
    ints[22] = 1;
    ints[23] = 1;
    ints[24] = 1;
    ints[25] = 1;
    ints[26] = 1;
    ints[27] = 256;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9d44e232-3437-4050-8da8-26af18ce033b" index="194" run="194" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct51901"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 1, 0, 3}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[1] = 1;
ints[2] = 1;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct51901()
{
    int i;
    int[] ints = new int[5];
    ints[1] = 1;
    ints[2] = 1;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[0L] == array[3L] && 4L < array.Length && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="dc086f58-2137-430e-82f9-d6d74f5445b3" index="195" run="195" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct836"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct836()
{
    int i;
    int[] ints = new int[21];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="73e74085-edeb-4141-bd1b-fc8967aa32be" index="196" run="196" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct964"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=25; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[25];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct964()
{
    int i;
    int[] ints = new int[25];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="7fc2669b-54a8-483e-82af-77ee02173275" index="197" run="197" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct96"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=26; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[26];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct96()
{
    int i;
    int[] ints = new int[26];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="2d8ae189-f40a-458f-b95c-9c34240662cf" index="198" run="198" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct583"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct583()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[5L] && array[1L] == array[5L] && 
                                                                                                                                                                                           array[2L] == array[5L] && array[3L] == array[5L] && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[5L] == array[6L] && 
                                                                                                                                                                                                                                                                                                                                                       array[4L] == array[7L] && array[4L] == array[8L] && array[7L] == array[8L] && array[4L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 10L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[4L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[4L] && array[1L] != array[4L] && 
array[2L] != array[4L] && array[3L] != array[4L] && array[4L] != array[5L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && 
array[3L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && 
array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[5L] != array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="d9b8f515-2241-4496-9dad-765af884f321" index="199" run="199" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct467"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=27; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[27];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct467()
{
    int i;
    int[] ints = new int[27];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="da8800ac-cd93-4ad8-b9ec-a2315847abbb" index="200" run="200" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct555"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 0, 1, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct555()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                                                                                                     array[3L] == array[5L] && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[5L] == array[6L] && 7L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                 array[4L] == array[7L] && array.Length == 8L && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[4L] != array[5L] && 
array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="f87b5c1c-32aa-40e5-927a-920f6b80192e" index="201" run="201" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException968"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 1}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[6] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException968()
{
    int i;
    int[] ints = new int[7];
    ints[6] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && 
                                                                                                                                                                                                                     array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 6 < (int)(array.Length) && 
                                                                                                                                                                                                                                                                                                                                                                                 6L < array.Length && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="98acd653-bedf-4565-9676-86e66e1829d2" index="202" run="202" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct971"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 1, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[4] = 1;
ints[5] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct971()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 1;
    ints[5] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && 
                                                                                                                                                                                           array[2L] == array[4L] && array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 
                                                                                                                                                                                                                                                                                                                                                       6L < array.Length && array.Length == 7L && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9b2fb048-f539-450e-b5db-843607ac4203" index="203" run="203" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct66"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{33, 65, 1, 0, 64}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 33;
ints[1] = 65;
ints[2] = 1;
ints[4] = 64;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct66()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 33;
    ints[1] = 65;
    ints[2] = 1;
    ints[4] = 64;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 4L < array.Length && array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                              array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="76e893ee-b99c-4d8a-a1ec-21f1bd51f89b" index="204" run="204" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct451"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 1, 0, 128, 128, 1, 1, 1, 128, 128, 128, 128, 2, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 1;
ints[2] = 128;
ints[3] = 128;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 128;
ints[8] = 128;
ints[9] = 128;
ints[10] = 128;
ints[11] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct451()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 1;
    ints[2] = 128;
    ints[3] = 128;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 128;
    ints[8] = 128;
    ints[9] = 128;
    ints[10] = 128;
    ints[11] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && 
                                                                                                                                                                                                                                               array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[2L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && 12L < array.Length && array[1L] == array[12L] && array.Length == 13L && 
array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && 
array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && 
array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && 
array[1L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && 
array[8L] != array[11L] && array[9L] != array[11L] && array[10L] != array[11L] && array[0L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && array[4L] != array[12L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && array[8L] != array[12L] && array[9L] != array[12L] && array[10L] != array[12L] && array[11L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="8b2ccb64-e9c6-4a69-a99e-a07235f36918" index="205" run="205" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct484"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct484()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1e7de91d-b4c1-42f7-be24-3f12d22921f7" index="206" run="206" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct95601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 1, 2, 2, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct95601()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 
                                                                                   array[0L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && 5L < array.Length && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[1L] != array[3L] && array[1L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="259b8c71-b31e-4a31-be85-57f522a23f74" index="207" run="207" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct36301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 0, 1, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct36301()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 
                                                                                   array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && 
                                                                                                                                                                                                                                               array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[7L] && 8L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[4L] == array[8L] && array[7L] == array[8L] && array.Length == 9L && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[4L] != array[5L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[5L] != array[7L] && 
array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L];
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:28:59Z" category="progress" message="  500 constraint systems (41.40% solved, 58.60% proven unsatisfiable), flipping location Question.countDistinct(Int32[]) at 0x0052 took 1s (60.81%)"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6e9f5514-e34b-4518-8538-f9b3d8eef8a8" index="208" run="208" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct14301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct14301()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[1L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array.Length == 5L && 
                                                                                                                                  array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9a0c113f-5ab8-44df-ba4d-4da34a5bdf39" index="209" run="209" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct945"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 1, 0, 3, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 1;
ints[2] = 1;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct945()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 1;
    ints[2] = 1;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[0L] == array[3L] && 5L < array.Length && 
                                                                                   array[0L] == array[5L] && array[3L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && 
                                                                                                                                                                                                                                           array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="77dba383-73cf-411d-9344-fb7618aa7733" index="210" run="210" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct934"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct934()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="905d2acb-29cd-4157-9a35-a60fb77694a9" index="211" run="211" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct302"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 128, 1, 0, 1, 1, 1, 0, 128, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[1] = 128;
ints[2] = 1;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[8] = 128;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct302()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[1] = 128;
    ints[2] = 1;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[8] = 128;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 
                               array[0L] == array[4L] && array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && 
                                                                                                                                                                                           array[4L] == array[6L] && array[5L] == array[6L] && array[3L] == array[7L] && array[1L] == array[8L] && array[3L] == array[9L] && array[7L] == array[9L] && 10L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                       array[3L] == array[10L] && array[7L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[8L] != array[9L] && 
array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[8L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="0bf6f416-cf06-4ef7-9c46-8cb44aa86167" index="212" run="212" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct367"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 5, 0, 1, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 5;
ints[3] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct367()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 5;
    ints[3] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && array[0L] == array[4L] && array[3L] == array[4L] && 
                                                                                   5L < array.Length && array[2L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                      array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="f899b570-7a4d-49f1-8f44-87d85c8cbedd" index="213" run="213" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct453"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct453()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="86279c68-e3b9-41c8-b3b0-da6ee5aaa5da" index="214" run="214" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct388"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 128, 1, 0, 1, 1, 1, 0, 128}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 1;
ints[1] = 128;
ints[2] = 1;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[8] = 128;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct388()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 1;
    ints[1] = 128;
    ints[2] = 1;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[8] = 128;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && array[2L] == array[4L] && 
                                                                                   array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 
                                                                                                                                                                                                                                               array[3L] == array[7L] && 8L < array.Length && array[1L] == array[8L] && array.Length == 9L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                  array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && 
array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="1177d6cb-1158-459a-8da0-d5830eba67c9" index="215" run="215" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct87503"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=29; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[29];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct87503()
{
    int i;
    int[] ints = new int[29];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="a32859e3-bfc5-46e6-aa27-d1bf86ee0727" index="216" run="216" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct494"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
ints[27] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct494()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    ints[27] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="fa24331f-7206-480e-a937-6499f94dd5f9" index="217" run="217" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct493"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=25; 65, 0, 64, 64, 65, 65, 65, 64, 64, 64, 64, 64, 64, 64, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[25];
ints[0] = 65;
ints[2] = 64;
ints[3] = 64;
ints[4] = 65;
ints[5] = 65;
ints[6] = 65;
ints[7] = 64;
ints[8] = 64;
ints[9] = 64;
ints[10] = 64;
ints[11] = 64;
ints[12] = 64;
ints[13] = 64;
ints[14] = 65;
ints[24] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct493()
{
    int i;
    int[] ints = new int[25];
    ints[0] = 65;
    ints[2] = 64;
    ints[3] = 64;
    ints[4] = 65;
    ints[5] = 65;
    ints[6] = 65;
    ints[7] = 64;
    ints[8] = 64;
    ints[9] = 64;
    ints[10] = 64;
    ints[11] = 64;
    ints[12] = 64;
    ints[13] = 64;
    ints[14] = 65;
    ints[24] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="2bf0dc4d-4a99-4ffd-9dcf-8add31df15f9" index="218" run="218" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct162"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 1, 0, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 2;
ints[2] = 1;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct162()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 2;
    ints[2] = 1;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 4L < array.Length && array[1L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6614c11e-f9af-4c3c-8d8b-3f283ec0c2d7" index="219" run="219" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct98"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct98()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 
                               array[0L] == array[3L] && array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && 
                                                                                                                                                                                           array[5L] == array[6L] && array[1L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && array[1L] == array[8L] && array[4L] == array[8L] && 
                                                                                                                                                                                                                                                                                                                                                       array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && array[1L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[7L] == array[9L] && array[8L] == array[9L] && 10L < array.Length && array[1L] == array[10L] && array[4L] == array[10L] && array[5L] == array[10L] && array[6L] == array[10L] && 
array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && 
array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && 
array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[0L] != array[8L] && array[2L] != array[8L] && 
array[3L] != array[8L] && array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="a7d84b28-8d12-4cb4-b47c-da878eadbede" index="220" run="220" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct996"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct996()
{
    int i;
    int[] ints = new int[22];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="59400a16-3413-4135-96ff-5b02d30c0b78" index="221" run="221" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct843"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct843()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && 
                                                         array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 
                                                                                                                                                                                                                     7L < array.Length && array[1L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && array.Length == 8L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && 
array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="5469247d-7cb4-4d86-960a-86dde9079aa2" index="222" run="222" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct766"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct766()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="fdadd4d1-3803-4d39-9243-77444dfa1545" index="223" run="223" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct360"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 1, 4, 1, 4}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 5;
ints[1] = 1;
ints[2] = 4;
ints[3] = 1;
ints[4] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct360()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 5;
    ints[1] = 1;
    ints[2] = 4;
    ints[3] = 1;
    ints[4] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[3L] && 4L < array.Length && array[2L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="4d4aa471-db44-4628-af1a-ae4c04a44ad5" index="224" run="224" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct560"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 0, 1, 1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct560()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                                                                       array[2L] == array[3L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[0L] == array[6L] && array[1L] == array[6L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[6L] && array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[7L] && array[4L] == array[8L] && array[7L] == array[8L] && 9L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[4L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && 
array[3L] != array[4L] && array[4L] != array[5L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && 
array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="0ba63728-2050-4d11-b2e4-01f5707fda74" index="225" run="225" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct488"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct488()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 
                                                                                   array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[7L] && 
                                                                                                                                                                                                                                               array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && 8L < array.Length && array[1L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                      array[6L] == array[8L] && array[7L] == array[8L] && array.Length == 9L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && 
array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          array[3L] != array[6L] && array[0L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6d729b88-0a36-4b46-a40b-d98db24c7459" index="226" run="226" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct129"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 0, 64, 1, 1, 0, 0, 0, 1, 1, 1, 64, 1, 64}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[1] = 64;
ints[2] = 1;
ints[3] = 1;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 64;
ints[11] = 1;
ints[12] = 64;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct129()
{
    int i;
    int[] ints = new int[13];
    ints[1] = 64;
    ints[2] = 1;
    ints[3] = 1;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 64;
    ints[11] = 1;
    ints[12] = 64;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && 
                                                                                                                                                                                                                                               array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[1L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[2L] == array[11L] && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && 12L < array.Length && array[1L] == array[12L] && 
array[10L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && 
array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && 
array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && 
array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L] && array[9L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && 
array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[10L] != array[11L] && array[0L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && array[8L] != array[12L] && array[9L] != array[12L] && array[11L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="997a507a-c3b9-4d6c-81d2-778936ccb502" index="227" run="227" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct365"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=29; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[29];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
ints[27] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct365()
{
    int i;
    int[] ints = new int[29];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    ints[27] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="cda93481-19d6-4985-99a8-db0f4d4dc690" index="228" run="228" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct658"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct658()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="0c414423-8a4e-4608-83d4-4151314e0374" index="229" run="229" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct50401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 0, 1, 1, 3, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 2;
ints[2] = 1;
ints[3] = 1;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct50401()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 2;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 5L < array.Length && array[1L] == array[5L] && 
                                                                              array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                      array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="64e83ca7-a646-4cec-9df1-b6c3c5d10be0" index="230" run="230" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct607"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=26; 65, 0, 64, 64, 65, 65, 65, 64, 64, 64, 64, 64, 64, 64, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[26];
ints[0] = 65;
ints[2] = 64;
ints[3] = 64;
ints[4] = 65;
ints[5] = 65;
ints[6] = 65;
ints[7] = 64;
ints[8] = 64;
ints[9] = 64;
ints[10] = 64;
ints[11] = 64;
ints[12] = 64;
ints[13] = 64;
ints[14] = 65;
ints[24] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct607()
{
    int i;
    int[] ints = new int[26];
    ints[0] = 65;
    ints[2] = 64;
    ints[3] = 64;
    ints[4] = 65;
    ints[5] = 65;
    ints[6] = 65;
    ints[7] = 64;
    ints[8] = 64;
    ints[9] = 64;
    ints[10] = 64;
    ints[11] = 64;
    ints[12] = 64;
    ints[13] = 64;
    ints[14] = 65;
    ints[24] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a13a7ea3-3ba5-477c-b7df-ed6de25caeb9" index="231" run="231" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct684"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 128, 1, 0, 1, 1, 1, 0, 128, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
ints[1] = 128;
ints[2] = 1;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[8] = 128;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct684()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    ints[1] = 128;
    ints[2] = 1;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[8] = 128;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                       array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[3L] == array[7L] && array[1L] == array[8L] && 
                                                                                                                                                                                                                                                                                                   9L < array.Length && array[3L] == array[9L] && array[7L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && 
array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[8L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d412791f-7e4f-4bbd-a0a8-c9e96f0e37a8" index="232" run="232" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct554"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct554()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && 
                                                                                                                                       array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && 
                                                                                                                                                                                                                                                                                                   array[6L] == array[7L] && array[1L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && array[1L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[1L] == array[10L] && array[4L] == array[10L] && 
array[5L] == array[10L] && array[6L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && 11L < array.Length && array[1L] == array[11L] && 
array[4L] == array[11L] && array[5L] == array[11L] && array[6L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 
array.Length == 12L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
array[2L] != array[7L] && array[3L] != array[7L] && array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[0L] != array[9L] && array[2L] != array[9L] && 
array[3L] != array[9L] && array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[0L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="ce090fb0-fe27-479c-8798-c83b086b3ef3" index="233" run="233" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct659"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct659()
{
    int i;
    int[] ints = new int[22];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9fd125c5-3b5d-4e23-b628-7d76a5fb1541" index="234" run="234" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct358"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 1, 1, 4, 4, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 5;
ints[1] = 1;
ints[2] = 1;
ints[3] = 4;
ints[4] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct358()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 5;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 4;
    ints[4] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[3L] == array[4L] && 5L < array.Length && 
                                                                                   array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                           array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d1a0aaa9-d631-4679-a590-5391d00571e0" index="235" run="235" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct551"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct551()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && 
                                                                                                                                       array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && 
                                                                                                                                                                                                                                                                                                   array[6L] == array[7L] && array[1L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && 9L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[1L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && 
array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[2L] != array[7L] && 
array[3L] != array[7L] && array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="fea1f351-ae8a-4771-a569-e514b79083dc" index="236" run="236" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct534"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 8, 0, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 8, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 8;
ints[2] = 1;
ints[3] = 1;
ints[4] = 8;
ints[5] = 8;
ints[6] = 8;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 8;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct534()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 8;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 8;
    ints[5] = 8;
    ints[6] = 8;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 8;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="30754ae6-109b-4b47-b4b7-746ed35ddf99" index="237" run="237" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct89801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[4] = 1;
ints[5] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct89801()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 1;
    ints[5] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && 
                                                                                                                                                                                           array[2L] == array[4L] && array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 
                                                                                                                                                                                                                                                                                                                                                       array[6L] == array[7L] && array[6L] == array[8L] && array[7L] == array[8L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 10L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[6L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[6L] && array[1L] != array[6L] && 
array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && 
array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && 
array[4L] != array[8L] && array[5L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && 
array[5L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="53c16504-ca20-4623-b184-62ec3da0cfc6" index="238" run="238" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct434"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct434()
{
    int i;
    int[] ints = new int[21];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="e56cd6c5-db5b-479d-9da8-66de4548cf9b" index="239" run="239" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct812"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct812()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="0b34cd37-1a7a-4515-ad17-d99d0b66d2e2" index="240" run="240" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct292"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 1, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[4] = 1;
ints[5] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct292()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 1;
    ints[5] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && 
                                                                                                                                                                                                                     array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 7L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                 array[6L] == array[7L] && array.Length == 8L && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L] && 
array[5L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<boundary kind="maxconditions" value="500" message="maximum number of conditions exceeded"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<generatedTest id="125d34a8-212b-4ce0-9d6d-8c3f41c83b16" index="241" run="241" status="pathboundsexceeded" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct77"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=31; 256, 0, 1, 1, 256, 256, 256, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 256, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[31];
ints[0] = 256;
ints[2] = 1;
ints[3] = 1;
ints[4] = 256;
ints[5] = 256;
ints[6] = 256;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 1;
ints[16] = 1;
ints[17] = 1;
ints[18] = 1;
ints[19] = 1;
ints[20] = 1;
ints[21] = 1;
ints[22] = 1;
ints[23] = 1;
ints[24] = 1;
ints[25] = 1;
ints[26] = 1;
ints[27] = 256;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void countDistinct77()
{
    int i;
    int[] ints = new int[31];
    ints[0] = 256;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 256;
    ints[5] = 256;
    ints[6] = 256;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 1;
    ints[16] = 1;
    ints[17] = 1;
    ints[18] = 1;
    ints[19] = 1;
    ints[20] = 1;
    ints[21] = 1;
    ints[22] = 1;
    ints[23] = 1;
    ints[24] = 1;
    ints[25] = 1;
    ints[26] = 1;
    ints[27] = 256;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<boundaryCodeUpdate kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</boundaryCodeUpdate>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="86654768-f69c-4eba-ac19-92d75ac70cbd" index="242" run="242" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct43"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 5, 0, 4, 4, 5, 5, 5, 6, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct43()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[8L] && array[1L] == array[9L] && 
                                                                                                                                                                                                                     array[8L] == array[9L] && array[1L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[1L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                      array[10L] == array[11L] && array[1L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && array[11L] == array[12L] && 13L < array.Length && 
array[1L] == array[13L] && array[8L] == array[13L] && array[9L] == array[13L] && array[10L] == array[13L] && array[11L] == array[13L] && array[12L] == array[13L] && array.Length == 14L && 
array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && 
array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && 
array[0L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && 
array[0L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && 
array[0L] != array[13L] && array[2L] != array[13L] && array[3L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && array[6L] != array[13L] && array[7L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="dd2a244d-0ccf-43c8-90c6-ffde0f7630e8" index="243" run="243" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct55"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=27; 65, 0, 64, 64, 65, 65, 65, 64, 64, 64, 64, 64, 64, 64, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[27];
ints[0] = 65;
ints[2] = 64;
ints[3] = 64;
ints[4] = 65;
ints[5] = 65;
ints[6] = 65;
ints[7] = 64;
ints[8] = 64;
ints[9] = 64;
ints[10] = 64;
ints[11] = 64;
ints[12] = 64;
ints[13] = 64;
ints[14] = 65;
ints[24] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct55()
{
    int i;
    int[] ints = new int[27];
    ints[0] = 65;
    ints[2] = 64;
    ints[3] = 64;
    ints[4] = 65;
    ints[5] = 65;
    ints[6] = 65;
    ints[7] = 64;
    ints[8] = 64;
    ints[9] = 64;
    ints[10] = 64;
    ints[11] = 64;
    ints[12] = 64;
    ints[13] = 64;
    ints[14] = 65;
    ints[24] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="bfd59156-0763-4939-9c31-5c6ae0a1af04" index="244" run="244" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct46801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 1, 1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[4] = 1;
ints[5] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct46801()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 1;
    ints[5] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 
                                                                                   array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && 
                                                                                                                                                                                                                                               array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[6L] == array[7L] && 8L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[6L] == array[8L] && array[7L] == array[8L] && array.Length == 9L && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[4L] != array[6L] && array[5L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && 
array[5L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="db8e703b-49be-4ee5-8e35-ebd1b5857c13" index="245" run="245" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct175"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{33, 65, 1, 0, 64, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 33;
ints[1] = 65;
ints[2] = 1;
ints[4] = 64;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct175()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 33;
    ints[1] = 65;
    ints[2] = 1;
    ints[4] = 64;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 5L < array.Length && array[3L] == array[5L] && array.Length == 6L && 
                                                                              array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                          array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="21af1770-80b2-4188-beee-53bb18e490be" index="246" run="246" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct41"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=24; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[24];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct41()
{
    int i;
    int[] ints = new int[24];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="00161df2-7ade-4eed-a491-d27f6b5cbfc2" index="247" run="247" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct865"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=25; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[25];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct865()
{
    int i;
    int[] ints = new int[25];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="e0a432e0-6278-4a31-abb2-d0a779f2b464" index="248" run="248" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct16301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
ints[27] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct16301()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    ints[27] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="3aba00db-96cd-4d06-8d56-79c750189145" index="249" run="249" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct67"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 2, 1, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct67()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && 
                                                         array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && 
                                                                                                                                                                                                                     array[5L] == array[6L] && array[3L] == array[7L] && array[3L] == array[8L] && array[7L] == array[8L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                 array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && 
array[9L] == array[11L] && array[10L] == array[11L] && array[3L] == array[12L] && array[7L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && 
array[11L] == array[12L] && 13L < array.Length && array[3L] == array[13L] && array[7L] == array[13L] && array[8L] == array[13L] && array[9L] == array[13L] && array[10L] == array[13L] && 
array[11L] == array[13L] && array[12L] == array[13L] && array.Length == 14L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && 
array[1L] != array[8L] && array[2L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && 
array[2L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && 
array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[2L] != array[11L] && array[4L] != array[11L] && 
array[5L] != array[11L] && array[6L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[2L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && 
array[6L] != array[12L] && array[0L] != array[13L] && array[1L] != array[13L] && array[2L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && array[6L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="518609b4-f49a-45b5-a277-8f2938036d73" index="250" run="250" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct790"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 65, 0, 64, 64, 65, 65, 65, 64, 64, 64, 64, 64, 64, 64, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 65;
ints[2] = 64;
ints[3] = 64;
ints[4] = 65;
ints[5] = 65;
ints[6] = 65;
ints[7] = 64;
ints[8] = 64;
ints[9] = 64;
ints[10] = 64;
ints[11] = 64;
ints[12] = 64;
ints[13] = 64;
ints[14] = 65;
ints[24] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct790()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 65;
    ints[2] = 64;
    ints[3] = 64;
    ints[4] = 65;
    ints[5] = 65;
    ints[6] = 65;
    ints[7] = 64;
    ints[8] = 64;
    ints[9] = 64;
    ints[10] = 64;
    ints[11] = 64;
    ints[12] = 64;
    ints[13] = 64;
    ints[14] = 65;
    ints[24] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="97db2427-bcae-40e0-a71b-caaad99a05ec" index="251" run="251" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct11701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 0, 0, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 2;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct11701()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 4L < array.Length && array[1L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="9f1b0a54-d396-4b61-9cbb-db4f7d7cffa1" index="252" run="252" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct108"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct108()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 
                                                                                   array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[7L] && 
                                                                                                                                                                                                                                               array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && array[1L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[7L] == array[8L] && array[1L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 
array[1L] == array[10L] && array[4L] == array[10L] && array[5L] == array[10L] && array[6L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && 
array[1L] == array[11L] && array[4L] == array[11L] && array[5L] == array[11L] && array[6L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && 
array[10L] == array[11L] && 12L < array.Length && array[1L] == array[12L] && array[4L] == array[12L] && array[5L] == array[12L] && array[6L] == array[12L] && array[7L] == array[12L] && 
array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && array[11L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && array[1L] != array[2L] && 
array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[0L] != array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                array[2L] != array[8L] && array[3L] != array[8L] && array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[0L] != array[10L] && array[2L] != array[10L] && 
array[3L] != array[10L] && array[0L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[0L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="510bdea0-2126-402d-b724-3a579cd19e61" index="253" run="253" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct557"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 1, 1, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[4] = 1;
ints[5] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct557()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 1;
    ints[5] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                                                                       array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[6L] == array[7L] && array[6L] == array[8L] && array[7L] == array[8L] && 9L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && 
array[3L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    array[4L] != array[7L] && array[5L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && 
array[5L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="fe35841e-2e62-4584-a02f-23487bace594" index="254" run="254" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException393"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 256, 0, 1, 512, 1, 256}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[1] = 256;
ints[3] = 1;
ints[4] = 512;
ints[5] = 1;
ints[6] = 256;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException393()
{
    int i;
    int[] ints = new int[7];
    ints[1] = 256;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 1;
    ints[6] = 256;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && 
                                                         6 < (int)(array.Length) && 6L < array.Length && array[1L] == array[6L] && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                 array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="32e75695-f14e-4fef-bda2-28aab9beedbb" index="255" run="255" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct268"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{16, 1, 16, 0, 64, 0, 1}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 16;
ints[1] = 1;
ints[2] = 16;
ints[4] = 64;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct268()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 16;
    ints[1] = 1;
    ints[2] = 16;
    ints[4] = 64;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && 
                                                         6L < array.Length && array[1L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                            array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="8450b8be-1e0c-4b15-8b2f-12a0e2f66452" index="256" run="256" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException685"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 1, 1, 4, 4, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 5;
ints[1] = 1;
ints[2] = 1;
ints[3] = 4;
ints[4] = 4;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException685()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 5;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 4;
    ints[4] = 4;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[3L] == array[4L] && 
                                                         6 < (int)(array.Length) && 6L < array.Length && array[5L] == array[6L] && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                 array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[3L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="4e02c811-3f3f-4a2c-b635-60de17c55290" index="257" run="257" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct77101"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{18, 2, 2, 0, 0, 1, 1}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 18;
ints[1] = 2;
ints[2] = 2;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct77101()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 18;
    ints[1] = 2;
    ints[2] = 2;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[3L] == array[4L] && 
                                                         6L < array.Length && array[5L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                            array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[3L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a4ce5c1c-8219-4e57-95b0-5ae96174e561" index="258" run="258" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct49"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct49()
{
    int i;
    int[] ints = new int[6];
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                   array[0L] == array[4L] && array[1L] == array[4L] && array[3L] == array[4L] && 5L < array.Length && array[0L] == array[5L] && array[1L] == array[5L] && array[3L] == array[5L] && 
                                                                                                                                                                                                                                          array[4L] == array[5L] && array.Length == 6L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[3L] && array[2L] != array[4L] && array[2L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="44acba06-76c3-465a-a93c-09974dea3b41" index="259" run="259" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct325"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[15] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct325()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[15] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="2a07759d-c279-45c9-8654-57c2337a11fa" index="260" run="260" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct628"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=27; 128, 16, 0, 0, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[27];
ints[0] = 128;
ints[1] = 16;
ints[4] = 128;
ints[5] = 128;
ints[6] = 128;
ints[26] = 128;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct628()
{
    int i;
    int[] ints = new int[27];
    ints[0] = 128;
    ints[1] = 16;
    ints[4] = 128;
    ints[5] = 128;
    ints[6] = 128;
    ints[26] = 128;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="863fb896-c013-4c7c-8ad0-efd05f9063d8" index="261" run="261" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct384"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct384()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="0c777d21-1cc5-41d1-bdcc-0168bf4e94b9" index="262" run="262" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct730"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct730()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                   array[2L] == array[4L] && 5L < array.Length && array[2L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="c8890a1e-c44a-4977-8d1b-7b2b839b53e3" index="263" run="263" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct880"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 512, 256, 512, 1, 0, 1, 1, 513, 0, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 512;
ints[1] = 256;
ints[2] = 512;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct880()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 512;
    ints[1] = 256;
    ints[2] = 512;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 
                               array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[8L] && array[4L] == array[9L] && array[8L] == array[9L] && 10L < array.Length && 
                                                                                                                                                                                           array[4L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                       array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && 
array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b1d07cc3-7662-4e7c-b775-27f91e6a8545" index="264" run="264" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct907"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{512, 256, 512, 1, 0, 1, 1, 513}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 512;
ints[1] = 256;
ints[2] = 512;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct907()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 512;
    ints[1] = 256;
    ints[2] = 512;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && 
                                                         array[3L] == array[6L] && array[5L] == array[6L] && 7L < array.Length && array.Length == 8L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                            array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="2059381a-a6eb-4fae-aa5f-e435f6dbfd69" index="265" run="265" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct497"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 1, 3}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[1] = 1;
ints[3] = 1;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct497()
{
    int i;
    int[] ints = new int[5];
    ints[1] = 1;
    ints[3] = 1;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[1L] == array[3L] && 4L < array.Length && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="fa10d2db-e778-4971-a561-0bfe2b2010ad" index="266" run="266" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct11301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=29; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[29];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct11301()
{
    int i;
    int[] ints = new int[29];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="bed9eb6c-9ff8-49d0-aa5d-9858d10210fb" index="267" run="267" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct16201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 128, 16, 0, 0, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 128;
ints[1] = 16;
ints[4] = 128;
ints[5] = 128;
ints[6] = 128;
ints[26] = 128;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct16201()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 128;
    ints[1] = 16;
    ints[4] = 128;
    ints[5] = 128;
    ints[6] = 128;
    ints[26] = 128;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="36aebcf7-bfe4-4def-b5b2-849e67ad597f" index="268" run="268" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct14302"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 4, 0, 37, 37, 4, 4, 4, 37, 37, 37, 37, 37, 37, 37, 37, 0, 37, 37, 37, 4}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 4;
ints[2] = 37;
ints[3] = 37;
ints[4] = 4;
ints[5] = 4;
ints[6] = 4;
ints[7] = 37;
ints[8] = 37;
ints[9] = 37;
ints[10] = 37;
ints[11] = 37;
ints[12] = 37;
ints[13] = 37;
ints[14] = 37;
ints[16] = 37;
ints[17] = 37;
ints[18] = 37;
ints[19] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct14302()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 4;
    ints[2] = 37;
    ints[3] = 37;
    ints[4] = 4;
    ints[5] = 4;
    ints[6] = 4;
    ints[7] = 37;
    ints[8] = 37;
    ints[9] = 37;
    ints[10] = 37;
    ints[11] = 37;
    ints[12] = 37;
    ints[13] = 37;
    ints[14] = 37;
    ints[16] = 37;
    ints[17] = 37;
    ints[18] = 37;
    ints[19] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="d593d01f-118a-4053-b5a1-e455654ca0a6" index="269" run="269" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct539"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct539()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="9e5a78ff-bba4-4b8a-9380-558d5a523db6" index="270" run="270" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct55401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct55401()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="3efdd4d2-624c-4581-894c-57842abc1f62" index="271" run="271" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct611"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct611()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="e6a79b41-f433-4e3f-91fc-2370f0e2f2ce" index="272" run="272" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct63201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct63201()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b6ae3ec2-6453-49da-bfa2-d8a269c6c809" index="273" run="273" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct11702"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{512, 256, 512, 1, 0, 1, 1, 513, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 512;
ints[1] = 256;
ints[2] = 512;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct11702()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 512;
    ints[1] = 256;
    ints[2] = 512;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && array[3L] == array[6L] && 
                                                                                   array[5L] == array[6L] && 8L < array.Length && array[4L] == array[8L] && array.Length == 9L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                      array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                                                  array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="da2db88f-e165-416a-8930-d751567e1688" index="274" run="274" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct682"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=24; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[24];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct682()
{
    int i;
    int[] ints = new int[24];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9c152ad9-fcd7-404c-b7bc-0e1eb3e53312" index="275" run="275" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct856"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 257, 256, 257, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 257;
ints[2] = 256;
ints[3] = 257;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct856()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 257;
    ints[2] = 256;
    ints[3] = 257;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[3L] && array[0L] == array[4L] && 5L < array.Length && 
                                                                                   array[0L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                           array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e4d2472f-9d1c-49a0-a4cd-d796c684d6cb" index="276" run="276" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct207"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 8, 0, 16, 1, 1}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 8;
ints[3] = 16;
ints[4] = 1;
ints[5] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct207()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 8;
    ints[3] = 16;
    ints[4] = 1;
    ints[5] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 5L < array.Length && array[4L] == array[5L] && 
                                                                              array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                      array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="77614125-7fac-4735-9508-898b37158829" index="277" run="277" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct4601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 0, 64, 1, 1, 0, 0, 0, 1, 1, 1, 64, 1, 64, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[1] = 64;
ints[2] = 1;
ints[3] = 1;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 64;
ints[11] = 1;
ints[12] = 64;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct4601()
{
    int i;
    int[] ints = new int[14];
    ints[1] = 64;
    ints[2] = 1;
    ints[3] = 1;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 64;
    ints[11] = 1;
    ints[12] = 64;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && 
                                                                                                                                                                                                                     array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                 array[1L] == array[10L] && array[2L] == array[11L] && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[1L] == array[12L] && 
array[10L] == array[12L] && 13L < array.Length && array[0L] == array[13L] && array[4L] == array[13L] && array[5L] == array[13L] && array[6L] == array[13L] && array.Length == 14L && 
array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && 
array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && 
array[6L] != array[9L] && array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && 
array[7L] != array[10L] && array[8L] != array[10L] && array[9L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && 
array[6L] != array[11L] && array[10L] != array[11L] && array[0L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && 
array[6L] != array[12L] && array[7L] != array[12L] && array[8L] != array[12L] && array[9L] != array[12L] && array[11L] != array[12L] && array[1L] != array[13L] && array[2L] != array[13L] && 
array[3L] != array[13L] && array[7L] != array[13L] && array[8L] != array[13L] && array[9L] != array[13L] && array[10L] != array[13L] && array[11L] != array[13L] && array[12L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="e4213883-3ec1-409b-8daa-1f18fdd58e94" index="278" run="278" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct455"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 256, 1, 0, 0, 256, 256, 256, 0, 0, 0, 0, 0, 0, 0, 0, 256, 256}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 256;
ints[1] = 1;
ints[4] = 256;
ints[5] = 256;
ints[6] = 256;
ints[15] = 256;
ints[16] = 256;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct455()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 256;
    ints[1] = 1;
    ints[4] = 256;
    ints[5] = 256;
    ints[6] = 256;
    ints[15] = 256;
    ints[16] = 256;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="41f89b1c-e725-413a-a574-875dfbb88e2a" index="279" run="279" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct507"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 8, 0, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 8, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 8;
ints[2] = 1;
ints[3] = 1;
ints[4] = 8;
ints[5] = 8;
ints[6] = 8;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 8;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct507()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 8;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 8;
    ints[5] = 8;
    ints[6] = 8;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 8;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="611ea813-e7ae-4c02-9100-9367cbd09e70" index="280" run="280" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct699"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{512, 256, 512, 1, 0, 1, 1, 513, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 512;
ints[1] = 256;
ints[2] = 512;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct699()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 512;
    ints[1] = 256;
    ints[2] = 512;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[8L] && 
                                                                                                                                       9L < array.Length && array[4L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                           array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="072d6091-ed2f-4771-a157-42aa21d7cd25" index="281" run="281" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException733"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException733()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && 
                                                         array[2L] == array[4L] && array[3L] == array[4L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 6 < (int)(array.Length) && 6L < array.Length && 
                                                                                                                                                                                                                      array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                  array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7325036d-c1f2-4337-b6f8-96279d5b872a" index="282" run="282" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct25701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct25701()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && 
                                                         array[2L] == array[4L] && array[3L] == array[4L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 6L < array.Length && array[2L] == array[6L] && 
                                                                                                                                                                                                                array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array.Length == 7L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7704a4fb-e184-4e49-9f02-f6f9cb48a7c6" index="283" run="283" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct77102"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 2, 1, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[2] = 2;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct77102()
{
    int i;
    int[] ints = new int[6];
    ints[2] = 2;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[4L] && array[1L] == array[4L] && 
                                                                                   5L < array.Length && array[0L] == array[5L] && array[1L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[2L] != array[4L] && array[3L] != array[4L] && array[2L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="70f3e5dc-2726-46db-9c64-3ee8808928c7" index="284" run="284" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct68"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 4, 0, 37, 37, 4, 4, 4, 37, 37, 37, 37, 37, 37, 37, 37, 0, 37, 37, 37, 4, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[0] = 4;
ints[2] = 37;
ints[3] = 37;
ints[4] = 4;
ints[5] = 4;
ints[6] = 4;
ints[7] = 37;
ints[8] = 37;
ints[9] = 37;
ints[10] = 37;
ints[11] = 37;
ints[12] = 37;
ints[13] = 37;
ints[14] = 37;
ints[16] = 37;
ints[17] = 37;
ints[18] = 37;
ints[19] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct68()
{
    int i;
    int[] ints = new int[21];
    ints[0] = 4;
    ints[2] = 37;
    ints[3] = 37;
    ints[4] = 4;
    ints[5] = 4;
    ints[6] = 4;
    ints[7] = 37;
    ints[8] = 37;
    ints[9] = 37;
    ints[10] = 37;
    ints[11] = 37;
    ints[12] = 37;
    ints[13] = 37;
    ints[14] = 37;
    ints[16] = 37;
    ints[17] = 37;
    ints[18] = 37;
    ints[19] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3ccf7f1a-509c-43a9-949d-92af0c6bfc9f" index="285" run="285" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException770"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{33, 65, 1, 0, 64, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 33;
ints[1] = 65;
ints[2] = 1;
ints[4] = 64;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException770()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 33;
    ints[1] = 65;
    ints[2] = 1;
    ints[4] = 64;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && 6 < (int)(array.Length) && 
                                                         6L < array.Length && array[3L] == array[6L] && array[5L] == array[6L] && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                            array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="843f46a6-138b-4bae-a1f7-c19827214ca0" index="286" run="286" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct651"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{32, 8, 128, 1, 0, 1, 1}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 32;
ints[1] = 8;
ints[2] = 128;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct651()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 32;
    ints[1] = 8;
    ints[2] = 128;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && 6L < array.Length && 
                                                         array[3L] == array[6L] && array[5L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                 array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="5b5b5afc-2bb1-42db-9263-d24421d7fe15" index="287" run="287" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct382"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=25; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[25];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct382()
{
    int i;
    int[] ints = new int[25];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="eccab898-5ad2-434a-928d-856cfe1e22d0" index="288" run="288" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct16302"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct16302()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[2L] == array[3L] && array[2L] == array[4L] && array[3L] == array[4L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[2L] == array[6L] && 
                                                                                                                                                                                           array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && 
                                                                                                                                                                                                                                                                                                                                                       array[6L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[2L] == array[9L] && array[3L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               10L < array.Length && array[2L] == array[10L] && array[3L] == array[10L] && array[4L] == array[10L] && array[5L] == array[10L] && array[6L] == array[10L] && array[7L] == array[10L] && 
array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
array[0L] != array[4L] && array[1L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[0L] != array[7L] && 
array[1L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="dda5e0f2-f97a-4631-9f72-f4607facb22e" index="289" run="289" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct634"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct634()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && 
                                                         array[2L] == array[4L] && array[3L] == array[4L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[2L] == array[6L] && array[3L] == array[6L] && 
                                                                                                                                                                                                                     array[4L] == array[6L] && array[5L] == array[6L] && 7L < array.Length && array[2L] == array[7L] && array[3L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && 
                                                                                                                                                                                                                                                                                                                                                                            array[6L] == array[7L] && array.Length == 8L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && 
array[1L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="596b66fb-ee5d-444c-b8dd-5d9ec9ac0f29" index="290" run="290" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct178"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct178()
{
    int i;
    int[] ints = new int[22];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="8976579c-80aa-4515-bbb2-e5d16134da85" index="291" run="291" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct936"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[11];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct936()
{
    int i;
    int[] ints = new int[11];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && 
                                                                                                                                                                                           array[2L] == array[4L] && array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 
                                                                                                                                                                                                                                                                                                                                                       array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[1L] == array[7L] && array[2L] == array[7L] && array[3L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && array[0L] == array[8L] && 
array[1L] == array[8L] && array[2L] == array[8L] && array[3L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && 
array[0L] == array[9L] && array[1L] == array[9L] && array[2L] == array[9L] && array[3L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[7L] == array[9L] && array[8L] == array[9L] && 10L < array.Length && array[0L] == array[10L] && array[1L] == array[10L] && array[2L] == array[10L] && array[3L] == array[10L] && 
array[4L] == array[10L] && array[5L] == array[10L] && array[6L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5decae99-11ce-4ccf-9c8f-bcf0f0c793f4" index="292" run="292" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct76101"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[8];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct76101()
{
    int i;
    int[] ints = new int[8];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && 
                                                                                                                                                                                                                     array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                 array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 7L < array.Length && array[0L] == array[7L] && 
array[1L] == array[7L] && array[2L] == array[7L] && array[3L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && array.Length == 8L;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:29:03Z" category="progress" message="  750 constraint systems (38.93% solved, 61.07% proven unsatisfiable), flipping location Question.countDistinct(Int32[]) at 0x0052 took 2s (62.13%)"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1f696624-cac6-426c-ab7f-46b89eae178c" index="293" run="293" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct926"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 1, 3, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 1;
ints[3] = 1;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct926()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 1;
    ints[3] = 1;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[1L] == array[3L] && 5L < array.Length && 
                                                                                   array[0L] == array[5L] && array[2L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && 
                                                                                                                                                                                                                                           array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="4d54b5a5-1454-4efe-a817-93b631aa4c2f" index="294" run="294" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct438"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 2, 1, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct438()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="68ae25f5-4b31-4c4d-a844-f20f90b6b76b" index="295" run="295" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct294"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct294()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="48699640-8a53-4747-8fbd-1996e96db792" index="296" run="296" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct910"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct910()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="c9489b25-7b59-4784-8c6d-5a599be294ae" index="297" run="297" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct98201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 1, 4, 1, 4, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 5;
ints[1] = 1;
ints[2] = 4;
ints[3] = 1;
ints[4] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct98201()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 5;
    ints[1] = 1;
    ints[2] = 4;
    ints[3] = 1;
    ints[4] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[3L] && array[2L] == array[4L] && 5L < array.Length && 
                                                                                   array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                           array[1L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="6257f52a-de7f-4a39-a3fa-d7033f6dc5bc" index="298" run="298" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct839"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 5, 6, 1, 1, 5, 5, 5, 4, 4, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 5;
ints[1] = 6;
ints[2] = 1;
ints[3] = 1;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 4;
ints[8] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct839()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 5;
    ints[1] = 6;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 4;
    ints[8] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 
                               array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[7L] == array[8L] && 
                                                                                                                                                                                           10L < array.Length && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                 array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && 
array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && 
array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && 
array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="56985b3d-cae7-4f8b-80b1-1d8ceb481edc" index="299" run="299" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct826"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct826()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && array[2L] == array[4L] && 
                                                                                   array[3L] == array[4L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && 
                                                                                                                                                                                                                                               array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && 8L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[2L] == array[8L] && array[3L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && array.Length == 9L && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[0L] != array[5L] && 
array[1L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="b78d44bc-4b07-46c8-8de1-4c1f024055e4" index="300" run="300" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct869"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 512, 64, 0, 0, 512, 512, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 64, 64, 1}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 512;
ints[1] = 64;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[18] = 1;
ints[19] = 64;
ints[20] = 64;
ints[21] = 64;
ints[22] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct869()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 512;
    ints[1] = 64;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[18] = 1;
    ints[19] = 64;
    ints[20] = 64;
    ints[21] = 64;
    ints[22] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="0657ab8a-c455-4284-9f47-93ab089ecbe6" index="301" run="301" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct39"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=26; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[26];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct39()
{
    int i;
    int[] ints = new int[26];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7d684ba2-b9ee-4b45-92ec-327dbcc2b05f" index="302" run="302" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct5"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct5()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                                                                       array[2L] == array[3L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[0L] == array[6L] && array[1L] == array[6L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[6L] && array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[7L] && array[4L] == array[8L] && array[7L] == array[8L] && array[4L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[7L] == array[9L] && array[8L] == array[9L] && array[4L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && 11L < array.Length && 
array[4L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && array.Length == 12L && array[0L] != array[4L] && 
array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[4L] != array[5L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && 
array[2L] != array[7L] && array[3L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && 
array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && 
array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[5L] != array[10L] && 
array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="d04d4243-fa50-4027-a9a9-916f05dc4e12" index="303" run="303" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct644"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 2, 1, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct644()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="fd2161a7-9a49-42b3-ba5e-173d69528bf6" index="304" run="304" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct919"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[9];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct919()
{
    int i;
    int[] ints = new int[9];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 
                                                                                   array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && 
                                                                                                                                                                                                                                               array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[1L] == array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && array[1L] == array[7L] && array[2L] == array[7L] && 
array[3L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && 8L < array.Length && array[0L] == array[8L] && array[1L] == array[8L] && 
array[2L] == array[8L] && array[3L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && array.Length == 9L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="22ad3578-35a6-4a88-97f5-1021d810aeb0" index="305" run="305" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct368"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 0, 0, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 2;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct368()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[1L] == array[4L] && 5L < array.Length && 
                                                                                   array[2L] == array[5L] && array[3L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                           array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="bb572158-9d8e-4f66-9a2d-f7db91106942" index="306" run="306" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct85"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct85()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="50c3752d-ec6a-4b85-99b0-606b61c7e93d" index="307" run="307" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException285"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0, 1}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException285()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && 
                                                         array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && 6 < (int)(array.Length) && 6L < array.Length && array[0L] == array[6L] && 
                                                                                                                                                                                                                 array[2L] == array[6L] && array[3L] == array[6L] && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d43fc84c-7c89-45d5-8ba5-30ae2cd73669" index="308" run="308" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct99501"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 0, 1, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[1] = 1;
ints[4] = 1;
ints[5] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct99501()
{
    int i;
    int[] ints = new int[7];
    ints[1] = 1;
    ints[4] = 1;
    ints[5] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && 
                                                         array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && 6L < array.Length && array[0L] == array[6L] && array[2L] == array[6L] && 
                                                                                                                                                                                                                array[3L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="f549b820-11ba-4da5-b4d4-80b4667a592a" index="309" run="309" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct708"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 1, 128, 129, 129, 1, 1, 1, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 133, 128, 128, 128, 160}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 1;
ints[1] = 128;
ints[2] = 129;
ints[3] = 129;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 129;
ints[8] = 129;
ints[9] = 129;
ints[10] = 129;
ints[11] = 129;
ints[12] = 129;
ints[13] = 129;
ints[14] = 129;
ints[15] = 129;
ints[16] = 129;
ints[17] = 129;
ints[18] = 133;
ints[19] = 128;
ints[20] = 128;
ints[21] = 128;
ints[22] = 160;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct708()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 1;
    ints[1] = 128;
    ints[2] = 129;
    ints[3] = 129;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 129;
    ints[8] = 129;
    ints[9] = 129;
    ints[10] = 129;
    ints[11] = 129;
    ints[12] = 129;
    ints[13] = 129;
    ints[14] = 129;
    ints[15] = 129;
    ints[16] = 129;
    ints[17] = 129;
    ints[18] = 133;
    ints[19] = 128;
    ints[20] = 128;
    ints[21] = 128;
    ints[22] = 160;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a14301ab-9b96-417e-9352-6db819ea7845" index="310" run="310" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct38801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 6, 0, 0, 2}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 1;
ints[2] = 6;
ints[5] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct38801()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 1;
    ints[2] = 6;
    ints[5] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && array[0L] == array[4L] && array[3L] == array[4L] && 
                                                                                   5L < array.Length && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && 
                                                                                                                                                                                                                                      array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7c1db1ce-8125-44d7-b845-73770689d1ed" index="311" run="311" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException144"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 6, 0, 0, 2, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[1] = 1;
ints[2] = 6;
ints[5] = 2;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException144()
{
    int i;
    int[] ints = new int[7];
    ints[1] = 1;
    ints[2] = 6;
    ints[5] = 2;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && array[0L] == array[4L] && 
                                                         array[3L] == array[4L] && 6 < (int)(array.Length) && 6L < array.Length && array[0L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[0L] != array[1L] && 
                                                                                                                                                                                                                 array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="bb3a2af6-3f11-46fe-836d-e3bae5e82a2c" index="312" run="312" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct68201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 8, 2, 1, 1, 0, 1}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 8;
ints[2] = 2;
ints[3] = 1;
ints[4] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct68201()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 8;
    ints[2] = 2;
    ints[3] = 1;
    ints[4] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && array[0L] == array[4L] && 
                                                         array[3L] == array[4L] && 6L < array.Length && array[0L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && 
                                                                                                                                                                                                            array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="aa3fa937-c31e-4dd8-9fc4-5b37e2cdd5d7" index="313" run="313" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct377"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=27; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[27];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct377()
{
    int i;
    int[] ints = new int[27];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<boundary kind="maxconditions" value="500" message="maximum number of conditions exceeded"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<generatedTest id="90f70812-92d6-48c6-9536-eebc5749efc8" index="314" run="314" status="pathboundsexceeded" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct649"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=31; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[31];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void countDistinct649()
{
    int i;
    int[] ints = new int[31];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<boundaryCodeUpdate kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</boundaryCodeUpdate>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="62b8e01c-18d2-4b99-9255-c1ecc8d2c946" index="315" run="315" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct500"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 1, 0, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 2;
ints[2] = 1;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct500()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 2;
    ints[2] = 1;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[1L] == array[4L] && 5L < array.Length && 
                                                                                   array[3L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && 
                                                                                                                                                                                                                                           array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="f73ed068-d229-449b-b4f1-cd36264bd63a" index="316" run="316" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct715"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 6, 1, 1, 5, 5, 5, 4, 4}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 5;
ints[1] = 6;
ints[2] = 1;
ints[3] = 1;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 4;
ints[8] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct715()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 5;
    ints[1] = 6;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 4;
    ints[8] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 8L < array.Length && array[7L] == array[8L] && array.Length == 9L && 
                                                                                                                                                                                                                                          array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                      array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="448e91d4-7008-4577-9e51-1b27dc00361d" index="317" run="317" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct32801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 0, 16, 17, 17, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[1] = 16;
ints[2] = 17;
ints[3] = 17;
ints[7] = 17;
ints[8] = 17;
ints[9] = 17;
ints[10] = 17;
ints[11] = 17;
ints[12] = 17;
ints[13] = 17;
ints[14] = 17;
ints[15] = 17;
ints[16] = 17;
ints[17] = 17;
ints[18] = 17;
ints[19] = 17;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct32801()
{
    int i;
    int[] ints = new int[22];
    ints[1] = 16;
    ints[2] = 17;
    ints[3] = 17;
    ints[7] = 17;
    ints[8] = 17;
    ints[9] = 17;
    ints[10] = 17;
    ints[11] = 17;
    ints[12] = 17;
    ints[13] = 17;
    ints[14] = 17;
    ints[15] = 17;
    ints[16] = 17;
    ints[17] = 17;
    ints[18] = 17;
    ints[19] = 17;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="b56d993e-8d6a-491b-a09b-13fbdca3f53a" index="318" run="318" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct980"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 5, 0, 4, 4, 5, 5, 5, 6, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct980()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="82d783db-a7a7-456c-a78f-21afb187f152" index="319" run="319" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct81"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[10];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct81()
{
    int i;
    int[] ints = new int[10];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                                                                       array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && array[1L] == array[7L] && array[2L] == array[7L] && array[3L] == array[7L] && array[4L] == array[7L] && 
array[5L] == array[7L] && array[6L] == array[7L] && array[0L] == array[8L] && array[1L] == array[8L] && array[2L] == array[8L] && array[3L] == array[8L] && array[4L] == array[8L] && 
array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && 9L < array.Length && array[0L] == array[9L] && array[1L] == array[9L] && array[2L] == array[9L] && 
array[3L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1b2ee909-bb26-4cec-b2b5-4c9ee1df3841" index="320" run="320" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct2201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 3, 1, 0, 2, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 3;
ints[1] = 3;
ints[2] = 1;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct2201()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 3;
    ints[1] = 3;
    ints[2] = 1;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 5L < array.Length && array[3L] == array[5L] && 
                                                                              array.Length == 6L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                      array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.03"/>
<boundary kind="maxconditions" value="500" message="maximum number of conditions exceeded"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<generatedTest id="b4d6ebbd-7f06-473d-9b06-3ed146f14b0b" index="321" run="321" status="pathboundsexceeded" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct61801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=31; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[31];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void countDistinct61801()
{
    int i;
    int[] ints = new int[31];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<boundaryCodeUpdate kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</boundaryCodeUpdate>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="274f62ce-e0aa-4ca4-96bd-dc000a960054" index="322" run="322" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct35801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=24; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[24];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct35801()
{
    int i;
    int[] ints = new int[24];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="07f2af71-d503-4f15-a7c9-479d03fb739a" index="323" run="323" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct252"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 1, 2, 8, 8, 1, 1, 1, 0, 1, 8, 8, 8, 8, 9}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 1;
ints[1] = 2;
ints[2] = 8;
ints[3] = 8;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[8] = 1;
ints[9] = 8;
ints[10] = 8;
ints[11] = 8;
ints[12] = 8;
ints[13] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct252()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 1;
    ints[1] = 2;
    ints[2] = 8;
    ints[3] = 8;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[8] = 1;
    ints[9] = 8;
    ints[10] = 8;
    ints[11] = 8;
    ints[12] = 8;
    ints[13] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && array[4L] == array[8L] && 
                                                                                                                                                                                                                     array[5L] == array[8L] && array[6L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[2L] == array[10L] && array[3L] == array[10L] && array[9L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                   array[2L] == array[11L] && array[3L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && array[2L] == array[12L] && array[3L] == array[12L] && array[9L] == array[12L] && 
array[10L] == array[12L] && array[11L] == array[12L] && 13L < array.Length && array.Length == 14L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && 
array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && 
array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && 
array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && 
array[7L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && 
array[8L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && 
array[8L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && 
array[8L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && 
array[8L] != array[12L] && array[0L] != array[13L] && array[1L] != array[13L] && array[2L] != array[13L] && array[3L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && 
array[6L] != array[13L] && array[7L] != array[13L] && array[8L] != array[13L] && array[9L] != array[13L] && array[10L] != array[13L] && array[11L] != array[13L] && array[12L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="4f952bbe-9ad3-4b80-809a-1b828d6184ef" index="324" run="324" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct922"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 6, 1, 1, 5, 5, 5, 4, 4, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 5;
ints[1] = 6;
ints[2] = 1;
ints[3] = 1;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 4;
ints[8] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct922()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 5;
    ints[1] = 6;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 4;
    ints[8] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[7L] == array[8L] && 9L < array.Length && array.Length == 10L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                                                                                                                                                                                           array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && 
array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && 
array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="d644eb71-881a-4db9-8b16-37137aff6466" index="325" run="325" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct63401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 0, 64, 0, 1, 4, 1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct63401()
{
    int i;
    int[] ints = new int[12];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && 
                                                                                                                                       array[2L] == array[7L] && array[0L] == array[8L] && array[2L] == array[8L] && array[7L] == array[8L] && array[0L] == array[9L] && array[2L] == array[9L] && array[7L] == array[9L] && 
                                                                                                                                                                                                                                                                                                   array[8L] == array[9L] && array[0L] == array[10L] && array[2L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && 11L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    array[0L] == array[11L] && array[2L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && array.Length == 12L && 
array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && 
array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[1L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && 
array[6L] != array[7L] && array[1L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[1L] != array[9L] && 
array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[1L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && 
array[5L] != array[10L] && array[6L] != array[10L] && array[1L] != array[11L] && array[3L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="72c5c5bd-ff8d-43a8-afde-cf5fdcc5da76" index="326" run="326" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct45101"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 8, 0, 1, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 8;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct45101()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 8;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && array[2L] == array[4L] && 5L < array.Length && 
                                                                                   array[2L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                           array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="e38061f9-7aa2-40ea-b2f0-0778ca498532" index="327" run="327" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct890"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 32, 8, 128, 1, 0, 1, 1, 0, 0, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 32;
ints[1] = 8;
ints[2] = 128;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct890()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 32;
    ints[1] = 8;
    ints[2] = 128;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && 
                               array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[7L] && array[4L] == array[8L] && array[7L] == array[8L] && array[4L] == array[9L] && array[7L] == array[9L] && 
                                                                                                                                                                                           array[8L] == array[9L] && 10L < array.Length && array[4L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && 
                                                                                                                                                                                                                                                                                                                                                       array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && 
array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && 
array[3L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && 
array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[5L] != array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="461c71b6-5d02-4be1-b092-dbf6ec05fcf1" index="328" run="328" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct932"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{32, 8, 128, 1, 0, 1, 1, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 32;
ints[1] = 8;
ints[2] = 128;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct932()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 32;
    ints[1] = 8;
    ints[2] = 128;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && array[3L] == array[6L] && 
                                                         array[5L] == array[6L] && 7L < array.Length && array[4L] == array[7L] && array.Length == 8L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                                                                                                            array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && 
array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="e5315659-bb10-46e9-80fa-6de0b0b38bcf" index="329" run="329" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct882"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 5, 0, 4, 4, 5, 5, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct882()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="ba527b26-47b9-400e-a7b0-1001ed266783" index="330" run="330" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct754"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct754()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="16c37026-e591-490a-b748-5f93b90713ad" index="331" run="331" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct969"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{32, 8, 128, 1, 0, 1, 1, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 32;
ints[1] = 8;
ints[2] = 128;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct969()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 32;
    ints[1] = 8;
    ints[2] = 128;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && 
                                                                                   array[4L] == array[7L] && 8L < array.Length && array[4L] == array[8L] && array[7L] == array[8L] && array.Length == 9L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                                                                                                                                      array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                  array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && 
array[2L] != array[6L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[5L] != array[7L] && 
array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.03"/>
<generatedTest id="ba0890f1-fdcd-46dc-8851-0b7bff1ddddb" index="332" run="332" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct59801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 9, 8, 0, 0, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 12}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 9;
ints[1] = 8;
ints[4] = 9;
ints[5] = 9;
ints[6] = 9;
ints[14] = 9;
ints[15] = 8;
ints[16] = 8;
ints[17] = 8;
ints[18] = 8;
ints[19] = 8;
ints[20] = 8;
ints[21] = 8;
ints[22] = 8;
ints[23] = 8;
ints[24] = 8;
ints[25] = 8;
ints[26] = 8;
ints[27] = 8;
ints[28] = 8;
ints[29] = 12;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct59801()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 9;
    ints[1] = 8;
    ints[4] = 9;
    ints[5] = 9;
    ints[6] = 9;
    ints[14] = 9;
    ints[15] = 8;
    ints[16] = 8;
    ints[17] = 8;
    ints[18] = 8;
    ints[19] = 8;
    ints[20] = 8;
    ints[21] = 8;
    ints[22] = 8;
    ints[23] = 8;
    ints[24] = 8;
    ints[25] = 8;
    ints[26] = 8;
    ints[27] = 8;
    ints[28] = 8;
    ints[29] = 12;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="287340ee-4e38-4600-a0ac-2eeece63dd0a" index="333" run="333" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct65"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 0, 1, 129, 129, 0, 0, 0, 129, 129, 129, 129, 129, 129, 129, 129, 129, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[1] = 1;
ints[2] = 129;
ints[3] = 129;
ints[7] = 129;
ints[8] = 129;
ints[9] = 129;
ints[10] = 129;
ints[11] = 129;
ints[12] = 129;
ints[13] = 129;
ints[14] = 129;
ints[15] = 129;
ints[16] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct65()
{
    int i;
    int[] ints = new int[17];
    ints[1] = 1;
    ints[2] = 129;
    ints[3] = 129;
    ints[7] = 129;
    ints[8] = 129;
    ints[9] = 129;
    ints[10] = 129;
    ints[11] = 129;
    ints[12] = 129;
    ints[13] = 129;
    ints[14] = 129;
    ints[15] = 129;
    ints[16] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7051e4f3-48ce-4935-98ea-f46cc841f2ea" index="334" run="334" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct272"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 17, 25, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[2] = 17;
ints[3] = 25;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct272()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[2] = 17;
    ints[3] = 25;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && 
                                                                              array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                      array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="eb868b28-41d2-4165-8350-5c9c63da4b55" index="335" run="335" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct884"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 0, 64, 0, 1, 4, 1, 1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct884()
{
    int i;
    int[] ints = new int[13];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && array[3L] == array[6L] && 
                                                                                   array[5L] == array[6L] && array[0L] == array[7L] && array[2L] == array[7L] && array[0L] == array[8L] && array[2L] == array[8L] && array[7L] == array[8L] && array[0L] == array[9L] && 
                                                                                                                                                                                                                                               array[2L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[0L] == array[10L] && array[2L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                              array[9L] == array[10L] && array[0L] == array[11L] && array[2L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 
array.Length && array[0L] == array[12L] && array[2L] == array[12L] && array[7L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && 
array[11L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && 
array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && 
array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[1L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && 
array[6L] != array[8L] && array[1L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[1L] != array[10L] && 
array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[1L] != array[11L] && array[3L] != array[11L] && array[4L] != array[11L] && 
array[5L] != array[11L] && array[6L] != array[11L] && array[1L] != array[12L] && array[3L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="392b14a6-7c8c-4044-8717-fe18c2a2c333" index="336" run="336" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct35303"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct35303()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[1L] == array[3L] && array[1L] == array[4L] && 
                                                                                   array[3L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                      array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e405dde6-7a5a-42d0-bde2-9f618c9019c3" index="337" run="337" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct64401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct64401()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && array[2L] == array[4L] && array[3L] == array[4L] && array[2L] == array[5L] && 
                                                                                                                                       array[3L] == array[5L] && array[4L] == array[5L] && array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && 
                                                                                                                                                                                                                                                                                                   array[3L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[4L] == array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && 9L < array.Length && array[2L] == array[9L] && array[3L] == array[9L] && array[4L] == array[9L] && 
array[5L] == array[9L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[2L] && array[1L] != array[2L] && 
array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[0L] != array[6L] && 
array[1L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="53969716-ea3b-43fc-b2a1-2780f2ea49de" index="338" run="338" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct16202"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct16202()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="962e37c7-7c27-45fc-bb80-9e7803339c06" index="339" run="339" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct17801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 17, 0, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[2] = 17;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct17801()
{
    int i;
    int[] ints = new int[5];
    ints[2] = 17;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[3L] && array[1L] == array[3L] && 4L < array.Length && array.Length == 5L && 
                                                                                                                                  array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="89b0ac3d-9b4a-46c0-a7a2-6fceec84eac6" index="340" run="340" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct115"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 0, 64, 1, 1, 0, 0, 0, 1, 1, 1, 64, 1, 64, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[1] = 64;
ints[2] = 1;
ints[3] = 1;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 64;
ints[11] = 1;
ints[12] = 64;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct115()
{
    int i;
    int[] ints = new int[15];
    ints[1] = 64;
    ints[2] = 1;
    ints[3] = 1;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 64;
    ints[11] = 1;
    ints[12] = 64;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="79fc59e7-5b26-4092-b65b-13704aeb440f" index="341" run="341" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct914"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[15] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct914()
{
    int i;
    int[] ints = new int[21];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[15] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3140041b-3a1f-40de-beca-350ccd6586d4" index="342" run="342" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct140"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 17, 0, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[2] = 17;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct140()
{
    int i;
    int[] ints = new int[6];
    ints[2] = 17;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                   5L < array.Length && array[0L] == array[5L] && array[1L] == array[5L] && array[3L] == array[5L] && array.Length == 6L && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="4d649d63-d333-49f0-b59c-09b71a36f34a" index="343" run="343" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct135"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 0, 1, 0, 0, 1, 1, 1, 1, 1, 3, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[1] = 1;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 1;
ints[8] = 1;
ints[9] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct135()
{
    int i;
    int[] ints = new int[11];
    ints[1] = 1;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 
                               array[0L] == array[3L] && array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && 
                                                                                                                                                                                           array[5L] == array[6L] && array[1L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && array[1L] == array[8L] && array[4L] == array[8L] && 
                                                                                                                                                                                                                                                                                                                                                       array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && 10L < array.Length && array[0L] == array[10L] && array[2L] == array[10L] && array[3L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 array.Length == 11L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      array[2L] != array[7L] && array[3L] != array[7L] && array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && 
array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L] && 
array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L] && array[9L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="4afd8e30-3719-4f4f-be1d-d8f4a8100d0f" index="344" run="344" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct89802"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{32, 8, 128, 1, 0, 1, 1, 0, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 32;
ints[1] = 8;
ints[2] = 128;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct89802()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 32;
    ints[1] = 8;
    ints[2] = 128;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[7L] && array[4L] == array[8L] && 
                                                                                                                                       array[7L] == array[8L] && 9L < array.Length && array[4L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                                                                           array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && 
array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="208cbc5a-b07e-45ff-9fab-d252f3888741" index="345" run="345" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct63402"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 0, 16, 17, 17, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[1] = 16;
ints[2] = 17;
ints[3] = 17;
ints[7] = 17;
ints[8] = 17;
ints[9] = 17;
ints[10] = 17;
ints[11] = 17;
ints[12] = 17;
ints[13] = 17;
ints[14] = 17;
ints[15] = 17;
ints[16] = 17;
ints[17] = 17;
ints[18] = 17;
ints[19] = 17;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct63402()
{
    int i;
    int[] ints = new int[23];
    ints[1] = 16;
    ints[2] = 17;
    ints[3] = 17;
    ints[7] = 17;
    ints[8] = 17;
    ints[9] = 17;
    ints[10] = 17;
    ints[11] = 17;
    ints[12] = 17;
    ints[13] = 17;
    ints[14] = 17;
    ints[15] = 17;
    ints[16] = 17;
    ints[17] = 17;
    ints[18] = 17;
    ints[19] = 17;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="1b8d1965-e418-4afb-9a20-e53fcc02eccc" index="346" run="346" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct37701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct37701()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="4fe15595-ee3a-4617-bc06-78e57b38f0ed" index="347" run="347" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct313"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 8, 0, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 8, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 8;
ints[2] = 1;
ints[3] = 1;
ints[4] = 8;
ints[5] = 8;
ints[6] = 8;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 8;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct313()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 8;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 8;
    ints[5] = 8;
    ints[6] = 8;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 8;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3cd2ad8b-1a73-47ff-85e0-c3176497df5a" index="348" run="348" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct581"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 0, 1, 1, 1, 1, 1, 3}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[1] = 1;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 1;
ints[8] = 1;
ints[9] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct581()
{
    int i;
    int[] ints = new int[10];
    ints[1] = 1;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && 
                                                                                                                                       array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && 
                                                                                                                                                                                                                                                                                                   array[6L] == array[7L] && array[1L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && 9L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array.Length == 10L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
array[2L] != array[7L] && array[3L] != array[7L] && array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && 
array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d1d17bef-6e05-4086-bc66-a483fe283f9d" index="349" run="349" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct903"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{16, 0, 0, 1, 16, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 16;
ints[3] = 1;
ints[4] = 16;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct903()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 16;
    ints[3] = 1;
    ints[4] = 16;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[0L] == array[4L] && 5L < array.Length && 
                                                                                   array[1L] == array[5L] && array[2L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                           array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="f0691920-25a0-432a-8343-a7cf2eeef7df" index="350" run="350" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct562"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 32, 8, 128, 1, 0, 1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 32;
ints[1] = 8;
ints[2] = 128;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct562()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 32;
    ints[1] = 8;
    ints[2] = 128;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[7L] && array[4L] == array[8L] && 
                                                                                                                                       array[7L] == array[8L] && array[4L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[4L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && 
                                                                                                                                                                                                                                                                                                     array[9L] == array[10L] && 11L < array.Length && array[4L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  array.Length == 12L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && 
array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && 
array[2L] != array[7L] && array[3L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && 
array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && 
array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[5L] != array[10L] && 
array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a987555f-3066-4658-a65c-f512bba48e07" index="351" run="351" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct895"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 0, 66, 64, 64, 0, 0, 0, 65, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[1] = 66;
ints[2] = 64;
ints[3] = 64;
ints[7] = 65;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct895()
{
    int i;
    int[] ints = new int[11];
    ints[1] = 66;
    ints[2] = 64;
    ints[3] = 64;
    ints[7] = 65;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 
                               array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && 
                                                                                                                                                                                           array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[0L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                       array[8L] == array[9L] && 10L < array.Length && array[0L] == array[10L] && array[4L] == array[10L] && array[5L] == array[10L] && array[6L] == array[10L] && array[8L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[9L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L] && array[1L] != array[9L] && 
array[2L] != array[9L] && array[3L] != array[9L] && array[7L] != array[9L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[7L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e49e3ebd-89fe-47e4-b50d-269ad240cd1e" index="352" run="352" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct309"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[12];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct309()
{
    int i;
    int[] ints = new int[12];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                                                                       array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && array[1L] == array[7L] && array[2L] == array[7L] && array[3L] == array[7L] && array[4L] == array[7L] && 
array[5L] == array[7L] && array[6L] == array[7L] && array[0L] == array[8L] && array[1L] == array[8L] && array[2L] == array[8L] && array[3L] == array[8L] && array[4L] == array[8L] && 
array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && array[0L] == array[9L] && array[1L] == array[9L] && array[2L] == array[9L] && array[3L] == array[9L] && 
array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[0L] == array[10L] && array[1L] == array[10L] && 
array[2L] == array[10L] && array[3L] == array[10L] && array[4L] == array[10L] && array[5L] == array[10L] && array[6L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && 
array[9L] == array[10L] && 11L < array.Length && array[0L] == array[11L] && array[1L] == array[11L] && array[2L] == array[11L] && array[3L] == array[11L] && array[4L] == array[11L] && 
array[5L] == array[11L] && array[6L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && array.Length == 12L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a968313c-6324-4a48-9687-6373eddd657e" index="353" run="353" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct517"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 66, 64, 64, 0, 0, 0, 65, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[1] = 66;
ints[2] = 64;
ints[3] = 64;
ints[7] = 65;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct517()
{
    int i;
    int[] ints = new int[10];
    ints[1] = 66;
    ints[2] = 64;
    ints[3] = 64;
    ints[7] = 65;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && 9L < array.Length && 
                                                                                                                                                                                                                                                                                                   array[0L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                            array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && 
array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[7L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ee410fcd-f3d1-4abb-98e0-c6bc45c43c2e" index="354" run="354" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct676"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct676()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[1L] == array[3L] && array[2L] == array[3L] && 
                                                                                   5L < array.Length && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                                                                                                                                      array[0L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="844b861d-8546-4ff1-b004-2d1273c2839f" index="355" run="355" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct170"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 0, 64, 0, 1, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct170()
{
    int i;
    int[] ints = new int[14];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && 
                                                         array[3L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && array[2L] == array[7L] && array[0L] == array[8L] && array[2L] == array[8L] && array[7L] == array[8L] && 
                                                                                                                                                                                                                     array[0L] == array[9L] && array[2L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[0L] == array[10L] && array[2L] == array[10L] && array[7L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                   array[8L] == array[10L] && array[9L] == array[10L] && array[0L] == array[11L] && array[2L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && 
array[10L] == array[11L] && array[0L] == array[12L] && array[2L] == array[12L] && array[7L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && 
array[11L] == array[12L] && 13L < array.Length && array[0L] == array[13L] && array[2L] == array[13L] && array[7L] == array[13L] && array[8L] == array[13L] && array[9L] == array[13L] && 
array[10L] == array[13L] && array[11L] == array[13L] && array[12L] == array[13L] && array.Length == 14L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && 
array[1L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[3L] != array[8L] && 
array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[1L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && 
array[6L] != array[9L] && array[1L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[1L] != array[11L] && 
array[3L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[1L] != array[12L] && array[3L] != array[12L] && array[4L] != array[12L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        array[5L] != array[12L] && array[6L] != array[12L] && array[1L] != array[13L] && array[3L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && array[6L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="30e4c70e-92e6-4c1d-83fb-683e81ab8695" index="356" run="356" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct742"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 32, 8, 128, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 32;
ints[1] = 8;
ints[2] = 128;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct742()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 32;
    ints[1] = 8;
    ints[2] = 128;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && 
                                                                                   array[4L] == array[7L] && array[4L] == array[8L] && array[7L] == array[8L] && array[4L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[4L] == array[10L] && 
                                                                                                                                                                                                                                               array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[4L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                 array[10L] == array[11L] && 12L < array.Length && array[4L] == array[12L] && array[7L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && 
array[11L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && 
array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[0L] != array[7L] && 
array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && 
array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && 
array[3L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && 
array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[5L] != array[11L] && 
array[6L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="e1d111b0-91f9-49c4-98c2-c9429d60f72a" index="357" run="357" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct11"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=26; 65, 0, 1, 1, 65, 65, 65, 1, 1, 1, 1, 1, 1, 1, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[26];
ints[0] = 65;
ints[2] = 1;
ints[3] = 1;
ints[4] = 65;
ints[5] = 65;
ints[6] = 65;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 65;
ints[25] = 65;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct11()
{
    int i;
    int[] ints = new int[26];
    ints[0] = 65;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 65;
    ints[5] = 65;
    ints[6] = 65;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 65;
    ints[25] = 65;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="2955b3db-09bb-42de-a362-828f7741c78a" index="358" run="358" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct568"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=26; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[26];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct568()
{
    int i;
    int[] ints = new int[26];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.03"/>
<generatedTest id="9e8c20a8-e482-4ef8-b5c5-5a0e54181c55" index="359" run="359" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct803"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=29; 256, 0, 1, 1, 256, 256, 256, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 256, 256}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[29];
ints[0] = 256;
ints[2] = 1;
ints[3] = 1;
ints[4] = 256;
ints[5] = 256;
ints[6] = 256;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 1;
ints[16] = 1;
ints[17] = 1;
ints[18] = 1;
ints[19] = 1;
ints[20] = 1;
ints[21] = 1;
ints[22] = 1;
ints[23] = 1;
ints[24] = 1;
ints[25] = 1;
ints[26] = 1;
ints[27] = 256;
ints[28] = 256;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct803()
{
    int i;
    int[] ints = new int[29];
    ints[0] = 256;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 256;
    ints[5] = 256;
    ints[6] = 256;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 1;
    ints[16] = 1;
    ints[17] = 1;
    ints[18] = 1;
    ints[19] = 1;
    ints[20] = 1;
    ints[21] = 1;
    ints[22] = 1;
    ints[23] = 1;
    ints[24] = 1;
    ints[25] = 1;
    ints[26] = 1;
    ints[27] = 256;
    ints[28] = 256;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ef3a1ff5-17eb-4edc-abec-49ca9debebde" index="360" run="360" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct663"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{6, 2, 0, 3, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 6;
ints[1] = 2;
ints[3] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct663()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 6;
    ints[1] = 2;
    ints[3] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 4L < array.Length && array[2L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                              array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<boundary kind="maxruns" value="360" message="maximum runs reached"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxRuns=720" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="720"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxRuns" token="17000346"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000d9"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<coverage domain="usercodeundertest" unit="block" covered="15" total="15" coveredRatio="1"/>
<sourceCoverage xml="cov\e334\cov.xml" html="cov\e334\cov.html"/>
<result name="countDistinct(Int32[])" state="success" duration="11.8549984"/>
<duration start="2019-02-15 20:28:53Z" end="2019-02-15 20:29:05Z" seconds="11.8565532"/>
<trajectory><image src="fix\solutionquestion636858377457014121.trajectories.png" width="800" height="1600"/>
</trajectory>
</exploration>
<coverage domain="usercodeundertest" unit="block" covered="15" total="15" coveredRatio="1"/>
<sourceCoverage xml="cov\t604\cov.xml" html="cov\t604\cov.html"/>
<duration start="2019-02-15 20:28:53Z" end="2019-02-15 20:29:05Z" seconds="11.886473"/>
</fixture>
<fixture name="Question" type="Submission.Question" typeName="Question" token="2000004" href="fix\meta_projectAddToEnd.614.html"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
</type>
<settings typeUnderTest="Submission.Question"/>
<exploration shortName="countDistinct(Int32[])" fullName="Submission.Question.countDistinct(Int32[])"><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ab"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
<settings maxRuns="60" testEmissionFilter="All"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5852efc1-8063-4447-a4e9-df3de960507d" index="1" run="1" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct260"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="11" acov="2" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">null</value>
<value name="result">0</value>
<code><![CDATA[int i;
i = Question.countDistinct((int[])null);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct260()
{
    int i;
    i = Question.countDistinct((int[])null);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array == (int[])null;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:29:06Z" category="coverage" message="coverage increased from 0 to 2 blocks (+2) after flipping Submission.Question.countDistinct at 0x000e"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="77e257d3-167d-4772-bef3-5c269d87fddc" index="2" run="2" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct504"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="0" acov="4" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[0];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct504()
{
    int i;
    int[] ints = new int[0];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && (int)(array.Length) < 2;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:29:06Z" category="coverage" message="coverage increased from 2 to 4 blocks (+2) after flipping Submission.Question.countDistinct at 0x000e"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="506c194b-90dd-4768-b2ad-dc8bdec34491" index="3" run="3" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException26"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="5" dtot="0" acov="9" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[2];
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException26()
{
    int i;
    int[] ints = new int[2];
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs(39)" method="Question.countDistinct(Int32[])" offset="85" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs" line="39"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ab"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[		}
		for (int i = 0; i < array.Length; i++)
		{]]></beforeSource>
<source><![CDATA[			for (int j = 0; j < array.Length; j++)]]></source>
<afterSource><![CDATA[			{
				if (array[i] != array[j])
				{]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && 1L < array.Length && array[0L] == array[1L] && array[1L] == array[0L] && array.Length == 2L;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:29:06Z" category="coverage" message="coverage increased from 4 to 9 blocks (+5) after flipping Submission.Question.countDistinct at 0x0022"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1e959bac-ef07-4c86-beb8-e758b7ee2b76" index="4" run="4" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct888"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[2];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct888()
{
    int i;
    int[] ints = new int[2];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 1L < array.Length && array.Length == 2L && array[0L] != array[1L] && array[1L] != array[0L];
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:29:06Z" category="coverage" message="coverage increased from 9 to 11 blocks (+2) after flipping Submission.Question.countDistinct at 0x003f"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3cb3e320-1e43-44f2-958f-d58e8ab31c57" index="5" run="5" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException437"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[3];
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException437()
{
    int i;
    int[] ints = new int[3];
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs(39)" method="Question.countDistinct(Int32[])" offset="85" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs" line="39"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ab"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[		}
		for (int i = 0; i < array.Length; i++)
		{]]></beforeSource>
<source><![CDATA[			for (int j = 0; j < array.Length; j++)]]></source>
<afterSource><![CDATA[			{
				if (array[i] != array[j])
				{]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 2L < array.Length && array[0L] == array[2L] && array.Length == 3L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d6191159-f25f-457d-873c-abdb754f702b" index="6" run="6" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException980"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[0] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException980()
{
    int i;
    int[] ints = new int[3];
    ints[0] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs(39)" method="Question.countDistinct(Int32[])" offset="85" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs" line="39"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ab"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[		}
		for (int i = 0; i < array.Length; i++)
		{]]></beforeSource>
<source><![CDATA[			for (int j = 0; j < array.Length; j++)]]></source>
<afterSource><![CDATA[			{
				if (array[i] != array[j])
				{]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && 1L < array.Length && 2 < (int)(array.Length) && array[0L] != array[1L] && array[1L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5cd01458-54c5-4b5c-8198-26145340b5c5" index="7" run="7" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct41901"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[2];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct41901()
{
    int i;
    int[] ints = new int[2];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 1L < array.Length && array[0L] == array[1L] && array[1L] == array[0L] && array.Length == 2L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="424747bd-5e36-46f3-9091-61ae9911e443" index="8" run="8" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct57801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct57801()
{
    int i;
    int[] ints = new int[3];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 2L < array.Length && array.Length == 3L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e26886f7-8607-4032-9862-2412f6f09046" index="9" run="9" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException582"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[4];
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException582()
{
    int i;
    int[] ints = new int[4];
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs(37)" method="Question.countDistinct(Int32[])" offset="102" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs" line="37"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ab"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[		{
			return 0;
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			for (int j = 0; j < array.Length; j++)
			{]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 3L < array.Length && array[0L] == array[3L] && array.Length == 4L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d178e910-9c74-4f95-a9c1-5ee5d18eeef3" index="10" run="10" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct9001"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[3];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct9001()
{
    int i;
    int[] ints = new int[3];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && 2L < array.Length && array[0L] == array[2L] && array[1L] == array[0L] && array[1L] == array[2L] && array[2L] == array[0L] && array[2L] == array[1L] && array.Length == 3L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="36eea05d-8823-403a-b2e8-b23465978ad0" index="11" run="11" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct36101"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[4];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct36101()
{
    int i;
    int[] ints = new int[4];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && array[0L] == array[2L] && 3L < array.Length && array[0L] == array[3L] && array[1L] == array[0L] && array[1L] == array[2L] && array[1L] == array[3L] && 
                                                                                                                                                              array[2L] == array[0L] && array[2L] == array[1L] && array[2L] == array[3L] && array[3L] == array[0L] && array[3L] == array[1L] && array[3L] == array[2L] && array.Length == 4L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1dd65885-e01d-4342-a5f3-d67e2959a915" index="12" run="12" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException892"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[5];
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException892()
{
    int i;
    int[] ints = new int[5];
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs(39)" method="Question.countDistinct(Int32[])" offset="85" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs" line="39"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ab"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[		}
		for (int i = 0; i < array.Length; i++)
		{]]></beforeSource>
<source><![CDATA[			for (int j = 0; j < array.Length; j++)]]></source>
<afterSource><![CDATA[			{
				if (array[i] != array[j])
				{]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[0L] == array[3L] && 4 < (int)(array.Length) && 4L < array.Length && array[0L] == array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9ca79e2d-511a-44a3-955c-b89140d2c754" index="13" run="13" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct35801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[5];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct35801()
{
    int i;
    int[] ints = new int[5];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[0L] == array[2L] && array[0L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array[1L] == array[0L] && array[1L] == array[2L] && array[1L] == array[3L] && 
                                                                                                                                                                                      array[1L] == array[4L] && array[2L] == array[0L] && array[2L] == array[1L] && array[2L] == array[3L] && array[2L] == array[4L] && array[3L] == array[0L] && array[3L] == array[1L] && 
                                                                                                                                                                                                                                                                                                                                                  array[3L] == array[2L] && array[3L] == array[4L] && array[4L] == array[0L] && array[4L] == array[1L] && array[4L] == array[2L] && array[4L] == array[3L] && array.Length == 5L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9001f519-bd8a-4a92-9236-e5e9be52f169" index="14" run="14" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException947"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 1}</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[2] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException947()
{
    int i;
    int[] ints = new int[3];
    ints[2] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs(39)" method="Question.countDistinct(Int32[])" offset="85" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs" line="39"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ab"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[		}
		for (int i = 0; i < array.Length; i++)
		{]]></beforeSource>
<source><![CDATA[			for (int j = 0; j < array.Length; j++)]]></source>
<afterSource><![CDATA[			{
				if (array[i] != array[j])
				{]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 2 < (int)(array.Length) && 2L < array.Length && array[1L] == array[0L] && array[0L] != array[2L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="8b4df595-b6f6-4a38-92f5-ac61c7c02af8" index="15" run="15" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct21201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct21201()
{
    int i;
    int[] ints = new int[3];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 2L < array.Length && array[1L] == array[0L] && array.Length == 3L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7a15289a-91a0-4d06-a65e-fb1390b1a289" index="16" run="16" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct3901"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[6];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct3901()
{
    int i;
    int[] ints = new int[6];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[0L] == array[3L] && array[0L] == array[4L] && 
                                                                                                             5L < array.Length && array[0L] == array[5L] && array[1L] == array[0L] && array[1L] == array[2L] && array[1L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && 
                                                                                                                                                                                                                                                                    array[2L] == array[0L] && array[2L] == array[1L] && array[2L] == array[3L] && array[2L] == array[4L] && array[2L] == array[5L] && array[3L] == array[0L] && array[3L] == array[1L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                array[3L] == array[2L] && array[3L] == array[4L] && array[3L] == array[5L] && array[4L] == array[0L] && array[4L] == array[1L] && array[4L] == array[2L] && array[4L] == array[3L] && 
array[4L] == array[5L] && array[5L] == array[0L] && array[5L] == array[1L] && array[5L] == array[2L] && array[5L] == array[3L] && array[5L] == array[4L] && array.Length == 6L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="41c9121f-5b0c-48dc-8c83-54c88c672ebe" index="17" run="17" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct82801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct82801()
{
    int i;
    int[] ints = new int[3];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 2L < array.Length && array[2L] == array[0L] && array.Length == 3L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="5f740653-811f-4d7d-b695-b56a286861dc" index="18" run="18" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct65901"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[7];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct65901()
{
    int i;
    int[] ints = new int[7];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[0L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 6L < array.Length && array[0L] == array[6L] && array[1L] == array[0L] && array[1L] == array[2L] && 
                                                                                                                                                                                                                array[1L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[1L] == array[6L] && array[2L] == array[0L] && array[2L] == array[1L] && array[2L] == array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                            array[2L] == array[4L] && array[2L] == array[5L] && array[2L] == array[6L] && array[3L] == array[0L] && array[3L] == array[1L] && array[3L] == array[2L] && array[3L] == array[4L] && 
array[3L] == array[5L] && array[3L] == array[6L] && array[4L] == array[0L] && array[4L] == array[1L] && array[4L] == array[2L] && array[4L] == array[3L] && array[4L] == array[5L] && 
array[4L] == array[6L] && array[5L] == array[0L] && array[5L] == array[1L] && array[5L] == array[2L] && array[5L] == array[3L] && array[5L] == array[4L] && array[5L] == array[6L] && 
array[6L] == array[0L] && array[6L] == array[1L] && array[6L] == array[2L] && array[6L] == array[3L] && array[6L] == array[4L] && array[6L] == array[5L] && array.Length == 7L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6758ae0b-0c00-4817-9699-2eb83b1644ad" index="19" run="19" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException322"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 1}</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[3] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException322()
{
    int i;
    int[] ints = new int[4];
    ints[3] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs(39)" method="Question.countDistinct(Int32[])" offset="85" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs" line="39"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ab"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[		}
		for (int i = 0; i < array.Length; i++)
		{]]></beforeSource>
<source><![CDATA[			for (int j = 0; j < array.Length; j++)]]></source>
<afterSource><![CDATA[			{
				if (array[i] != array[j])
				{]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 3 < (int)(array.Length) && 3L < array.Length && array[0L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6adae807-c689-416d-aea9-bf5ba0ba0df1" index="20" run="20" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct61401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct61401()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 3L < array.Length && array[1L] == array[0L] && array[1L] == array[2L] && 
                                                                                                                                  array[2L] == array[0L] && array[2L] == array[1L] && array.Length == 4L && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[3L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="bc59941b-cb6c-4410-9f29-f6c4f5c0f8f2" index="21" run="21" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct16601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[11];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct16601()
{
    int i;
    int[] ints = new int[11];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="7f07d05e-512f-4335-9d57-dca7c441a04a" index="22" run="22" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct73101"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[8];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct73101()
{
    int i;
    int[] ints = new int[8];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[0L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[0L] == array[6L] && 7L < array.Length && array[0L] == array[7L] && array[1L] == array[0L] && 
                                                                                                                                                                                                                array[1L] == array[2L] && array[1L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[1L] == array[6L] && array[1L] == array[7L] && array[2L] == array[0L] && 
                                                                                                                                                                                                                                                                                                                                                                            array[2L] == array[1L] && array[2L] == array[3L] && array[2L] == array[4L] && array[2L] == array[5L] && array[2L] == array[6L] && array[2L] == array[7L] && array[3L] == array[0L] && 
array[3L] == array[1L] && array[3L] == array[2L] && array[3L] == array[4L] && array[3L] == array[5L] && array[3L] == array[6L] && array[3L] == array[7L] && array[4L] == array[0L] && 
array[4L] == array[1L] && array[4L] == array[2L] && array[4L] == array[3L] && array[4L] == array[5L] && array[4L] == array[6L] && array[4L] == array[7L] && array[5L] == array[0L] && 
array[5L] == array[1L] && array[5L] == array[2L] && array[5L] == array[3L] && array[5L] == array[4L] && array[5L] == array[6L] && array[5L] == array[7L] && array[6L] == array[0L] && 
array[6L] == array[1L] && array[6L] == array[2L] && array[6L] == array[3L] && array[6L] == array[4L] && array[6L] == array[5L] && array[6L] == array[7L] && array[7L] == array[0L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        array[7L] == array[1L] && array[7L] == array[2L] && array[7L] == array[3L] && array[7L] == array[4L] && array[7L] == array[5L] && array[7L] == array[6L] && array.Length == 8L;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:29:07Z" category="progress" message="   22 runs, 11/11 blocks covered"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3675d6e0-a6bb-4d66-b8c3-4f7d30c2b833" index="23" run="23" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct26901"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">7</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(7, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct26901()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(7, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 6L < array.Length && array.Length == 7L && 
                                                    array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6f607e8e-d469-4449-97f9-578f58761cd0" index="24" run="24" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct37301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">11</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(11, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct37301()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(11, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 10L < array.Length && array.Length == 11L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && 
                                                                                                                                                          array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="8edf36d1-7b5d-464c-9409-7c8ffa7c2d26" index="25" run="25" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct72501"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">12</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(12, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct72501()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(12, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       11L < array.Length && array.Length == 12L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && 
                                                                                                                                                            array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L] && array[11L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e29fef8f-a7fd-4b0c-bee4-8250ea799295" index="26" run="26" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct14501"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 0, 0, 0}</value>
<value name="result">7</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(7, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct14501()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(7, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[0L] && 6L < array.Length && array.Length == 7L && 
                                                                              array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="55d5de7e-c073-48d1-86e6-f2b196f1fea8" index="27" run="27" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct69901"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 0, 0}</value>
<value name="result">6</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(6, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct69901()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(6, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[0L] && 
                               5L < array.Length && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e985e2f3-a974-4bf2-a88c-8b5282ae4b34" index="28" run="28" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct82901"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">8</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(8, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct82901()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(8, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 7L < array.Length && array.Length == 8L && array[0L] != array[1L] && 
                                                                          array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="805899e9-b74c-45e2-9efa-d5d78b7c3614" index="29" run="29" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct59701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[9];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct59701()
{
    int i;
    int[] ints = new int[9];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[0L] == array[3L] && array[0L] == array[4L] && 
                                                                                                             array[0L] == array[5L] && array[0L] == array[6L] && array[0L] == array[7L] && 8L < array.Length && array[0L] == array[8L] && array[1L] == array[0L] && array[1L] == array[2L] && 
                                                                                                                                                                                                                                                                    array[1L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[1L] == array[6L] && array[1L] == array[7L] && array[1L] == array[8L] && array[2L] == array[0L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                array[2L] == array[1L] && array[2L] == array[3L] && array[2L] == array[4L] && array[2L] == array[5L] && array[2L] == array[6L] && array[2L] == array[7L] && array[2L] == array[8L] && 
array[3L] == array[0L] && array[3L] == array[1L] && array[3L] == array[2L] && array[3L] == array[4L] && array[3L] == array[5L] && array[3L] == array[6L] && array[3L] == array[7L] && 
array[3L] == array[8L] && array[4L] == array[0L] && array[4L] == array[1L] && array[4L] == array[2L] && array[4L] == array[3L] && array[4L] == array[5L] && array[4L] == array[6L] && 
array[4L] == array[7L] && array[4L] == array[8L] && array[5L] == array[0L] && array[5L] == array[1L] && array[5L] == array[2L] && array[5L] == array[3L] && array[5L] == array[4L] && 
array[5L] == array[6L] && array[5L] == array[7L] && array[5L] == array[8L] && array[6L] == array[0L] && array[6L] == array[1L] && array[6L] == array[2L] && array[6L] == array[3L] && 
array[6L] == array[4L] && array[6L] == array[5L] && array[6L] == array[7L] && array[6L] == array[8L] && array[7L] == array[0L] && array[7L] == array[1L] && array[7L] == array[2L] && 
array[7L] == array[3L] && array[7L] == array[4L] && array[7L] == array[5L] && array[7L] == array[6L] && array[7L] == array[8L] && array[8L] == array[0L] && array[8L] == array[1L] && 
array[8L] == array[2L] && array[8L] == array[3L] && array[8L] == array[4L] && array[8L] == array[5L] && array[8L] == array[6L] && array[8L] == array[7L] && array.Length == 9L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b1f9a190-5a8c-4246-b1a0-68c1bd0be829" index="30" run="30" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct37701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">9</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(9, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct37701()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(9, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 8L < array.Length && array.Length == 9L && array[0L] != array[1L] && array[1L] != array[0L] && 
                                                                                                    array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="efc3d99b-3060-495e-97da-ad1cf9640de9" index="31" run="31" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct97401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct97401()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[0L] && 3L < array.Length && array.Length == 4L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L] && array[3L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="72a3a332-f53f-460d-98b6-5bea2c5baf88" index="32" run="32" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct30001"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">10</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(10, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct30001()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(10, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 9L < array.Length && array.Length == 10L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && 
                                                                                                                               array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="fceb1eaf-5532-4e25-8995-5b0bef5b234a" index="33" run="33" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct61901"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[10];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct61901()
{
    int i;
    int[] ints = new int[10];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[0L] == array[2L] && array[0L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[0L] == array[6L] && array[0L] == array[7L] && array[0L] == array[8L] && 
                                                                                                                                                                                           9L < array.Length && array[0L] == array[9L] && array[1L] == array[0L] && array[1L] == array[2L] && array[1L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && 
                                                                                                                                                                                                                                                                                                                                                  array[1L] == array[6L] && array[1L] == array[7L] && array[1L] == array[8L] && array[1L] == array[9L] && array[2L] == array[0L] && array[2L] == array[1L] && array[2L] == array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              array[2L] == array[4L] && array[2L] == array[5L] && array[2L] == array[6L] && array[2L] == array[7L] && array[2L] == array[8L] && array[2L] == array[9L] && array[3L] == array[0L] && 
array[3L] == array[1L] && array[3L] == array[2L] && array[3L] == array[4L] && array[3L] == array[5L] && array[3L] == array[6L] && array[3L] == array[7L] && array[3L] == array[8L] && 
array[3L] == array[9L] && array[4L] == array[0L] && array[4L] == array[1L] && array[4L] == array[2L] && array[4L] == array[3L] && array[4L] == array[5L] && array[4L] == array[6L] && 
array[4L] == array[7L] && array[4L] == array[8L] && array[4L] == array[9L] && array[5L] == array[0L] && array[5L] == array[1L] && array[5L] == array[2L] && array[5L] == array[3L] && 
array[5L] == array[4L] && array[5L] == array[6L] && array[5L] == array[7L] && array[5L] == array[8L] && array[5L] == array[9L] && array[6L] == array[0L] && array[6L] == array[1L] && 
array[6L] == array[2L] && array[6L] == array[3L] && array[6L] == array[4L] && array[6L] == array[5L] && array[6L] == array[7L] && array[6L] == array[8L] && array[6L] == array[9L] && 
array[7L] == array[0L] && array[7L] == array[1L] && array[7L] == array[2L] && array[7L] == array[3L] && array[7L] == array[4L] && array[7L] == array[5L] && array[7L] == array[6L] && 
array[7L] == array[8L] && array[7L] == array[9L] && array[8L] == array[0L] && array[8L] == array[1L] && array[8L] == array[2L] && array[8L] == array[3L] && array[8L] == array[4L] && 
array[8L] == array[5L] && array[8L] == array[6L] && array[8L] == array[7L] && array[8L] == array[9L] && array[9L] == array[0L] && array[9L] == array[1L] && array[9L] == array[2L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          array[9L] == array[3L] && array[9L] == array[4L] && array[9L] == array[5L] && array[9L] == array[6L] && array[9L] == array[7L] && array[9L] == array[8L] && array.Length == 10L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7c25c7cd-30ee-4def-bc19-86c201d339f6" index="34" run="34" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct49201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct49201()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[2L] == array[0L] && 4L < array.Length && array.Length == 5L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L] && array[3L] != array[0L] && array[4L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ef53f39c-4911-4092-8951-3f80ed2c4763" index="35" run="35" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct4001"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">13</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(13, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct4001()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(13, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 12L < array.Length && 
                               array.Length == 13L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && 
                                                                                                                                                                                        array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L] && array[11L] != array[0L] && array[12L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="c2ac1040-8dcb-43d7-b5dd-d0323a60c779" index="36" run="36" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct56801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">14</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(14, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct56801()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(14, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 13L < array.Length && array.Length == 14L && 
                                                     array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && 
                                                                                                                                                                                                                 array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L] && array[11L] != array[0L] && array[12L] != array[0L] && array[13L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3208fe0a-7bde-49b7-9fe6-9277218cf991" index="37" run="37" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct64801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">7</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(7, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct64801()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(7, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[1L] == array[0L] && 6L < array.Length && array.Length == 7L && 
                                                                                                        array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="5037fbbf-e9b3-4782-b3e9-f035cc87af3b" index="38" run="38" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct93501"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[12];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct93501()
{
    int i;
    int[] ints = new int[12];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7fefc2a6-42d2-4f7b-9b32-ac61efdcdb3b" index="39" run="39" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct75201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">15</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(15, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct75201()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(15, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 14L < array.Length && array.Length == 15L && array[0L] != array[1L] && 
                                                                            array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && 
                                                                                                                                                                                                                                        array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L] && array[11L] != array[0L] && array[12L] != array[0L] && array[13L] != array[0L] && array[14L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1a827972-5cb4-47dd-9a53-9ae1761b6e0c" index="40" run="40" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct2901"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct2901()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[0L] && array[1L] == array[2L] && array[2L] == array[0L] && 
                                                                                                                                       array[2L] == array[1L] && 4L < array.Length && array.Length == 5L && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[3L] != array[0L] && array[4L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b47b8285-d1ac-43fd-a833-1c12ac827f5b" index="41" run="41" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct63501"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 1, 0, 0, 0}</value>
<value name="result">7</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(7, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct63501()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(7, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[0L] && 6L < array.Length && array.Length == 7L && 
                                                                              array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[1L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="ab97f88b-0f0b-4647-a90d-1410c982cca4" index="42" run="42" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct14301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[13];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct14301()
{
    int i;
    int[] ints = new int[13];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="fb2ffa2f-e00f-4858-91e6-e57d9fa3f0c0" index="43" run="43" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct14701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">11</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(11, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct14701()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(11, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[1L] == array[0L] && 10L < array.Length && array.Length == 11L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[0L] && array[3L] != array[0L] && 
                                                                                                                                                                                    array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d009f6c5-9b18-4a86-ae79-32cffc52efcf" index="44" run="44" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct90201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">16</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(16, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct90201()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(16, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 15L < array.Length && array.Length == 16L && array[0L] != array[1L] && array[1L] != array[0L] && 
                                                                                                      array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && 
                                                                                                                                                                                                                                                                  array[9L] != array[0L] && array[10L] != array[0L] && array[11L] != array[0L] && array[12L] != array[0L] && array[13L] != array[0L] && array[14L] != array[0L] && array[15L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="d35440f0-8a2e-490b-aa56-047fe675c883" index="45" run="45" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct20601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[14];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct20601()
{
    int i;
    int[] ints = new int[14];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="12bbdd6e-7f86-473b-b146-018add87edda" index="46" run="46" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct63401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">17</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(17, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct63401()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(17, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 16L < array.Length && array.Length == 17L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && 
                                                                                                                                array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && 
                                                                                                                                                                                                                                                                                            array[10L] != array[0L] && array[11L] != array[0L] && array[12L] != array[0L] && array[13L] != array[0L] && array[14L] != array[0L] && array[15L] != array[0L] && array[16L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ae7f2571-e77b-409c-a957-22840b352104" index="47" run="47" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct16901"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct16901()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[1L] == array[0L] && 4L < array.Length && array.Length == 5L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="17c9fb48-64ad-4513-871a-afbe46ca365a" index="48" run="48" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct28201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct28201()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && array[1L] == array[0L] && 3L < array.Length && array.Length == 4L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[0L] && array[3L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="7ab1905d-0d4e-4d19-a1cc-1ce1365c8337" index="49" run="49" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct29001"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[15];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct29001()
{
    int i;
    int[] ints = new int[15];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="c691aaaf-8fab-4605-bc3b-0aec5b566716" index="50" run="50" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct75501"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">18</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(18, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct75501()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(18, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 17L < array.Length && array.Length == 18L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && 
                                                                                                                                                          array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L] && 
                                                                                                                                                                                                                                                                                                                      array[11L] != array[0L] && array[12L] != array[0L] && array[13L] != array[0L] && array[14L] != array[0L] && array[15L] != array[0L] && array[16L] != array[0L] && array[17L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="09c0334f-cac3-45f0-88f4-5289d1126ac9" index="51" run="51" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct427"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[16];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct427()
{
    int i;
    int[] ints = new int[16];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6cdea42a-63ed-4aa8-8ec4-ef3e75ec6515" index="52" run="52" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct779"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct779()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 3L < array.Length && array.Length == 4L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.03"/>
<generatedTest id="574da517-b716-4894-a05b-b41f1445621e" index="53" run="53" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct468"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[17];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct468()
{
    int i;
    int[] ints = new int[17];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5abefb88-86a7-47a3-b46e-d518a6d7ad9e" index="54" run="54" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct42"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">11</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(11, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct42()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(11, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[2L] == array[0L] && 10L < array.Length && array.Length == 11L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L] && array[3L] != array[0L] && 
                                                                                                                                                            array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a5a1f259-855f-485a-89ab-57257b5f4d7a" index="55" run="55" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct737"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0, 0}</value>
<value name="result">7</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(7, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct737()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(7, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[0L] && array[3L] == array[0L] && 6L < array.Length && array.Length == 7L && 
                                                                                                        array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L] && array[3L] != array[1L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="de47ea1c-fe50-4d84-873a-53b7054d8f69" index="56" run="56" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct986"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">19</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(19, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct986()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(19, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       18L < array.Length && array.Length == 19L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && 
                                                                                                                                                            array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L] && array[11L] != array[0L] && 
                                                                                                                                                                                                                                                                                                                         array[12L] != array[0L] && array[13L] != array[0L] && array[14L] != array[0L] && array[15L] != array[0L] && array[16L] != array[0L] && array[17L] != array[0L] && array[18L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.03"/>
<generatedTest id="76b77d8c-becc-49fa-9e57-8be1126a5575" index="57" run="57" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct372"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[18];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct372()
{
    int i;
    int[] ints = new int[18];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.04"/>
<generatedTest id="dd81371d-bea2-41a7-a5d2-8a03a25e78c7" index="58" run="58" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct735"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}</value>
<value name="result">18</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[17] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(18, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct735()
{
    int i;
    int[] ints = new int[18];
    ints[17] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(18, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1ee5b9ed-477d-47e2-af49-a50436ef4ae8" index="59" run="59" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct34"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">10</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(10, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct34()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(10, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[0L] && 9L < array.Length && array.Length == 10L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L] && 
                                                                                                                                                         array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="471e2a71-b04f-4dc1-a901-3bc54cfdf1a1" index="60" run="60" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct643"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">12</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(12, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct643()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(12, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[1L] == array[0L] && 
                                                         11L < array.Length && array.Length == 12L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && 
                                                                                                                                                                                                              array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L] && array[11L] != array[0L];
]]></pathCondition>
</generatedTest>
<boundary kind="maxruns" value="60" message="maximum runs reached"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxRuns=120" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="120"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxRuns" token="17000346"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ab"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<coverage domain="usercodeundertest" unit="block" covered="11" total="11" coveredRatio="1"/>
<sourceCoverage xml="cov\e337\cov.xml" html="cov\e337\cov.html"/>
<result name="countDistinct(Int32[])" state="success" duration="2.5511556"/>
<duration start="2019-02-15 20:29:05Z" end="2019-02-15 20:29:08Z" seconds="2.5522386"/>
<trajectory><image src="fix\submissionquesti636858377482865604.trajectories.png" width="800" height="1600"/>
</trajectory>
</exploration>
<coverage domain="usercodeundertest" unit="block" covered="11" total="11" coveredRatio="1"/>
<sourceCoverage xml="cov\t614\cov.xml" html="cov\t614\cov.html"/>
<duration start="2019-02-15 20:29:05Z" end="2019-02-15 20:29:08Z" seconds="2.5602178"/>
</fixture>
<coverage domain="usercodeundertest" unit="block" covered="80" total="84" coveredRatio="0.95238095238095233"/>
<sourceCoverage xml="cov\a58092032\cov.xml" html="cov\a58092032\cov.html"/>
<duration start="2019-02-15 20:28:47Z" end="2019-02-15 20:29:08Z" seconds="20.7337549"/>
<frameTreeRef exceptionCount="1"/>
</assembly>
<duration start="2019-02-15 20:28:47Z" end="2019-02-15 20:29:08Z" seconds="20.8256861"/>
<background/>
</pex>
