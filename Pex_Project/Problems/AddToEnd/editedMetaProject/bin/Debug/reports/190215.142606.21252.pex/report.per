<?xml version="1.0" encoding="utf-8"?>
<pex id="{ad1e52fc-d5cd-42cf-874f-fdffd5b69abe}" creationTime="2019-02-15 20:26:06Z" configuration="*\*\*" created="2019-02-15 20:26:06Z" pexVersion="0.94.51023.0" xml="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\reports\190215.142606.21252.pex\report.per" html="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\reports\190215.142606.21252.pex\report.html"><environment commandLine="&quot;C:\Program Files\Microsoft Pex\bin\Microsoft.Pex.exe&quot; &quot;C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll&quot; /x64failsilently /clrversion:v4.0.30319 /donotopenreport /reportlevel:Xml /reportrootpath:&quot;C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\reports&quot; /testframework:VisualStudioUnitTest /testlanguage:cs /testprojectfile:&quot;C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\meta_projectAddToEnd.csproj&quot; /testprojectnotupdate /testprojectskip" machineName="DESKTOP-OS6C121" osVersion="Microsoft Windows NT 6.2.9200.0" processorCount="8" clrVersion="4.0.30319.42000" bitness="x64" user="Vijayendra Jagtap"><envVars><envVar name="SESSIONNAME" value="Console"/>
<envVar name="CLRMONITOR_INJECT_TYPES" value=""/>
<envVar name="FPS_BROWSER_USER_PROFILE_STRING" value="Default"/>
<envVar name="COMPLUS_DEFAULTVERSION" value="v4.0.30319"/>
<envVar name="CLRMONITOR_INJECT_ASSEMBLIES" value=""/>
<envVar name="PROCESSOR_IDENTIFIER" value="Intel64 Family 6 Model 142 Stepping 10, GenuineIntel"/>
<envVar name="TMP" value="C:\Users\VIJAYE~1\AppData\Local\Temp"/>
<envVar name="CLRMONITOR_INSTRUMENT_ASSEMBLIES_EXCLUSIONS" value=""/>
<envVar name="Path" value="C:\Program Files\Java\jdk-11.0.2\bin;C:\Program Files\Git\bin;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;c:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;c:\Program Files\Microsoft SQL Server\100\Tools\Binn\;c:\Program Files\Microsoft SQL Server\100\DTS\Binn\;C:\Program Files\Sublime Text 3;C:\WINDOWS\system32;C:\HashiCorp\Vagrant\bin;C:\Users\Vijayendra Jagtap\AppData\Local\Programs\Python\Python37\Scripts\;C:\Users\Vijayendra Jagtap\AppData\Local\Programs\Python\Python37\;C:\Users\Vijayendra Jagtap\AppData\Local\Microsoft\WindowsApps;C:\Users\Vijayendra Jagtap\AppData\Local\GitHubDesktop\bin;C:\Users\Vijayendra Jagtap\AppData\Local\Microsoft\WindowsApps;;C:\intelFPGA\18.0\modelsim_ase\win32aloem;C:\intelFPGA_lite\18.0\modelsim_ase\win32aloem"/>
<envVar name="PROCESSOR_REVISION" value="8e0a"/>
<envVar name="CLRMONITOR_INSTRUMENT_TYPES" value="System.Array,System.Array+ArrayEnumerator,System.Array+FunctorComparer`1,System.Array+SZArrayEnumerator,System.Array+SorterGenericArray,System.Array+SorterObjectArray,System.Boolean,System.Byte,System.Char,System.CharEnumerator,System.ComponentModel.Component,System.ComponentModel.Container,System.ComponentModel.Container+Site,System.Convert,System.Currency,System.DateTime,System.Decimal,System.Diagnostics.Assert,System.Double,System.Globalization.CharUnicodeInfo,System.Globalization.CultureTableRecord,System.Globalization.TextInfo,System.Guid,System.IO.MemoryStream,System.IO.Stream,System.IO.StreamReader,System.IO.StreamWriter,System.IO.StringReader,System.IO.StringWriter,System.Int16,System.Int32,System.Int64,System.Lazy`1,System.Lazy`1+Boxed,System.Lazy`1+LazyInternalExceptionHolder,System.Math,System.Nullable,System.Nullable`1,System.OrdinalComparer,System.SByte,System.SZArrayHelper,System.SZArrayHelper+SZGenericArrayEnumerator`1,System.Single,System.String,System.StringComparer,System.Text.ASCIIEncoding,System.Text.DecoderNLS,System.Text.Encoding,System.Text.UTF8Encoding,System.TimeSpan,System.Tuple,System.Tuple`1,System.Tuple`2,System.Tuple`3,System.Tuple`4,System.Tuple`5,System.Tuple`6,System.Tuple`7,System.Tuple`8,System.UInt16,System.UInt32,System.UInt64,System.Xml.XmlTextWriter,System.Xml.XmlTextWriter+Namespace,System.Xml.XmlTextWriter+NamespaceState,System.Xml.XmlTextWriter+SpecialAttr,System.Xml.XmlTextWriter+State,System.Xml.XmlTextWriter+TagInfo,System.Xml.XmlTextWriter+Token,System.Xml.XmlWriter,System.Xml.XmlWriter+&lt;WriteAttributeStringAsyncHelper&gt;d__82,System.Xml.XmlWriter+&lt;WriteAttributesAsync&gt;d__102,System.Xml.XmlWriter+&lt;WriteElementStringAsync&gt;d__107,System.Xml.XmlWriter+&lt;WriteLocalNamespacesAsync&gt;d__108,System.Xml.XmlWriter+&lt;WriteNodeAsync&gt;d__106,System.Xml.XmlWriter+&lt;WriteNodeAsync_CallAsyncReader&gt;d__105,System.Xml.XmlWriter+&lt;WriteNodeAsync_CallSyncReader&gt;d__104,System.Xml.XmlWriter+&lt;WriteQualifiedNameAsync&gt;d__101,__Box`1,__SzArrayHelper`1"/>
<envVar name="COMPLUS_ProfAPI_ProfilerCompatibilitySetting" value="EnableV2Profiler"/>
<envVar name="CLRMONITOR_CLSID" value="{fa6276ae-c2b7-443f-9cac-ea13fd3b342a}"/>
<envVar name="QSYS_ROOTDIR" value="C:\intelFPGA_lite\18.0\quartus\sopc_builder\bin"/>
<envVar name="FPS_BROWSER_APP_PROFILE_STRING" value="Internet Explorer"/>
<envVar name="CLRMONITOR_SUBSTITUTIONS" value="C:\WINDOWS\assembly\GAC_MSIL\Microsoft.ExtendedReflection\0.94.0.0__31bf3856ad364e35\Microsoft.ExtendedReflection.dll"/>
<envVar name="CLRMONITOR_ERASE_FINALIZER_TYPES" value=""/>
<envVar name="CLRMONITOR_INJECT_NAMESPACES" value=""/>
<envVar name="USERNAME" value="Vijayendra Jagtap"/>
<envVar name="SystemRoot" value="C:\WINDOWS"/>
<envVar name="CLRMONITOR_INITIALIZED" value="0x7"/>
<envVar name="CLRMONITOR_INSTRUMENT_NAMESPACES_EXCLUSIONS" value=""/>
<envVar name="VS100COMNTOOLS" value="C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\Tools\"/>
<envVar name="OS" value="Windows_NT"/>
<envVar name="TEMP" value="C:\Users\VIJAYE~1\AppData\Local\Temp"/>
<envVar name="CLRMONITOR_INSTRUMENT_ATTRIBUTE" value="Microsoft.Moles.Framework.Moles.MolesInstrumentAttribute"/>
<envVar name="OneDrive" value="C:\Users\Vijayendra Jagtap\OneDrive"/>
<envVar name="CLRMONITOR_INSTRUMENT_NAMESPACES" value="System.Collections,System.Collections.Generic,System.Collections.ObjectModel,System.Collections.Specialized,System.Diagnostics.Contracts"/>
<envVar name="CommonProgramFiles" value="C:\Program Files\Common Files"/>
<envVar name="PROCESSOR_LEVEL" value="6"/>
<envVar name="ProgramW6432" value="C:\Program Files"/>
<envVar name="pex_instrumentation" value="1"/>
<envVar name="ProgramData" value="C:\ProgramData"/>
<envVar name="HOMEPATH" value="\Users\Vijayendra Jagtap"/>
<envVar name="pex_server_channel" value="pex7260"/>
<envVar name="COR_PROFILER" value="{fa6276ae-c2b7-443f-9cac-ea13fd3b342a}"/>
<envVar name="CLRMONITOR_FLAGS" value=""/>
<envVar name="CommonProgramW6432" value="C:\Program Files\Common Files"/>
<envVar name="SOPC_KIT_NIOS2" value="C:\intelFPGA_lite\18.0\nios2eds"/>
<envVar name="CLRMONITOR_PROTECT_ALL_CCTORS" value="1"/>
<envVar name="ProgramFiles(x86)" value="C:\Program Files (x86)"/>
<envVar name="VisualStudioDir" value="C:\Users\Vijayendra Jagtap\OneDrive\Documents\Visual Studio 2010"/>
<envVar name="PROCESSOR_ARCHITECTURE" value="AMD64"/>
<envVar name="CLRMONITOR_INSTRUMENT_ASSEMBLIES" value="FSharp.Core,FSharp.PowerPack,Microsoft.Contracts,Microsoft.VisualBasic,Microsoft.VisualStudio.QualityTools.UnitTestFramework,System,System.Core,System.Web,meta_projectAddToEnd"/>
<envVar name="DriverData" value="C:\Windows\System32\Drivers\DriverData"/>
<envVar name="HOMEDRIVE" value="C:"/>
<envVar name="windir" value="C:\WINDOWS"/>
<envVar name="SystemDrive" value="C:"/>
<envVar name="NUMBER_OF_PROCESSORS" value="8"/>
<envVar name="CLRMONITOR_INSTRUMENT_TYPES_EXCLUSIONS" value=""/>
<envVar name="CLRMONITOR_PROTECT_TYPES" value="Microsoft.FSharp.Text.Printf,Microsoft.FSharp.Text.PrintfImpl"/>
<envVar name="USERPROFILE" value="C:\Users\Vijayendra Jagtap"/>
<envVar name="ProgramFiles" value="C:\Program Files"/>
<envVar name="ComSpec" value="C:\WINDOWS\system32\cmd.exe"/>
<envVar name="USERDOMAIN_ROAMINGPROFILE" value="DESKTOP-OS6C121"/>
<envVar name="PATHEXT" value=".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC"/>
<envVar name="LOGONSERVER" value="\\DESKTOP-OS6C121"/>
<envVar name="ALLUSERSPROFILE" value="C:\ProgramData"/>
<envVar name="PSModulePath" value="C:\Program Files\WindowsPowerShell\Modules;C:\WINDOWS\system32\WindowsPowerShell\v1.0\Modules"/>
<envVar name="APPDATA" value="C:\Users\Vijayendra Jagtap\AppData\Roaming"/>
<envVar name="USERDOMAIN" value="DESKTOP-OS6C121"/>
<envVar name="COMPUTERNAME" value="DESKTOP-OS6C121"/>
<envVar name="pex_clientid" value="pex7260_1"/>
<envVar name="LOCALAPPDATA" value="C:\Users\Vijayendra Jagtap\AppData\Local"/>
<envVar name="CLRMONITOR_ERASE_CCTOR_TYPES" value=""/>
<envVar name="QUARTUS_ROOTDIR" value="C:\intelFPGA_lite\18.0\quartus"/>
<envVar name="CommonProgramFiles(x86)" value="C:\Program Files (x86)\Common Files"/>
<envVar name="PUBLIC" value="C:\Users\Public"/>
<envVar name="pex_wait_for_server_channel" value="1"/>
</envVars>
</environment>
<settings/>
<reflection/>
<assembly name="meta_projectAddToEnd" version="1.0.0.0" fileVersion="1.0.0.0" fullName="meta_projectAddToEnd, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll" fileName="meta_projectAddToEnd.dll"><settings testFramework="VisualStudioUnitTest" testLanguage="cs"/>
<fixture name="MetaProgram" type="MetaProject.MetaProgram" typeName="MetaProgram" token="2000002" href="fix\meta_projectAddToEnd.628.html"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="MetaProgram" token="2000002" namespace="MetaProject"/>
</type>
<settings typeUnderTest="MetaProject.MetaProgram"/>
<exploration shortName="Check(List, Int32)" fullName="MetaProject.MetaProgram.Check(List, Int32)"><method><definition assemblyName="meta_projectAddToEnd" name="Check" static="true" token="6000097"><declaringType assemblyName="meta_projectAddToEnd" name="MetaProgram" token="2000002" namespace="MetaProject"/>
<parameter name="l" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="List" token="2000003"><declaringType assemblyName="meta_projectAddToEnd" name="MetaProgram" token="2000002" namespace="MetaProject"/>
</definition>
</type>
</parameter>
<parameter name="x" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<log level="message" time="2019-02-15 20:26:06Z" category="progress" message="    0 runs"/>
<test name="Check" state="success" duration="0.08"/>
<generatedTest id="23633749-bcb4-42c5-9d72-4c0ab2b13339" index="1" run="1" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="Check81641"><declaringType assemblyName="meta_projectAddToEnd" name="MetaProgram" token="ffffffff" namespace="MetaProject"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="MetaProgram" token="ffffffff" namespace="MetaProject"/>
</type>
</parameter>
<rcov name="Block" dcov="47" dtot="58" acov="47" atot="58"/>
<rcov name="asserts" dcov="1" dtot="1" acov="1" atot="1"/>
<value name="l">new List{value=0,next=null}</value>
<value name="x">0</value>
<value name="Old_lcount">1</value>
<value name="Old_list">new List{value=0,next=null}</value>
<value name="New_list">new List{value=0,next=new List{value=0,next=null}}</value>
<value name="New_lcount">2</value>
<value name="Old_l2.count">2</value>
<value name="Old_list01">new List{value=0,next=new List{value=0,next=null}}</value>
<value name="New_list01">new List{value=0,next=new List{value=0,next=null}}</value>
<value name="New_l2.count">2</value>
<code><![CDATA[MetaProgram.List s0 = new MetaProgram.List();
s0.value = 0;
s0.next = (MetaProgram.List)null;
MetaProgram.Check(s0, 0);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(MetaProgram))]
public void Check81641()
{
    MetaProgram.List s0 = new MetaProgram.List();
    s0.value = 0;
    s0.next = (MetaProgram.List)null;
    MetaProgram.Check(s0, 0);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return l != (MetaProgram.List)null && l.next == (MetaProgram.List)null && methodof(l.addToEnd) == methodof(MetaProgram.List.addToEnd) && methodof(l.Equals) == methodof(MetaProgram.List.Equals);
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:26:06Z" category="coverage" message="coverage increased from 0 to 47 blocks (+47) after flipping MetaProject.MetaProgram.Check at 0x0002"/>
<test name="Check" state="success" duration="0.01"/>
<generatedTest id="ef3113be-e4dc-4585-ad4d-e26d410b19a5" index="2" run="2" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="Check89534"><declaringType assemblyName="meta_projectAddToEnd" name="MetaProgram" token="ffffffff" namespace="MetaProject"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="MetaProgram" token="ffffffff" namespace="MetaProject"/>
</type>
</parameter>
<rcov name="Block" dcov="7" dtot="0" acov="54" atot="58"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="l">new List{value=0,next=new List{value=0,next=null}}</value>
<value name="x">0</value>
<value name="Old_lcount">2</value>
<value name="Old_list">new List{value=0,next=new List{value=0,next=null}}</value>
<value name="New_list">new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}</value>
<value name="New_lcount">3</value>
<value name="Old_l2.count">3</value>
<value name="Old_list01">new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}</value>
<value name="New_list01">new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}</value>
<value name="New_l2.count">3</value>
<code><![CDATA[MetaProgram.List s0 = new MetaProgram.List();
s0.value = 0;
MetaProgram.List s1 = new MetaProgram.List();
s1.value = 0;
s1.next = (MetaProgram.List)null;
s0.next = s1;
MetaProgram.Check(s0, 0);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(MetaProgram))]
public void Check89534()
{
    MetaProgram.List s0 = new MetaProgram.List();
    s0.value = 0;
    MetaProgram.List s1 = new MetaProgram.List();
    s1.value = 0;
    s1.next = (MetaProgram.List)null;
    s0.next = s1;
    MetaProgram.Check(s0, 0);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[MetaProgram.List s2 = new;
MetaProgram.List s1 = l == l.next ? s2 : l.next;
MetaProgram.List s0 = s1;
MetaProgram.List s6 = new;
MetaProgram.List s7 = new;
MetaProgram.List s5 = s0 == s6 ? (MetaProgram.List)null : s0 == s7 ? s6 : s0 == s2 ? (MetaProgram.List)null : s0.next;
MetaProgram.List s4 = s0 == l.next ? s2 : s5;
MetaProgram.List s3 = s4;
MetaProgram.List s10 = new;
MetaProgram.List s9 = s0 == s6 ? s10 : s0 == s10 ? (MetaProgram.List)null : s3;
MetaProgram.List s8 = s9;
int s11 = s0 == s6 ? l.next.value : s0 == s7 ? l.value : s0 == s10 ? x : s0 == s2 ? x : s0.value;
int s12 = s8 == s6 ? l.next.value : s8 == s7 ? l.value : s8 == s10 ? x : s8 == s2 ? x : s8.value;
MetaProgram.List s14 = s3 == s6 ? (MetaProgram.List)null : s3 == s7 ? s6 : s3 == s2 ? (MetaProgram.List)null : s3.next;
MetaProgram.List s13 = s3 == l.next ? s2 : s14;
MetaProgram.List s17 = s8 == s6 ? (MetaProgram.List)null : s8 == s7 ? s6 : s8 == s2 ? (MetaProgram.List)null : s8.next;
MetaProgram.List s16 = s8 == l.next ? s2 : s17;
MetaProgram.List s15 = s8 == s6 ? s10 : s8 == s10 ? (MetaProgram.List)null : s16;
return l != (MetaProgram.List)null && l.next != (MetaProgram.List)null && 
                                      s0 != (MetaProgram.List)null && s3 != (MetaProgram.List)null && s8 != (MetaProgram.List)null && l.next.value == s11 && x == s12 && l.next.next == (MetaProgram.List)null && 
                                                                                                                                                                         methodof(l.addToEnd) == methodof(MetaProgram.List.addToEnd) && s13 == (MetaProgram.List)null && methodof(l.Equals) == methodof(MetaProgram.List.Equals) && s15 == (MetaProgram.List)null;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:26:06Z" category="coverage" message="coverage increased from 47 to 54 blocks (+7) after flipping MetaProject.MetaProgram+List.Count at 0x001d"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<generatedTest id="57592ff7-0734-41a6-b17a-91ebb6b44648" index="3" run="5" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="Check53934"><declaringType assemblyName="meta_projectAddToEnd" name="MetaProgram" token="ffffffff" namespace="MetaProject"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="MetaProgram" token="ffffffff" namespace="MetaProject"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="54" atot="58"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="l">new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}</value>
<value name="x">0</value>
<value name="Old_lcount">3</value>
<value name="Old_list">new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}</value>
<value name="New_list">new List{value=0,next=new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}}</value>
<value name="New_lcount">4</value>
<value name="Old_l2.count">4</value>
<value name="Old_list01">new List{value=0,next=new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}}</value>
<value name="New_list01">new List{value=0,next=new List{value=0,next=new List{value=0,next=new List{value=0,next=null}}}}</value>
<value name="New_l2.count">4</value>
<code><![CDATA[MetaProgram.List s0 = new MetaProgram.List();
s0.value = 0;
MetaProgram.List s1 = new MetaProgram.List();
s1.value = 0;
MetaProgram.List s2 = new MetaProgram.List();
s2.value = 0;
s2.next = (MetaProgram.List)null;
s1.next = s2;
s0.next = s1;
MetaProgram.Check(s0, 0);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(MetaProgram))]
public void Check53934()
{
    MetaProgram.List s0 = new MetaProgram.List();
    s0.value = 0;
    MetaProgram.List s1 = new MetaProgram.List();
    s1.value = 0;
    MetaProgram.List s2 = new MetaProgram.List();
    s2.value = 0;
    s2.next = (MetaProgram.List)null;
    s1.next = s2;
    s0.next = s1;
    MetaProgram.Check(s0, 0);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[MetaProgram.List s2 = new;
MetaProgram.List s1 = l == l.next.next ? s2 : l.next;
MetaProgram.List s0 = s1;
MetaProgram.List s6 = new;
MetaProgram.List s7 = new;
MetaProgram.List s8 = new;
MetaProgram.List s5 = s0 == s6 ? s7 : s0 == s8 ? s6 : s0 == s2 ? (MetaProgram.List)null : s0 == s7 ? (MetaProgram.List)null : s0.next;
MetaProgram.List s4 = s0 == l.next.next ? s2 : s5;
MetaProgram.List s3 = s4;
MetaProgram.List s11 = s3 == s6 ? s7 : s3 == s8 ? s6 : s3 == s2 ? (MetaProgram.List)null : s3 == s7 ? (MetaProgram.List)null : s3.next;
MetaProgram.List s10 = s3 == l.next.next ? s2 : s11;
MetaProgram.List s9 = s10;
MetaProgram.List s14 = new;
MetaProgram.List s13 = s0 == s14 ? (MetaProgram.List)null : s0 == s7 ? s14 : s3;
MetaProgram.List s12 = s13;
MetaProgram.List s18 = s12 == s6 ? s7 : s12 == s8 ? s6 : s12 == s2 ? (MetaProgram.List)null : s12 == s7 ? (MetaProgram.List)null : s12.next;
MetaProgram.List s17 = s12 == l.next.next ? s2 : s18;
MetaProgram.List s16 = s12 == s14 ? (MetaProgram.List)null : s12 == s7 ? s14 : s17;
MetaProgram.List s15 = s16;
int s19 = s0 == s6 ? l.next.value : s0 == s14 ? x : s0 == s8 ? l.value : s0 == s2 ? x : s0 == s7 ? l.next.next.value : s0.value;
int s20 = s12 == s6 ? l.next.value : s12 == s14 ? x : s12 == s8 ? l.value : s12 == s2 ? x : s12 == s7 ? l.next.next.value : s12.value;
int s21 = s15 == s6 ? l.next.value : s15 == s14 ? x : s15 == s8 ? l.value : s15 == s2 ? x : s15 == s7 ? l.next.next.value : s15.value;
MetaProgram.List s23 = s9 == s6 ? s7 : s9 == s8 ? s6 : s9 == s2 ? (MetaProgram.List)null : s9 == s7 ? (MetaProgram.List)null : s9.next;
MetaProgram.List s22 = s9 == l.next.next ? s2 : s23;
MetaProgram.List s26 = s15 == s6 ? s7 : s15 == s8 ? s6 : s15 == s2 ? (MetaProgram.List)null : s15 == s7 ? (MetaProgram.List)null : s15.next;
MetaProgram.List s25 = s15 == l.next.next ? s2 : s26;
MetaProgram.List s24 = s15 == s14 ? (MetaProgram.List)null : s15 == s7 ? s14 : s25;
return l != (MetaProgram.List)null && 
       l.next != (MetaProgram.List)null && l.next.next != (MetaProgram.List)null && s0 != (MetaProgram.List)null && s3 != (MetaProgram.List)null && s9 != (MetaProgram.List)null && 
                                                                                                                                                    s12 != (MetaProgram.List)null && s15 != (MetaProgram.List)null && l.next.value == s19 && l.next.next.value == s20 && x == s21 && l.next.next.next == (MetaProgram.List)null && 
                                                                                                                                                                                                                                                                                     methodof(l.addToEnd) == methodof(MetaProgram.List.addToEnd) && s22 == (MetaProgram.List)null && methodof(l.Equals) == methodof(MetaProgram.List.Equals) && s24 == (MetaProgram.List)null;
]]></pathCondition>
</generatedTest>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.02"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.00"/>
<test name="Check" state="success" duration="0.01"/>
<boundary kind="maxrunswithoutnewtests" value="100" message="maximum runs without new tests reached"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxRunsWithoutNewTests=200" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="200"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxRunsWithoutNewTests" token="17000348"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="Check" static="true" token="6000097"><declaringType assemblyName="meta_projectAddToEnd" name="MetaProgram" token="2000002" namespace="MetaProject"/>
<parameter name="l" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="List" token="2000003"><declaringType assemblyName="meta_projectAddToEnd" name="MetaProgram" token="2000002" namespace="MetaProject"/>
</definition>
</type>
</parameter>
<parameter name="x" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</parameter>
</definition>
</method>
</target>
</update>
</boundary>
<coverage domain="usercodeundertest" unit="block" covered="54" total="58" coveredRatio="0.93103448275862066"/>
<sourceCoverage xml="cov\e336\cov.xml" html="cov\e336\cov.html"/>
<result name="Check(List, Int32)" state="success" duration="7.5763527"/>
<duration start="2019-02-15 20:26:06Z" end="2019-02-15 20:26:14Z" seconds="7.597265"/>
<trajectory><image src="fix\metaprojectmetap636858375740881485.trajectories.png" width="800" height="1600"/>
</trajectory>
</exploration>
<coverage domain="usercodeundertest" unit="block" covered="54" total="58" coveredRatio="0.93103448275862066"/>
<sourceCoverage xml="cov\t628\cov.xml" html="cov\t628\cov.html"/>
<duration start="2019-02-15 20:26:06Z" end="2019-02-15 20:26:14Z" seconds="7.6496989"/>
</fixture>
<fixture name="Question" type="Solution.Question" typeName="Question" token="2000005" href="fix\meta_projectAddToEnd.632.html"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
</type>
<settings typeUnderTest="Solution.Question"/>
<exploration shortName="countDistinct(Int32[])" fullName="Solution.Question.countDistinct(Int32[])"><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
<settings maxRuns="360" testEmissionFilter="All"/>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="bd0bffe4-6bb4-4eb0-8f64-0ee39075c52b" index="1" run="1" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct260"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="3" dtot="15" acov="3" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">null</value>
<value name="result">0</value>
<code><![CDATA[int i;
i = Question.countDistinct((int[])null);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct260()
{
    int i;
    i = Question.countDistinct((int[])null);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array == (int[])null;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:26:14Z" category="coverage" message="coverage increased from 0 to 3 blocks (+3) after flipping Solution.Question.countDistinct at 0x0006"/>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="e577b560-4b31-4a40-9c2c-f05e0a6de7ac" index="2" run="2" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct504"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="1" dtot="0" acov="4" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[0];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct504()
{
    int i;
    int[] ints = new int[0];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array.Length == 0L;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:26:14Z" category="coverage" message="coverage increased from 3 to 4 blocks (+1) after flipping Solution.Question.countDistinct at 0x0006"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="573da9fb-7273-4482-ac44-c96ec7ed8e36" index="3" run="3" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct703"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="0" acov="6" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[1];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct703()
{
    int i;
    int[] ints = new int[1];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array.Length == 1L;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:26:14Z" category="coverage" message="coverage increased from 4 to 6 blocks (+2) after flipping Solution.Question.countDistinct at 0x0018"/>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="57c12a66-0190-400e-9398-69a7b751c871" index="4" run="4" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct585"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="9" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[2];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct585()
{
    int i;
    int[] ints = new int[2];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 1L < array.Length && array[0L] == array[1L] && array.Length == 2L;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:26:14Z" category="coverage" message="coverage increased from 6 to 15 blocks (+9) after flipping Solution.Question.countDistinct at 0x002e"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="dea7af18-f1c6-450f-aee6-03644fe4583a" index="5" run="5" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct888"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[2];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct888()
{
    int i;
    int[] ints = new int[2];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 1L < array.Length && array.Length == 2L && array[0L] != array[1L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="18be368f-d432-42ea-af0f-4f9b01c0e093" index="6" run="6" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct609"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct609()
{
    int i;
    int[] ints = new int[3];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 2L < array.Length && array[1L] == array[2L] && array.Length == 3L && array[0L] != array[1L] && array[0L] != array[2L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a1334fda-9bd0-4bea-aa97-9afe15cc3e67" index="7" run="7" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct114"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 0, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[0] = 3;
ints[2] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct114()
{
    int i;
    int[] ints = new int[3];
    ints[0] = 3;
    ints[2] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 2L < array.Length && array.Length == 3L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="847572ff-3a31-4cc8-a4fd-8e362741c197" index="8" run="8" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct181"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct181()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[1L] == array[2L] && 3L < array.Length && array[1L] == array[3L] && array[2L] == array[3L] && array.Length == 4L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="c2f6405a-023f-4625-a98e-781a2ffaf15a" index="9" run="9" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct640"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[3];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct640()
{
    int i;
    int[] ints = new int[3];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 2L < array.Length && array[0L] == array[2L] && array[1L] == array[2L] && array.Length == 3L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6589e5a4-c2a4-4802-87bb-ab09c2aaf996" index="10" run="10" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct873"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct873()
{
    int i;
    int[] ints = new int[3];
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 2L < array.Length && array.Length == 3L && array[0L] != array[2L] && array[1L] != array[2L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="38d1a330-6d35-4206-a842-3568d391dd5f" index="11" run="11" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct875"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct875()
{
    int i;
    int[] ints = new int[3];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 2L < array.Length && array[0L] == array[2L] && array.Length == 3L && array[0L] != array[1L] && array[1L] != array[2L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5948f410-3e75-4e09-9ed2-d5416718b910" index="12" run="12" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct468"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct468()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[2L] && 3L < array.Length && array[1L] == array[3L] && array.Length == 4L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ad8b45cf-4c8f-468b-94bd-3d32982802de" index="13" run="13" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct171"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct171()
{
    int i;
    int[] ints = new int[4];
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && 3L < array.Length && array[0L] == array[3L] && array[1L] == array[3L] && array.Length == 4L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d170af15-3911-4078-94aa-73299644a226" index="14" run="14" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct117"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 0, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 3;
ints[2] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct117()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 3;
    ints[2] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       3L < array.Length && array[1L] == array[3L] && array.Length == 4L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="fcf7963c-cb7a-4b94-95fc-417fc75f6d9c" index="15" run="15" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct620"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct620()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && 3L < array.Length && array[2L] == array[3L] && array.Length == 4L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="c57f1849-c5d8-46b0-9a86-4107f7f1d861" index="16" run="16" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct653"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[4];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct653()
{
    int i;
    int[] ints = new int[4];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 3L < array.Length && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array.Length == 4L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="906ad79e-f6b9-404f-bb43-9c1ce73edf9c" index="17" run="17" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct38"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 32, 1, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[1] = 32;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct38()
{
    int i;
    int[] ints = new int[4];
    ints[1] = 32;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       3L < array.Length && array[2L] == array[3L] && array.Length == 4L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="382bce8e-1687-4cf3-b600-039d151509f4" index="18" run="18" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct297"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct297()
{
    int i;
    int[] ints = new int[4];
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 3L < array.Length && array.Length == 4L && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="039eb745-200e-4007-8852-abe381521322" index="19" run="19" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct680"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 32, 1, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[1] = 32;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct680()
{
    int i;
    int[] ints = new int[5];
    ints[1] = 32;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e14906f8-10d9-4e3b-b5d5-613c939b9d32" index="20" run="20" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct236"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 32, 1, 1, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 32;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct236()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 32;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 5L < array.Length && 
                                                                                   array[0L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                           array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6b4f8a2e-8748-414f-b830-e5becdffaa96" index="21" run="21" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct832"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{16, 0, 1, 16}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 16;
ints[2] = 1;
ints[3] = 16;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct832()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 16;
    ints[2] = 1;
    ints[3] = 16;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       3L < array.Length && array[0L] == array[3L] && array.Length == 4L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5bc077d4-e92d-4bf1-ac9b-2686970d7f7a" index="22" run="22" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct668"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[5];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct668()
{
    int i;
    int[] ints = new int[5];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && 
                                                                                                             array[1L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && array.Length == 5L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="4a81f57d-c44b-421e-a9bc-c32e6a80d868" index="23" run="23" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException662"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 32, 1, 1, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[1] = 32;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException662()
{
    int i;
    int[] ints = new int[7];
    ints[1] = 32;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && 6 < (int)(array.Length) && 6L < array.Length && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 
                                                                                                                                                                                                                 array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="da5c31de-adc3-4c44-b0aa-f11b90f11b34" index="24" run="24" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct143"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 0, 0, 1, 1, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct143()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && 6L < array.Length && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array.Length == 7L && 
                                                                                                                                                                                                                array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                            array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="304fa0e2-383e-457e-bb24-39576f2b45b0" index="25" run="25" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct927"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct927()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[2L] && 3L < array.Length && array[0L] == array[3L] && array[2L] == array[3L] && array.Length == 4L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="11e784a0-b34c-4669-b066-878185e8079f" index="26" run="26" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct954"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct954()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array[1L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="531fa18f-a3e2-483d-b173-d876b457d84f" index="27" run="27" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct126"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct126()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 
                               array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && 
                                                                                                                                                                                           array[3L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                       array[8L] == array[9L] && 10L < array.Length && array[2L] == array[10L] && array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array.Length == 11L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && 
array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && 
array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && 
array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && 
array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="f9434d7e-197b-4be8-8420-e527832e56b5" index="28" run="28" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct983"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{16, 0, 1, 16, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 16;
ints[2] = 1;
ints[3] = 16;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct983()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 16;
    ints[2] = 1;
    ints[3] = 16;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && 4L < array.Length && array[1L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6f0dad46-b068-4a73-8de1-cb945958d87d" index="29" run="29" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct111"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 16, 0, 0, 17}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[1] = 16;
ints[4] = 17;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct111()
{
    int i;
    int[] ints = new int[5];
    ints[1] = 16;
    ints[4] = 17;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array.Length == 5L && 
                                                                                                                                  array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a85cc969-1431-48f8-aea5-ea61bb5c39fd" index="30" run="30" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct637"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct637()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 
                               array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && 
                                                                                                                                                                                           array[3L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                       array[8L] == array[9L] && 10L < array.Length && array[1L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && 
array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && 
array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[2L] != array[10L] && 
array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L] && array[9L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="4ed67ba4-6ba5-4ae3-9a15-75b5c65bc142" index="31" run="31" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct394"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct394()
{
    int i;
    int[] ints = new int[5];
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 4L < array.Length && array[0L] == array[4L] && 
                                                                                                                                  array[1L] == array[4L] && array[2L] == array[4L] && array.Length == 5L && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="52663e93-54df-4987-8b73-b974d4e5cce1" index="32" run="32" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct768"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 5, 0, 4, 4, 5, 5, 5, 6, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct768()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 
                               array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[8L] && 
                                                                                                                                                                                           array[1L] == array[9L] && array[8L] == array[9L] && 10L < array.Length && array[1L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && 
                                                                                                                                                                                                                                                                                                                                                      array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && 
array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3caf4c14-c8f8-41f2-ad83-34aa64f178d6" index="33" run="33" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct976"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 0, 4, 4, 5, 5, 5, 6, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct976()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[8L] && 9L < array.Length && array[1L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && 
                                                                                                                                                                                                                                                                                              array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                          array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e7ccef94-a6c8-4ece-ac65-68df32bb58c8" index="34" run="34" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct79"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct79()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[1L] == array[2L] && 3L < array.Length && array[0L] == array[3L] && array.Length == 4L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="147acf11-55cc-4502-aa4e-6a8575b93355" index="35" run="35" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct502"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct502()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[2L] == array[10L] && array[3L] == array[10L] && array[7L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 array[8L] == array[10L] && array[9L] == array[10L] && 11L < array.Length && array[2L] == array[11L] && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && 
array[9L] == array[11L] && array[10L] == array[11L] && array.Length == 12L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && 
array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && 
array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && 
array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="7ae1aa71-f65b-4f8f-ab91-8351ef20851d" index="36" run="36" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct478"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct478()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && 
                                                                                                                                                                                                                                               array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[2L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[2L] == array[11L] && array[3L] == array[11L] && array[7L] == array[11L] && 
array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 12L < array.Length && array[2L] == array[12L] && array[3L] == array[12L] && array[7L] == array[12L] && 
array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && array[11L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && array[0L] != array[2L] && 
array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && 
array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && 
array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && 
array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && 
array[5L] != array[11L] && array[6L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9d5f9eea-4d43-4afb-980a-85837fbc404a" index="37" run="37" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct993"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 0, 0, 1, 1, 1, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct993()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && 8L < array.Length && 
                                                                                                                                                                                                                                               array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && array.Length == 9L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                                                                                                                                                                                       array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && 
array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && 
array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="9b330b43-5ba2-467e-99c1-63863f9db365" index="38" run="38" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct431"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct431()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && 
                                                                                                                                                                                                                     array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                 array[2L] == array[10L] && array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[2L] == array[11L] && array[3L] == array[11L] && 
array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && array[2L] == array[12L] && array[3L] == array[12L] && array[7L] == array[12L] && 
array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && array[11L] == array[12L] && 13L < array.Length && array[2L] == array[13L] && array[3L] == array[13L] && 
array[7L] == array[13L] && array[8L] == array[13L] && array[9L] == array[13L] && array[10L] == array[13L] && array[11L] == array[13L] && array[12L] == array[13L] && array.Length == 14L && 
array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && 
array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && 
array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[4L] != array[12L] && 
array[5L] != array[12L] && array[6L] != array[12L] && array[0L] != array[13L] && array[1L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && array[6L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="d5a920cd-7814-4763-82ab-c78f2ad16080" index="39" run="39" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct426"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct426()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="4e826e5e-2cfe-4f40-a634-ab75ae76956f" index="40" run="40" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct206"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct206()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="428da2a2-6326-4311-8f67-d2efa910f78f" index="41" run="41" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct571"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 0, 0, 1, 1, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct571()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 7L < array.Length && array[2L] == array[7L] && 
                                                                                                                                                                                                                array[3L] == array[7L] && array.Length == 8L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && 
array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="dfd0c8a2-f6b9-4098-9421-eecdfa51d687" index="42" run="42" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct909"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct909()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && 4L < array.Length && array[2L] == array[4L] && array[3L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="df4da222-14cd-4203-babe-a7ec96d50a7f" index="43" run="43" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct324"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct324()
{
    int i;
    int[] ints = new int[5];
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && 
                                                                                                             array[1L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array.Length == 5L && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="25ebea5e-4fea-4a51-8a65-097b0e57dc0d" index="44" run="44" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct780"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct780()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 
                                                                                   array[1L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="2b432530-c397-4d1f-b24e-14b6ed66debe" index="45" run="45" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct731"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct731()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="30c03797-5697-45e6-886b-214e59aebb29" index="46" run="46" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct608"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 0, 0, 3}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 2;
ints[3] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct608()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 2;
    ints[3] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[1L] == array[2L] && 3L < array.Length && array.Length == 4L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="088aaffa-0413-4cf2-8a58-7b0ff74db00e" index="47" run="47" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct597"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct597()
{
    int i;
    int[] ints = new int[6];
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 
                                                                                   array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && 5L < array.Length && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                                                                                                                          array[3L] == array[5L] && array.Length == 6L && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="c25ba579-bfc2-453a-b727-aa9d7344c83d" index="48" run="48" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct769"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct769()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7d7b8efa-a22f-40de-9897-48ad16965d82" index="49" run="49" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct828"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct828()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[1L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array[1L] == array[4L] && 
                                                                                                                                  array[2L] == array[4L] && array[3L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[0L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="c9067365-125c-4f4f-8a2c-360147a11d57" index="50" run="50" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct492"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 0, 2, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 3;
ints[2] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct492()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 3;
    ints[2] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[3L] && 4L < array.Length && array[1L] == array[4L] && array[3L] == array[4L] && array.Length == 5L && 
                                                                                                                                  array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="1d183429-a84b-4c03-920e-f9eddc3fde94" index="51" run="51" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct966"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 32}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[15] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct966()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[15] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="11d91a48-9630-44a8-97ff-7fb551134ae5" index="52" run="52" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct29701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct29701()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e12aab5d-6cdb-4d99-a58c-16ec85dbb84e" index="53" run="53" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct8"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 0, 4, 4, 5, 5, 5, 6}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct8()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 7L < array.Length && array.Length == 8L && 
                                                                                                                                                                                                                array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                            array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="82bd0d8c-d55f-44a6-8aae-1c9f8e4969ed" index="54" run="54" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct353"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct353()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="559edc63-f188-4ba3-94be-0ab5de6690a9" index="55" run="55" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct234"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 0, 0, 1, 1, 1, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct234()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && 
                                                                                                                                                                                                                                                                                                   9L < array.Length && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && 
array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="32a63ac3-e459-4b54-9044-ba4de4ad642d" index="56" run="56" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct647"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct647()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="121c9c2d-7577-43ed-b56f-97d7a7acc6f7" index="57" run="57" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct23401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct23401()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[0L] == array[3L] && 4L < array.Length && array[1L] == array[4L] && array[2L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="fd06cb3b-8f86-4a83-a4d9-794689d03d53" index="58" run="58" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct123"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct123()
{
    int i;
    int[] ints = new int[21];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="9d5bcc9d-2039-42b7-9f60-e88dea2790e7" index="59" run="59" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct269"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct269()
{
    int i;
    int[] ints = new int[22];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="f9a65c38-44e5-48e0-a848-0e3998810e4d" index="60" run="60" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct756"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[1] = 1;
ints[3] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct756()
{
    int i;
    int[] ints = new int[4];
    ints[1] = 1;
    ints[3] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[2L] && 3L < array.Length && array.Length == 4L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e5ee864d-dd46-4f42-8079-ce9bc861e590" index="61" run="61" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct217"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 5, 0, 4, 4, 5, 5, 5, 6, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct217()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[8L] && array[1L] == array[9L] && array[8L] == array[9L] && array[1L] == array[10L] && array[8L] == array[10L] && 
                                                                                                                                                                                                                                                                                                    array[9L] == array[10L] && 11L < array.Length && array[1L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && array.Length == 12L && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && 
array[0L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="25936c18-81a1-4d92-b03c-593f7ee8f871" index="62" run="62" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct952"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct952()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="eb610b3e-6a38-41fd-a2d6-c2d8f6c94b4e" index="63" run="63" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct618"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=24; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[24];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct618()
{
    int i;
    int[] ints = new int[24];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="09290411-359a-485d-89c3-c1d156ada86b" index="64" run="64" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct537"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct537()
{
    int i;
    int[] ints = new int[22];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="35bfe0de-5383-4995-ba27-a1d9e82d26d2" index="65" run="65" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct481"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=25; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[25];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct481()
{
    int i;
    int[] ints = new int[25];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="4d59704e-c851-4688-a898-5fdb29ee720d" index="66" run="66" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct322"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=26; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[26];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct322()
{
    int i;
    int[] ints = new int[26];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="af9431e1-0fff-475a-a532-9ed6e41f7421" index="67" run="67" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct46"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[1] = 1;
ints[3] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct46()
{
    int i;
    int[] ints = new int[5];
    ints[1] = 1;
    ints[3] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 4L < array.Length && array[0L] == array[4L] && array[2L] == array[4L] && array.Length == 5L && 
                                                                                                                                  array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="bebab0bd-3b22-415d-81e6-c1b288944c96" index="68" run="68" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct106"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 0, 0, 3, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 2;
ints[3] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct106()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 2;
    ints[3] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && 4L < array.Length && array[1L] == array[4L] && array[2L] == array[4L] && array.Length == 5L && 
                                                                                                                                  array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="c972fe9f-490e-4efc-9b4b-9f5b86427aa9" index="69" run="69" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct623"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=27; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[27];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct623()
{
    int i;
    int[] ints = new int[27];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.03"/>
<generatedTest id="446551b5-0928-4717-9708-4c1374540e83" index="70" run="70" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct876"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct876()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.03"/>
<generatedTest id="75fa5537-adb0-45cb-add3-8c09048c8a39" index="71" run="71" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct598"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=29; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[29];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct598()
{
    int i;
    int[] ints = new int[29];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.03"/>
<generatedTest id="39b16e4c-4e22-4d87-8329-9e432cfb28f5" index="72" run="72" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct726"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct726()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="c3063e8f-fc3f-4ab2-b59b-ce15aae8dd44" index="73" run="73" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct363"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 5, 0, 4, 4, 5, 5, 5, 6, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct363()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[8L] && array[1L] == array[9L] && array[8L] == array[9L] && 
                                                                                                                                                                                                                                               array[1L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[1L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                 12L < array.Length && array[1L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && array[11L] == array[12L] && array.Length == 13L && 
array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && 
array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && 
array[0L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && 
array[0L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<boundary kind="maxconditions" value="500" message="maximum number of conditions exceeded"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<generatedTest id="2149247f-cdef-4207-8a10-8019d1293b11" index="74" run="74" status="pathboundsexceeded" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct891"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=31; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[31];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void countDistinct891()
{
    int i;
    int[] ints = new int[31];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<boundaryCodeUpdate kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</boundaryCodeUpdate>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="f4d5a544-3bdc-42c5-a8a4-2d3f1317740e" index="75" run="75" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct71"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct71()
{
    int i;
    int[] ints = new int[5];
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[3L] && array[1L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && 
                                                                                                                                  array[1L] == array[4L] && array[3L] == array[4L] && array.Length == 5L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[3L] && array[2L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="0760f840-8ef6-4538-95ed-cd0307b523ea" index="76" run="76" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct163"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[6];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct163()
{
    int i;
    int[] ints = new int[6];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && 
                                                                                                                                                                                                                     array[3L] == array[4L] && 5L < array.Length && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array.Length == 6L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="2eeaec66-c038-4b4a-b4ef-ce0b97564e55" index="77" run="77" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct281"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 2, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[2] = 2;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct281()
{
    int i;
    int[] ints = new int[4];
    ints[2] = 2;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && 3L < array.Length && array.Length == 4L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a2cc56a7-cdfa-4786-87d6-115ab9f6acb3" index="78" run="78" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct531"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct531()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[1L] == array[3L] && array[2L] == array[3L] && 
                                                                                   array[1L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && 
                                                                                                                                                                                                                                          array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[0L] != array[4L] && array[0L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="73fff193-14a7-4543-93c0-7214efb50e42" index="79" run="79" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct35301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 17, 25}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[2] = 17;
ints[3] = 25;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct35301()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[2] = 17;
    ints[3] = 25;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       3L < array.Length && array.Length == 4L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="d3af798b-3fee-4576-abe5-30b4116fdb52" index="80" run="80" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct425"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct425()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="583c1aee-c556-457e-8229-a007710f1a1d" index="81" run="81" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct854"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 17, 25, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[2] = 17;
ints[3] = 25;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct854()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[2] = 17;
    ints[3] = 25;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 4L < array.Length && array[1L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                              array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="96bbab95-c86d-4470-995f-ff5c337a52a2" index="82" run="82" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct89"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct89()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 
                               array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && 
                                                                                                                                                                                           array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && 10L < array.Length && array[2L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                   array[3L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L] && 
array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6f5623d1-29c0-4162-b925-641e5c2c39a8" index="83" run="83" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct173"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{512, 8, 0, 0, 512, 512, 512, 1, 512}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct173()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 8L < array.Length && array[0L] == array[8L] && array[4L] == array[8L] && 
                                                                                                                                                                                                                                          array[5L] == array[8L] && array[6L] == array[8L] && array.Length == 9L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                  array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="4b575ea8-b80b-4b38-b07e-731f2f4366b4" index="84" run="84" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct3801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 2, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 1;
ints[3] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct3801()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 1;
    ints[3] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && array[2L] == array[4L] && 
                                                                                   5L < array.Length && array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="555c0848-ca78-4707-8503-a1a47c18806e" index="85" run="85" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct830"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 2, 0, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 2;
ints[2] = 1;
ints[3] = 1;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 1;
ints[16] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct830()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 2;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 1;
    ints[16] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="34dbd98d-3071-4ec1-947e-802f36e68a0f" index="86" run="86" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct613"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct613()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d5363fe9-2052-4346-a67c-a4a39ae2620c" index="87" run="87" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct696"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 0, 1, 3}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 1;
ints[4] = 1;
ints[5] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct696()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 1;
    ints[4] = 1;
    ints[5] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 
                                                                                   array[1L] == array[4L] && 5L < array.Length && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                      array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3162d70c-7c66-4882-bbec-16376cd37eef" index="88" run="88" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException435"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 2, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[1] = 1;
ints[3] = 2;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException435()
{
    int i;
    int[] ints = new int[7];
    ints[1] = 1;
    ints[3] = 2;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && 
                                                         array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && 6 < (int)(array.Length) && 6L < array.Length && array[0L] == array[6L] && 
                                                                                                                                                                                                                 array[2L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[3L] != array[6L];
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:26:16Z" category="progress" message="   88 runs, 15/15 blocks covered"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3b738822-f7ca-407c-ae62-5657b2e0f1fb" index="89" run="89" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct364"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 1, 2, 0, 2, 2, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct364()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && 
                                                         array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && 6L < array.Length && array[0L] == array[6L] && array[2L] == array[6L] && 
                                                                                                                                                                                                                array[4L] == array[6L] && array[5L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[3L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3b390762-759b-49bd-9502-321917abcd72" index="90" run="90" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct36401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{512, 8, 0, 0, 512, 512, 512, 1, 512, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct36401()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && 9L < array.Length && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[9L] && array[3L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                            array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.03"/>
<generatedTest id="be9ccdd8-b8ce-4106-a726-8404c06f605e" index="91" run="91" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct764"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 1, 128, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 1;
ints[1] = 128;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[29] = 128;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct764()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 1;
    ints[1] = 128;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[29] = 128;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="4ec8e62a-9097-4715-bf51-8ad5ff63cb0f" index="92" run="92" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct654"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct654()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[2L] == array[9L] && 
                                                                                                                                                                                                                                                                                                   array[3L] == array[9L] && array[2L] == array[10L] && array[3L] == array[10L] && array[9L] == array[10L] && 11L < array.Length && array[2L] == array[11L] && array[3L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[9L] == array[11L] && array[10L] == array[11L] && array.Length == 12L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L] && 
array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L] && 
array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && array[8L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="5c56bf1e-94fd-492f-9f79-8937b0871a5d" index="93" run="93" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct72"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=24; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[24];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct72()
{
    int i;
    int[] ints = new int[24];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3d29e36f-be01-4a90-9542-e171fc2e2024" index="94" run="94" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct442"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct442()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[1L] == array[3L] && 4L < array.Length && array[1L] == array[4L] && array[3L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="5903ea7f-0791-4365-bda2-345960d91bd4" index="95" run="95" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct328"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 8, 0, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 8}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 8;
ints[2] = 1;
ints[3] = 1;
ints[4] = 8;
ints[5] = 8;
ints[6] = 8;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 8;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct328()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 8;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 8;
    ints[5] = 8;
    ints[6] = 8;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 8;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="38953e6f-ccf4-4aff-a3f9-1b7018d97024" index="96" run="96" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct402"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=25; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[25];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct402()
{
    int i;
    int[] ints = new int[25];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="0d6e94a4-71b9-4836-a3c2-15ec4491333b" index="97" run="97" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct151"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct151()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="b9f85204-456d-479c-81df-bd27a7dd6f99" index="98" run="98" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct456"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=26; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[26];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct456()
{
    int i;
    int[] ints = new int[26];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="819b79e8-cff3-4c36-a5dd-f948fad27289" index="99" run="99" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct354"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 0, 4, 4, 5, 5, 5, 6, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct354()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 8L < array.Length && array[1L] == array[8L] && array.Length == 9L && 
                                                                                                                                                                                                                                          array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                      array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="8475a38c-f62d-47dd-a59e-22bb712a0b04" index="100" run="100" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct565"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=27; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[27];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct565()
{
    int i;
    int[] ints = new int[27];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ac45e53b-8c3f-479d-b7be-d736fe6e0641" index="101" run="101" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct366"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct366()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && 
                                                                                                                                  array[2L] == array[4L] && array[3L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[1L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="654f0110-fb11-4030-b40b-fa15e96c9fd2" index="102" run="102" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct95401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct95401()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[1L] == array[10L] && 11L < array.Length && array[2L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                            array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array.Length == 12L && array[0L] != array[1L] && array[0L] != array[2L] && 
array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && 
array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && 
array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && 
array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L] && 
array[9L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[10L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="75ff5a53-c09e-4cf7-8966-d15222fe5ad9" index="103" run="103" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct928"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct928()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && array[2L] == array[4L] && 
                                                                                   array[3L] == array[4L] && 5L < array.Length && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[2L] && 
                                                                                                                                                                                                                                      array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="c1c85788-ddf3-4e63-bd49-54766cc2fc4e" index="104" run="104" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct12"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[2] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct12()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[2] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[1L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array[2L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="4e589816-4bb1-44e0-b179-6ef9038d19df" index="105" run="105" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct874"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct874()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="2e48044f-81a0-44ca-9f29-cf21974fab19" index="106" run="106" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct308"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 2, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[2] = 2;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct308()
{
    int i;
    int[] ints = new int[5];
    ints[2] = 2;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 4L < array.Length && array[0L] == array[4L] && array[1L] == array[4L] && array.Length == 5L && 
                                                                                                                                  array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="18bc248a-44a5-4e63-8fbb-ecb7d0b56c7b" index="107" run="107" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct337"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 5, 0, 1, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 5;
ints[3] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct337()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 5;
    ints[3] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array[3L] == array[4L] && array.Length == 5L && 
                                                                                                                                  array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L];
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:26:17Z" category="progress" message="  250 constraint systems (42.80% solved, 57.20% proven unsatisfiable), flipping location Question.countDistinct(Int32[]) at 0x0052 took 0s (57.79%)"/>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="e81b805f-fcfe-47fc-a863-b0a5cf123caa" index="108" run="108" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct544"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct544()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && 
                                                                                                                                                                                                                                               array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[2L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[2L] == array[11L] && array[3L] == array[11L] && array[7L] == array[11L] && 
array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 12L < array.Length && array.Length == 13L && array[0L] != array[1L] && array[0L] != array[2L] && 
array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && 
array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && 
array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && 
array[5L] != array[11L] && array[6L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && array[4L] != array[12L] && 
array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && array[8L] != array[12L] && array[9L] != array[12L] && array[10L] != array[12L] && array[11L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5628ecd4-f5a8-436d-85cd-3f55a6c15ba8" index="109" run="109" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct87501"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct87501()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[4L] && 
                                                                                   array[2L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                      array[0L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e36a1d6a-9d73-41df-88a2-204c7d55395b" index="110" run="110" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct771"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct771()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[3L] && array[1L] == array[3L] && 4L < array.Length && array[2L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="b9550be0-3f90-4114-8e9c-4835a78d52bc" index="111" run="111" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct543"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[15] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct543()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[15] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="0cd5b9e9-fa01-450a-a3ce-84bdd7eab8f4" index="112" run="112" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct643"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct643()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[1L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e04ed612-ba15-4784-aea1-7e5a636447f4" index="113" run="113" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException8"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException8()
{
    int i;
    int[] ints = new int[7];
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && 
                                                                                                                                                                                                                     array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 6 < (int)(array.Length) && 
                                                                                                                                                                                                                                                                                                                                                                                 6L < array.Length && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="adb804b3-b13b-4c5d-8e7c-cdb64209d077" index="114" run="114" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct735"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[7];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct735()
{
    int i;
    int[] ints = new int[7];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && 
                                                                                                                                                                                           array[2L] == array[4L] && array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 
                                                                                                                                                                                                                                                                                                                                                       6L < array.Length && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array.Length == 7L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<boundary kind="maxconditions" value="500" message="maximum number of conditions exceeded"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<generatedTest id="302d508c-2de6-4e87-b466-f93e4771007a" index="115" run="115" status="pathboundsexceeded" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct440"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=31; 1, 128, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[31];
ints[0] = 1;
ints[1] = 128;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[29] = 128;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void countDistinct440()
{
    int i;
    int[] ints = new int[31];
    ints[0] = 1;
    ints[1] = 128;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[29] = 128;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<boundaryCodeUpdate kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</boundaryCodeUpdate>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="d91201db-188a-4910-90e8-f309deb9607f" index="116" run="116" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct745"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct745()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && 
                                                                                                                                                                                                                     array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                 array[2L] == array[10L] && array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[2L] == array[11L] && array[3L] == array[11L] && 
array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 13L < array.Length && array[2L] == array[13L] && array[3L] == array[13L] && 
array[7L] == array[13L] && array[8L] == array[13L] && array[9L] == array[13L] && array[10L] == array[13L] && array[11L] == array[13L] && array.Length == 14L && array[0L] != array[1L] && 
array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && 
array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && 
array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && 
array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && 
array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && array[8L] != array[12L] && array[9L] != array[12L] && array[10L] != array[12L] && 
array[11L] != array[12L] && array[0L] != array[13L] && array[1L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && array[6L] != array[13L] && array[12L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6c5e2c00-00b6-43c8-9aba-e7e5bc589db2" index="117" run="117" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct519"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{16, 0, 1, 16, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 16;
ints[2] = 1;
ints[3] = 16;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct519()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 16;
    ints[2] = 1;
    ints[3] = 16;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && array[1L] == array[4L] && 5L < array.Length && 
                                                                                   array[1L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                           array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a38700d9-7f90-4322-9d42-d2a007ba3c2c" index="118" run="118" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct987"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 0, 0, 3, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 2;
ints[3] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct987()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 2;
    ints[3] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[1L] == array[4L] && array[2L] == array[4L] && 
                                                                                   5L < array.Length && array[1L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                                                                                                                                      array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1994b47e-61d7-4145-ab88-7f0e56a6bbe1" index="119" run="119" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct561"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 1, 3, 0, 2}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 3;
ints[1] = 1;
ints[2] = 3;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct561()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 3;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 4L < array.Length && array.Length == 5L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                              array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="2eb7b842-33da-49ee-8b8e-63cba72b52e5" index="120" run="120" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct686"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 8, 0, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 8, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 8;
ints[2] = 1;
ints[3] = 1;
ints[4] = 8;
ints[5] = 8;
ints[6] = 8;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 8;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct686()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 8;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 8;
    ints[5] = 8;
    ints[6] = 8;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 8;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="62b0ade7-8b08-42c3-b7d8-31a9f0a52da5" index="121" run="121" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct179"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 1, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[3] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct179()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[3] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[0L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array[3L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="fe608276-1ad5-48ce-823c-7d775be85a80" index="122" run="122" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct995"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 1, 3, 0, 2, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 3;
ints[1] = 1;
ints[2] = 3;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct995()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 3;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 5L < array.Length && array[3L] == array[5L] && 
                                                                              array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                      array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="eab94672-fa0b-4967-bb0a-e5b8c83a1e8a" index="123" run="123" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct761"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 2, 1, 2, 0, 2, 2, 2, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct761()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 
                               array[0L] == array[4L] && array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && 
                                                                                                                                                                                           array[4L] == array[6L] && array[5L] == array[6L] && array[3L] == array[7L] && array[3L] == array[8L] && array[7L] == array[8L] && array[3L] == array[9L] && array[7L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                       array[8L] == array[9L] && 10L < array.Length && array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[4L] != array[8L] && 
array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && 
array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="514a282e-72ca-4c1e-9368-7db112e822f9" index="124" run="124" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct265"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 1, 2, 0, 2, 2, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct265()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && 
                                                         array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && 
                                                                                                                                                                                                                     array[5L] == array[6L] && 7L < array.Length && array[3L] == array[7L] && array.Length == 8L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && 
array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="f327a73f-a185-426c-9093-77b0458a4652" index="125" run="125" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct691"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct691()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 4L < array.Length && array[3L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="da002804-9aab-465d-86e3-02b267496404" index="126" run="126" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct255"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct255()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && 
                                                                                                                                                                                                                                               array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[1L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[2L] == array[11L] && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && 12L < array.Length && array[2L] == array[12L] && 
array[3L] == array[12L] && array[7L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[11L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && 
array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && 
array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && 
array[8L] != array[10L] && array[9L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           array[10L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[10L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="98e430e0-db72-49dc-af11-3034b586fdf3" index="127" run="127" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct435"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{16, 0, 0, 1, 16}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 16;
ints[3] = 1;
ints[4] = 16;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct435()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 16;
    ints[3] = 1;
    ints[4] = 16;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && 4L < array.Length && array[0L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="8ecc74cb-3e78-4037-9930-8c61535dab34" index="128" run="128" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException14"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 1, 3, 0, 2, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 3;
ints[1] = 1;
ints[2] = 3;
ints[4] = 2;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException14()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 3;
    ints[4] = 2;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && 
                                                         6 < (int)(array.Length) && 6L < array.Length && array[3L] == array[6L] && array[5L] == array[6L] && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                 array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="278f0eee-7bb3-4790-a54a-9a4aa4c200bd" index="129" run="129" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct43101"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 64, 0, 1, 4, 1, 1}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct43101()
{
    int i;
    int[] ints = new int[7];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && 
                                                         6L < array.Length && array[3L] == array[6L] && array[5L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                            array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="23225185-ab7d-4909-ac8d-31f019bfc714" index="130" run="130" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct246"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=29; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[29];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct246()
{
    int i;
    int[] ints = new int[29];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="2a659e5c-66f1-4c0f-9c57-7d542b57c54f" index="131" run="131" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct408"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[15] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct408()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[15] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="66f849e4-25d3-4a61-9ecb-ebcea5dddff7" index="132" run="132" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct35302"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct35302()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="cae0e86f-a567-46d8-8988-54569321fdc1" index="133" run="133" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct266"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct266()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.03"/>
<generatedTest id="02e2722a-fc5c-4e1c-858e-49f2dc85126d" index="134" run="134" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct677"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct677()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="d1ab4ab0-4943-4f83-91bc-a9f7c3e46796" index="135" run="135" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct807"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct807()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b14770ec-dbd9-4b36-ac76-1862a78b4c5c" index="136" run="136" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct280"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 1, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[3] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct280()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[3] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[0L] == array[3L] && array[0L] == array[4L] && 
                                                                                   array[3L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && array[2L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                                                                                                                                      array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="e40434ba-1a83-4130-9a99-e9b637b246d8" index="137" run="137" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct285"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 256, 0, 1, 1, 256, 256, 256, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 256}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 256;
ints[2] = 1;
ints[3] = 1;
ints[4] = 256;
ints[5] = 256;
ints[6] = 256;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 1;
ints[16] = 1;
ints[17] = 1;
ints[18] = 1;
ints[19] = 1;
ints[20] = 1;
ints[21] = 1;
ints[22] = 1;
ints[23] = 1;
ints[24] = 1;
ints[25] = 1;
ints[26] = 1;
ints[27] = 256;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct285()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 256;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 256;
    ints[5] = 256;
    ints[6] = 256;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 1;
    ints[16] = 1;
    ints[17] = 1;
    ints[18] = 1;
    ints[19] = 1;
    ints[20] = 1;
    ints[21] = 1;
    ints[22] = 1;
    ints[23] = 1;
    ints[24] = 1;
    ints[25] = 1;
    ints[26] = 1;
    ints[27] = 256;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a72263e5-f295-4c74-b22c-911520500a24" index="138" run="138" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct624"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 1, 2, 0, 2, 2, 2, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct624()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && array[2L] == array[4L] && 
                                                                                   array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 
                                                                                                                                                                                                                                               array[3L] == array[7L] && 8L < array.Length && array[3L] == array[8L] && array[7L] == array[8L] && array.Length == 9L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                                                                                                                                                                                  array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && 
array[1L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && 
array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="20e088d9-a2ae-482b-8c14-d20725bc7cf1" index="139" run="139" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct632"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=27; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[27];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct632()
{
    int i;
    int[] ints = new int[27];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a46143de-a9f8-47ad-9946-ebde1a3e5b20" index="140" run="140" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct965"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct965()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array[1L] == array[4L] && 
                                                                                                                                  array.Length == 5L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="66c68799-b46e-46b7-8b8e-39a21e3e1b06" index="141" run="141" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct588"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 16, 0, 0, 17, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 16;
ints[4] = 17;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct588()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 16;
    ints[4] = 17;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 
                                                                                   5L < array.Length && array[0L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="ede06b31-e3fa-40f7-959f-30bec5ae0457" index="142" run="142" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct20601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct20601()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="8e29da40-ffed-41f4-8196-4a8bccd2a69e" index="143" run="143" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct116"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct116()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5b2a9452-f345-4b14-9304-9414fa01f9cf" index="144" run="144" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct319"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct319()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 
                                                                                   array[0L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                      array[1L] != array[2L] && array[1L] != array[3L] && array[1L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="3df1654f-7a41-4107-b0a4-3d58a24a5df0" index="145" run="145" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct188"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct188()
{
    int i;
    int[] ints = new int[21];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="f6677f2b-9f40-4817-aad7-81ae75058464" index="146" run="146" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct409"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 1, 2, 0, 2, 2, 2, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct409()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                       array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[3L] == array[7L] && array[3L] == array[8L] && 
                                                                                                                                                                                                                                                                                                   array[7L] == array[8L] && 9L < array.Length && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && 
array[3L] != array[5L] && array[1L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && 
array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && 
array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="edcc9ef6-89fc-4768-8b1f-c7a093432e24" index="147" run="147" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct343"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 0, 8, 9, 9, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[1] = 8;
ints[2] = 9;
ints[3] = 9;
ints[7] = 9;
ints[8] = 9;
ints[9] = 9;
ints[10] = 9;
ints[11] = 9;
ints[12] = 9;
ints[13] = 9;
ints[14] = 9;
ints[15] = 9;
ints[16] = 9;
ints[17] = 9;
ints[18] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct343()
{
    int i;
    int[] ints = new int[20];
    ints[1] = 8;
    ints[2] = 9;
    ints[3] = 9;
    ints[7] = 9;
    ints[8] = 9;
    ints[9] = 9;
    ints[10] = 9;
    ints[11] = 9;
    ints[12] = 9;
    ints[13] = 9;
    ints[14] = 9;
    ints[15] = 9;
    ints[16] = 9;
    ints[17] = 9;
    ints[18] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b9223583-597c-4be8-9dcb-d45256a62eef" index="148" run="148" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct54"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 515, 513, 0, 3}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 3;
ints[1] = 515;
ints[2] = 513;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct54()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 3;
    ints[1] = 515;
    ints[2] = 513;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 4L < array.Length && array[0L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                              array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.03"/>
<generatedTest id="9ca0a63a-eb40-4faf-8f39-198b6681f6e4" index="149" run="149" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct464"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=29; 256, 0, 1, 1, 256, 256, 256, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 256, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[29];
ints[0] = 256;
ints[2] = 1;
ints[3] = 1;
ints[4] = 256;
ints[5] = 256;
ints[6] = 256;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 1;
ints[16] = 1;
ints[17] = 1;
ints[18] = 1;
ints[19] = 1;
ints[20] = 1;
ints[21] = 1;
ints[22] = 1;
ints[23] = 1;
ints[24] = 1;
ints[25] = 1;
ints[26] = 1;
ints[27] = 256;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct464()
{
    int i;
    int[] ints = new int[29];
    ints[0] = 256;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 256;
    ints[5] = 256;
    ints[6] = 256;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 1;
    ints[16] = 1;
    ints[17] = 1;
    ints[18] = 1;
    ints[19] = 1;
    ints[20] = 1;
    ints[21] = 1;
    ints[22] = 1;
    ints[23] = 1;
    ints[24] = 1;
    ints[25] = 1;
    ints[26] = 1;
    ints[27] = 256;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="0cecda17-709d-441d-8a0a-1e132515d845" index="150" run="150" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct831"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct831()
{
    int i;
    int[] ints = new int[22];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="06c0f40e-83d2-4c86-9c7c-bf1a0a294ac9" index="151" run="151" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct439"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 0, 2, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 3;
ints[2] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct439()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 3;
    ints[2] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[3L] && array[1L] == array[4L] && array[3L] == array[4L] && 
                                                                                   5L < array.Length && array[1L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                                                                                                                                      array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d168dd97-3357-45d7-96b4-d9d958b26b55" index="152" run="152" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct810"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 0, 1, 1, 3}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 2;
ints[2] = 1;
ints[3] = 1;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct810()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 2;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 4L < array.Length && array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                              array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="6aad615e-a044-43ea-8787-623c9f21e421" index="153" run="153" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct220"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 0, 64, 0, 1, 4, 1, 1, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct220()
{
    int i;
    int[] ints = new int[11];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 
                               array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && array[2L] == array[7L] && array[0L] == array[8L] && array[2L] == array[8L] && 
                                                                                                                                                                                           array[7L] == array[8L] && array[0L] == array[9L] && array[2L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 10L < array.Length && array[0L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                   array[2L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && 
array[4L] != array[6L] && array[1L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && 
array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[1L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && 
array[5L] != array[9L] && array[6L] != array[9L] && array[1L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="72d3561f-aa49-49d0-9aa7-cf91d949af82" index="154" run="154" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct412"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 64, 0, 1, 4, 1, 1, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct412()
{
    int i;
    int[] ints = new int[8];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && 
                                                         array[3L] == array[6L] && array[5L] == array[6L] && 7L < array.Length && array[0L] == array[7L] && array[2L] == array[7L] && array.Length == 8L && array[0L] != array[1L] && 
                                                                                                                                                                                                            array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && 
array[2L] != array[6L] && array[4L] != array[6L] && array[1L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5be3dee6-a460-4c43-9962-871bd7e11755" index="155" run="155" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct475"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 257, 256, 257, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[1] = 257;
ints[2] = 256;
ints[3] = 257;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct475()
{
    int i;
    int[] ints = new int[5];
    ints[1] = 257;
    ints[2] = 256;
    ints[3] = 257;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="2b6d5bed-5b7f-4381-90f7-d9f4b8deb39f" index="156" run="156" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct10"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 515, 513, 0, 3, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 3;
ints[1] = 515;
ints[2] = 513;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct10()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 3;
    ints[1] = 515;
    ints[2] = 513;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[4L] && 5L < array.Length && array[3L] == array[5L] && 
                                                                              array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && 
                                                                                                                                                                                                                                      array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="de114136-d45b-438c-9f39-9e4b6205f868" index="157" run="157" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct153"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct153()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.03"/>
<boundary kind="maxconditions" value="500" message="maximum number of conditions exceeded"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<generatedTest id="9c674f3e-4a3e-472d-99f4-033fc2ebb876" index="158" run="158" status="pathboundsexceeded" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct95201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=31; 1, 0, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[31];
ints[0] = 1;
ints[2] = 3;
ints[3] = 3;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 3;
ints[8] = 3;
ints[9] = 3;
ints[10] = 3;
ints[11] = 3;
ints[12] = 3;
ints[13] = 3;
ints[14] = 3;
ints[15] = 3;
ints[16] = 3;
ints[17] = 3;
ints[18] = 3;
ints[19] = 3;
ints[20] = 3;
ints[21] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void countDistinct95201()
{
    int i;
    int[] ints = new int[31];
    ints[0] = 1;
    ints[2] = 3;
    ints[3] = 3;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 3;
    ints[8] = 3;
    ints[9] = 3;
    ints[10] = 3;
    ints[11] = 3;
    ints[12] = 3;
    ints[13] = 3;
    ints[14] = 3;
    ints[15] = 3;
    ints[16] = 3;
    ints[17] = 3;
    ints[18] = 3;
    ints[19] = 3;
    ints[20] = 3;
    ints[21] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<boundaryCodeUpdate kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</boundaryCodeUpdate>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5a2fbacd-6e4c-4dd1-aaba-958f9a66c90b" index="159" run="159" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct604"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[2] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct604()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[2] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[1L] == array[3L] && array[0L] == array[4L] && 
                                                                                   array[2L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && array[3L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[0L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="7dd08b9b-ca25-4acc-aae0-1c9689eca779" index="160" run="160" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct457"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct457()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e4a3da10-43c3-4c67-a59d-0b4385c3fc79" index="161" run="161" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct199"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 3, 1, 0, 2}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 3;
ints[1] = 3;
ints[2] = 1;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct199()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 3;
    ints[1] = 3;
    ints[2] = 1;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 4L < array.Length && array.Length == 5L && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                              array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="b570abf4-77f1-4625-a6c9-488ce5b17de1" index="162" run="162" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct142"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 2, 1, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct142()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                       array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[3L] == array[7L] && array[3L] == array[8L] && 
                                                                                                                                                                                                                                                                                                   array[7L] == array[8L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 array[9L] == array[10L] && 11L < array.Length && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 
array.Length == 12L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && 
array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && 
array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && 
array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[4L] != array[9L] && 
array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && 
array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[2L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="2a4faca4-3f30-49f8-9a3d-3de776834a64" index="163" run="163" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct262"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 0, 8, 9, 9, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[1] = 8;
ints[2] = 9;
ints[3] = 9;
ints[7] = 9;
ints[8] = 9;
ints[9] = 9;
ints[10] = 9;
ints[11] = 9;
ints[12] = 9;
ints[13] = 9;
ints[14] = 9;
ints[15] = 9;
ints[16] = 9;
ints[17] = 9;
ints[18] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct262()
{
    int i;
    int[] ints = new int[21];
    ints[1] = 8;
    ints[2] = 9;
    ints[3] = 9;
    ints[7] = 9;
    ints[8] = 9;
    ints[9] = 9;
    ints[10] = 9;
    ints[11] = 9;
    ints[12] = 9;
    ints[13] = 9;
    ints[14] = 9;
    ints[15] = 9;
    ints[16] = 9;
    ints[17] = 9;
    ints[18] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="f4d10bee-f8ba-4352-9037-a3aca4359156" index="164" run="164" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct982"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 64, 0, 1, 4, 1, 1, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct982()
{
    int i;
    int[] ints = new int[9];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && array[3L] == array[6L] && 
                                                                                   array[5L] == array[6L] && array[0L] == array[7L] && array[2L] == array[7L] && 8L < array.Length && array[0L] == array[8L] && array[2L] == array[8L] && array[7L] == array[8L] && 
                                                                                                                                                                                                                                          array.Length == 9L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                  array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && 
array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[1L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && 
array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="f7fbdd9a-6a77-49ea-85d0-323acbbcb0a6" index="165" run="165" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct984"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct984()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="ffd52d14-52a5-41e3-91c8-4cda9e093e13" index="166" run="166" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct645"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct645()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="2af0b557-121e-4207-a140-f6c43a35ed50" index="167" run="167" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct27"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct27()
{
    int i;
    int[] ints = new int[6];
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 
                                                                                   array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && 5L < array.Length && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                                                                                                                          array[4L] == array[5L] && array.Length == 6L && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[3L] != array[4L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="17c4bc10-100c-4893-a102-1bba5215d6f5" index="168" run="168" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException250"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 0, 1, 3, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[1] = 1;
ints[4] = 1;
ints[5] = 3;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException250()
{
    int i;
    int[] ints = new int[7];
    ints[1] = 1;
    ints[4] = 1;
    ints[5] = 3;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && 
                                                         array[2L] == array[3L] && array[1L] == array[4L] && 6 < (int)(array.Length) && 6L < array.Length && array[0L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && 
                                                                                                                                                                                                                 array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L] && array[1L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="51a7f9db-5aa9-4642-9459-cce5c926e03c" index="169" run="169" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct145"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 16, 1, 1, 16, 0, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 16;
ints[2] = 1;
ints[3] = 1;
ints[4] = 16;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct145()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 16;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 16;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && 
                                                         array[2L] == array[3L] && array[1L] == array[4L] && 6L < array.Length && array[0L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array.Length == 7L && 
                                                                                                                                                                                                                array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                            array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L] && array[1L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="fa17af80-dfd6-4786-a347-920410cefbbf" index="170" run="170" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct962"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=24; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[24];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct962()
{
    int i;
    int[] ints = new int[24];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="0c6623b1-5ff1-42ed-9b0c-6bba0a3e13f7" index="171" run="171" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct639"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 64, 0, 1, 4, 1, 1, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct639()
{
    int i;
    int[] ints = new int[10];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && 
                                                                                                                                       array[2L] == array[7L] && array[0L] == array[8L] && array[2L] == array[8L] && array[7L] == array[8L] && 9L < array.Length && array[0L] == array[9L] && array[2L] == array[9L] && 
                                                                                                                                                                                                                                                                                              array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && 
array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[1L] != array[7L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && 
array[5L] != array[8L] && array[6L] != array[8L] && array[1L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="69d7eede-c8b7-4145-b427-cb37381b7130" index="172" run="172" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct917"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 0, 8, 9, 9, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[1] = 8;
ints[2] = 9;
ints[3] = 9;
ints[7] = 9;
ints[8] = 9;
ints[9] = 9;
ints[10] = 9;
ints[11] = 9;
ints[12] = 9;
ints[13] = 9;
ints[14] = 9;
ints[15] = 9;
ints[16] = 9;
ints[17] = 9;
ints[18] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct917()
{
    int i;
    int[] ints = new int[22];
    ints[1] = 8;
    ints[2] = 9;
    ints[3] = 9;
    ints[7] = 9;
    ints[8] = 9;
    ints[9] = 9;
    ints[10] = 9;
    ints[11] = 9;
    ints[12] = 9;
    ints[13] = 9;
    ints[14] = 9;
    ints[15] = 9;
    ints[16] = 9;
    ints[17] = 9;
    ints[18] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e1249d8d-5b6e-43b6-a910-2d13bfeeea81" index="173" run="173" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct257"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct257()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 
                                                                                   array[3L] == array[4L] && 5L < array.Length && array[3L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                      array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="ae15af0a-6dec-4811-aef1-83e9dbef0eb7" index="174" run="174" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct721"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 0, 16, 17, 17, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[1] = 16;
ints[2] = 17;
ints[3] = 17;
ints[7] = 17;
ints[8] = 17;
ints[9] = 17;
ints[10] = 17;
ints[11] = 17;
ints[12] = 17;
ints[13] = 17;
ints[14] = 17;
ints[15] = 17;
ints[16] = 17;
ints[17] = 17;
ints[18] = 17;
ints[19] = 17;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct721()
{
    int i;
    int[] ints = new int[21];
    ints[1] = 16;
    ints[2] = 17;
    ints[3] = 17;
    ints[7] = 17;
    ints[8] = 17;
    ints[9] = 17;
    ints[10] = 17;
    ints[11] = 17;
    ints[12] = 17;
    ints[13] = 17;
    ints[14] = 17;
    ints[15] = 17;
    ints[16] = 17;
    ints[17] = 17;
    ints[18] = 17;
    ints[19] = 17;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.03"/>
<generatedTest id="227ab875-396e-43b3-98db-a925bc879208" index="175" run="175" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct226"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct226()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a3186024-f274-46eb-a724-389a94e8e947" index="176" run="176" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException63"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 1, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[4] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException63()
{
    int i;
    int[] ints = new int[7];
    ints[4] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                                                                                                     array[3L] == array[5L] && 6 < (int)(array.Length) && 6L < array.Length && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[5L] == array[6L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[4L] != array[5L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="63156020-9edc-4ed5-8909-7f20f523f71c" index="177" run="177" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct422"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 0, 1, 1}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct422()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                                                                                                     array[3L] == array[5L] && 6L < array.Length && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[5L] == array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                            array.Length == 7L && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[4L] != array[5L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="b84dc621-03d0-443c-b1e7-f257f5e43c6a" index="178" run="178" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct871"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct871()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && 
                                                                                                                                                                                                                     array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                 array[1L] == array[10L] && array[2L] == array[11L] && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[2L] == array[12L] && 
array[3L] == array[12L] && array[7L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[11L] == array[12L] && 13L < array.Length && array[2L] == array[13L] && 
array[3L] == array[13L] && array[7L] == array[13L] && array[8L] == array[13L] && array[9L] == array[13L] && array[11L] == array[13L] && array[12L] == array[13L] && array.Length == 14L && 
array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && 
array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && 
array[6L] != array[9L] && array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && 
array[7L] != array[10L] && array[8L] != array[10L] && array[9L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && 
array[6L] != array[11L] && array[10L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && 
array[10L] != array[12L] && array[0L] != array[13L] && array[1L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && array[6L] != array[13L] && array[10L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="69c9c73e-c944-4797-960e-517932707c3d" index="179" run="179" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct898"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct898()
{
    int i;
    int[] ints = new int[21];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="a971b92b-869c-4254-881c-83c828e27a1b" index="180" run="180" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct11401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct11401()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="acc5fd9f-ebd2-44df-be0b-696f19e647b3" index="181" run="181" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct578"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct578()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="54f488ff-052e-42b7-9225-59476cc4700f" index="182" run="182" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct76801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 2, 1, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct76801()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && array[2L] == array[4L] && 
                                                                                   array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 
                                                                                                                                                                                                                                               array[3L] == array[7L] && array[3L] == array[8L] && array[7L] == array[8L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[3L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && 
array[10L] == array[11L] && 12L < array.Length && array[3L] == array[12L] && array[7L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && 
array[11L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && 
array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && 
array[2L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && 
array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[4L] != array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[2L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && 
array[6L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[2L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="f0f7a40e-ac54-4277-a5ce-d46c4cd3b5e8" index="183" run="183" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct133"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[15] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct133()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[15] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="fd92551e-341f-427f-a2fd-8ebd918c8cc4" index="184" run="184" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct22"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 8, 0, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 8;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct22()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 8;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && 4L < array.Length && array[2L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="d412fe1c-8e04-4907-9b8c-b4b980b0c3cd" index="185" run="185" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct41201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct41201()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && 
                                                                                                                                                                                                                                               array[6L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[2L] == array[10L] && array[3L] == array[10L] && array[9L] == array[10L] && array[2L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                              array[3L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 12L < array.Length && array[2L] == array[12L] && array[3L] == array[12L] && array[9L] == array[12L] && 
array[10L] == array[12L] && array[11L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L] && 
array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L] && 
array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && array[8L] != array[11L] && 
array[0L] != array[12L] && array[1L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && array[8L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="64d7c7ce-cd68-4c36-84ce-6d28419460a8" index="186" run="186" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct113"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct113()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && array[4L] == array[8L] && 
                                                                                                                                                                                                                     array[5L] == array[8L] && array[6L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[2L] == array[10L] && array[3L] == array[10L] && array[9L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                   array[2L] == array[11L] && array[3L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && array[2L] == array[12L] && array[3L] == array[12L] && array[9L] == array[12L] && 
array[10L] == array[12L] && array[11L] == array[12L] && 13L < array.Length && array[2L] == array[13L] && array[3L] == array[13L] && array[9L] == array[13L] && array[10L] == array[13L] && 
array[11L] == array[13L] && array[12L] == array[13L] && array.Length == 14L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L] && 
array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L] && 
array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && array[8L] != array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      array[0L] != array[12L] && array[1L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && array[8L] != array[12L] && 
array[0L] != array[13L] && array[1L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && array[6L] != array[13L] && array[7L] != array[13L] && array[8L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b70534dd-6aeb-4de9-8478-0b7e2f6e30a4" index="187" run="187" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct20602"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct20602()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                                                   array[1L] == array[4L] && 5L < array.Length && array[2L] == array[5L] && array[3L] == array[5L] && array.Length == 6L && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="eeb7e564-bb65-418c-ab5e-c291bc4d65e0" index="188" run="188" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException861"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException861()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && 
                                                         array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && 6 < (int)(array.Length) && 6L < array.Length && array[1L] == array[6L] && 
                                                                                                                                                                                                                 array[4L] == array[6L] && array[5L] == array[6L] && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="47b9ddaf-7ba1-4c64-9673-d03dfa59997f" index="189" run="189" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct956"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct956()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && 
                                                         array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && 6L < array.Length && array[1L] == array[6L] && array[4L] == array[6L] && 
                                                                                                                                                                                                                array[5L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="6a1d5f11-6b37-4348-a71c-a3add9acc820" index="190" run="190" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct191"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 1, 0, 128, 128, 1, 1, 1, 128, 128, 128, 128, 2}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 1;
ints[2] = 128;
ints[3] = 128;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 128;
ints[8] = 128;
ints[9] = 128;
ints[10] = 128;
ints[11] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct191()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 1;
    ints[2] = 128;
    ints[3] = 128;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 128;
    ints[8] = 128;
    ints[9] = 128;
    ints[10] = 128;
    ints[11] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[2L] == array[10L] && array[3L] == array[10L] && array[7L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 array[8L] == array[10L] && array[9L] == array[10L] && 11L < array.Length && array.Length == 12L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && 
array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && 
array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && 
array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && 
array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && array[8L] != array[11L] && array[9L] != array[11L] && array[10L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="06387f84-ab8a-403d-b514-f6f260e8c17c" index="191" run="191" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct533"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct533()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="096137b9-4529-4b23-bc68-292aa394ba09" index="192" run="192" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct87502"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 1, 1, 4, 4}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 5;
ints[1] = 1;
ints[2] = 1;
ints[3] = 4;
ints[4] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct87502()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 5;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 4;
    ints[4] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && 4L < array.Length && array[3L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.03"/>
<generatedTest id="bbdf6fd3-f13e-4b88-bd48-8f0bc57b874a" index="193" run="193" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct587"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 256, 0, 1, 1, 256, 256, 256, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 256, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 256;
ints[2] = 1;
ints[3] = 1;
ints[4] = 256;
ints[5] = 256;
ints[6] = 256;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 1;
ints[16] = 1;
ints[17] = 1;
ints[18] = 1;
ints[19] = 1;
ints[20] = 1;
ints[21] = 1;
ints[22] = 1;
ints[23] = 1;
ints[24] = 1;
ints[25] = 1;
ints[26] = 1;
ints[27] = 256;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct587()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 256;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 256;
    ints[5] = 256;
    ints[6] = 256;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 1;
    ints[16] = 1;
    ints[17] = 1;
    ints[18] = 1;
    ints[19] = 1;
    ints[20] = 1;
    ints[21] = 1;
    ints[22] = 1;
    ints[23] = 1;
    ints[24] = 1;
    ints[25] = 1;
    ints[26] = 1;
    ints[27] = 256;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="2a9398cd-a47e-4781-9e82-09b0293531c6" index="194" run="194" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct51901"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 1, 0, 3}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[1] = 1;
ints[2] = 1;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct51901()
{
    int i;
    int[] ints = new int[5];
    ints[1] = 1;
    ints[2] = 1;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[0L] == array[3L] && 4L < array.Length && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="07082cb3-2ccc-4f3f-82a5-b8a2260d9454" index="195" run="195" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct836"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct836()
{
    int i;
    int[] ints = new int[21];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="1118a87c-e742-4af4-882e-23edfe4506f7" index="196" run="196" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct964"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=25; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[25];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct964()
{
    int i;
    int[] ints = new int[25];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="89c849b0-e198-47b8-b9c7-ea1a59d007a5" index="197" run="197" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct96"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=26; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[26];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct96()
{
    int i;
    int[] ints = new int[26];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="820d34f6-1eb8-4dd0-ba04-30de0000fbe1" index="198" run="198" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct583"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct583()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[5L] && array[1L] == array[5L] && 
                                                                                                                                                                                           array[2L] == array[5L] && array[3L] == array[5L] && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[5L] == array[6L] && 
                                                                                                                                                                                                                                                                                                                                                       array[4L] == array[7L] && array[4L] == array[8L] && array[7L] == array[8L] && array[4L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 10L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[4L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[4L] && array[1L] != array[4L] && 
array[2L] != array[4L] && array[3L] != array[4L] && array[4L] != array[5L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && 
array[3L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && 
array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[5L] != array[9L] && 
array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="cb25d117-9ab5-4c05-b827-df7a0b4217c9" index="199" run="199" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct467"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=27; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[27];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct467()
{
    int i;
    int[] ints = new int[27];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="0b74542a-ff07-494e-bd5a-a933f73d9bae" index="200" run="200" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct555"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 0, 1, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct555()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                                                                                                     array[3L] == array[5L] && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[5L] == array[6L] && 7L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                 array[4L] == array[7L] && array.Length == 8L && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[4L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3716ec6e-4ebf-46fc-bc6f-f6c5d720b4d6" index="201" run="201" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException523"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 1}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[6] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException523()
{
    int i;
    int[] ints = new int[7];
    ints[6] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && 
                                                                                                                                                                                                                     array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 6 < (int)(array.Length) && 
                                                                                                                                                                                                                                                                                                                                                                                 6L < array.Length && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ff6ac4f0-76f9-42ef-a1b6-9cb054001a31" index="202" run="202" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct971"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 1, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[4] = 1;
ints[5] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct971()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 1;
    ints[5] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && 
                                                                                                                                                                                           array[2L] == array[4L] && array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 
                                                                                                                                                                                                                                                                                                                                                       6L < array.Length && array.Length == 7L && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="2fc8cbd1-26ac-4669-9109-d1cb8c052e7f" index="203" run="203" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct66"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{33, 65, 1, 0, 64}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 33;
ints[1] = 65;
ints[2] = 1;
ints[4] = 64;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct66()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 33;
    ints[1] = 65;
    ints[2] = 1;
    ints[4] = 64;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 4L < array.Length && array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                              array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="09b0f0f8-e2dd-4a70-ba5e-2ced6ebdadac" index="204" run="204" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct451"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 1, 0, 128, 128, 1, 1, 1, 128, 128, 128, 128, 2, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 1;
ints[2] = 128;
ints[3] = 128;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 128;
ints[8] = 128;
ints[9] = 128;
ints[10] = 128;
ints[11] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct451()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 1;
    ints[2] = 128;
    ints[3] = 128;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 128;
    ints[8] = 128;
    ints[9] = 128;
    ints[10] = 128;
    ints[11] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && 
                                                                                                                                                                                                                                               array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[2L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && 12L < array.Length && array[1L] == array[12L] && array.Length == 13L && 
array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && 
array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && 
array[1L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && 
array[8L] != array[11L] && array[9L] != array[11L] && array[10L] != array[11L] && array[0L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && array[4L] != array[12L] && 
array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && array[8L] != array[12L] && array[9L] != array[12L] && array[10L] != array[12L] && array[11L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="94bc1148-02d5-4610-bed5-6829e1afbd85" index="205" run="205" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct484"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct484()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="14cf8227-899c-4824-9f4c-3f58c0f843c5" index="206" run="206" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct95601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 1, 2, 2, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct95601()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 
                                                                                   array[0L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && 5L < array.Length && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[1L] != array[3L] && array[1L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="020309d1-24d2-47a2-acad-0e7bf36d8de4" index="207" run="207" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct36301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 0, 1, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct36301()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 
                                                                                   array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && 
                                                                                                                                                                                                                                               array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[7L] && 8L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[4L] == array[8L] && array[7L] == array[8L] && array.Length == 9L && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[4L] != array[5L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[5L] != array[7L] && 
array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L];
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:26:21Z" category="progress" message="  500 constraint systems (41.40% solved, 58.60% proven unsatisfiable), flipping location Question.countDistinct(Int32[]) at 0x0052 took 1s (61.87%)"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5ee374cb-64fa-41ca-9a4a-97dc030df984" index="208" run="208" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct14301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct14301()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[1L] == array[3L] && array[2L] == array[3L] && 4L < array.Length && array.Length == 5L && 
                                                                                                                                  array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="425df502-06a3-4d59-9294-c13d6958cae8" index="209" run="209" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct945"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 1, 0, 3, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 1;
ints[2] = 1;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct945()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 1;
    ints[2] = 1;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[0L] == array[3L] && 5L < array.Length && 
                                                                                   array[0L] == array[5L] && array[3L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && 
                                                                                                                                                                                                                                           array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="9fe4e3e9-a4be-4c98-9d7e-16dba3792979" index="210" run="210" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct934"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct934()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="049bef80-6e15-49b1-9f7a-472de2d73607" index="211" run="211" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct302"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 128, 1, 0, 1, 1, 1, 0, 128, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[1] = 128;
ints[2] = 1;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[8] = 128;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct302()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[1] = 128;
    ints[2] = 1;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[8] = 128;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 
                               array[0L] == array[4L] && array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && 
                                                                                                                                                                                           array[4L] == array[6L] && array[5L] == array[6L] && array[3L] == array[7L] && array[1L] == array[8L] && array[3L] == array[9L] && array[7L] == array[9L] && 10L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                       array[3L] == array[10L] && array[7L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[8L] != array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[8L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="11ee98b4-45c6-49fd-8141-4671d5b4f25e" index="212" run="212" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct367"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 5, 0, 1, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 5;
ints[3] = 1;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct367()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 5;
    ints[3] = 1;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && array[0L] == array[4L] && array[3L] == array[4L] && 
                                                                                   5L < array.Length && array[2L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                      array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="eab81e20-5ff4-4a7f-9c2a-b34fe5b6ec1c" index="213" run="213" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct453"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct453()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7603133b-a4b9-405d-9677-fe0c355f5a6f" index="214" run="214" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct388"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 128, 1, 0, 1, 1, 1, 0, 128}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 1;
ints[1] = 128;
ints[2] = 1;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[8] = 128;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct388()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 1;
    ints[1] = 128;
    ints[2] = 1;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[8] = 128;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && array[2L] == array[4L] && 
                                                                                   array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 
                                                                                                                                                                                                                                               array[3L] == array[7L] && 8L < array.Length && array[1L] == array[8L] && array.Length == 9L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                  array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && 
array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="3ac9d8ec-4769-4525-b154-3c7511e406d1" index="215" run="215" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct87503"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=29; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[29];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct87503()
{
    int i;
    int[] ints = new int[29];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="ca537d48-5f5f-4945-baaf-719d18acd20f" index="216" run="216" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct494"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
ints[27] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct494()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    ints[27] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="9f807992-5d00-451e-8181-00de495c82a0" index="217" run="217" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct493"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=25; 65, 0, 64, 64, 65, 65, 65, 64, 64, 64, 64, 64, 64, 64, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[25];
ints[0] = 65;
ints[2] = 64;
ints[3] = 64;
ints[4] = 65;
ints[5] = 65;
ints[6] = 65;
ints[7] = 64;
ints[8] = 64;
ints[9] = 64;
ints[10] = 64;
ints[11] = 64;
ints[12] = 64;
ints[13] = 64;
ints[14] = 65;
ints[24] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct493()
{
    int i;
    int[] ints = new int[25];
    ints[0] = 65;
    ints[2] = 64;
    ints[3] = 64;
    ints[4] = 65;
    ints[5] = 65;
    ints[6] = 65;
    ints[7] = 64;
    ints[8] = 64;
    ints[9] = 64;
    ints[10] = 64;
    ints[11] = 64;
    ints[12] = 64;
    ints[13] = 64;
    ints[14] = 65;
    ints[24] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5e8c0230-969f-4ca3-a04e-e84b100e7430" index="218" run="218" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct162"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 1, 0, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 2;
ints[2] = 1;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct162()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 2;
    ints[2] = 1;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 4L < array.Length && array[1L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="fe1acf53-6076-4783-9fb9-6e4508e80da6" index="219" run="219" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct98"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct98()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 
                               array[0L] == array[3L] && array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && 
                                                                                                                                                                                           array[5L] == array[6L] && array[1L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && array[1L] == array[8L] && array[4L] == array[8L] && 
                                                                                                                                                                                                                                                                                                                                                       array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && array[1L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[7L] == array[9L] && array[8L] == array[9L] && 10L < array.Length && array[1L] == array[10L] && array[4L] == array[10L] && array[5L] == array[10L] && array[6L] == array[10L] && 
array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && 
array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && 
array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[0L] != array[8L] && array[2L] != array[8L] && 
array[3L] != array[8L] && array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="1ec52b9f-659d-4bc7-ae80-7c7ef0c75a4d" index="220" run="220" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct996"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct996()
{
    int i;
    int[] ints = new int[22];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3f753dd8-d64c-4456-adb4-87b57ea33aa3" index="221" run="221" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct843"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct843()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && 
                                                         array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 
                                                                                                                                                                                                                     7L < array.Length && array[1L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && array.Length == 8L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && 
array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="e95c8e45-8538-494c-8af4-4678945d72eb" index="222" run="222" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct766"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct766()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="c1a66dad-0482-446d-874d-9c63f73bfc51" index="223" run="223" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct360"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 1, 4, 1, 4}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 5;
ints[1] = 1;
ints[2] = 4;
ints[3] = 1;
ints[4] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct360()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 5;
    ints[1] = 1;
    ints[2] = 4;
    ints[3] = 1;
    ints[4] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[3L] && 4L < array.Length && array[2L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1b469304-c5b8-4f80-b3ad-6a170472cbb7" index="224" run="224" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct560"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 0, 1, 1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct560()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                                                                       array[2L] == array[3L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[0L] == array[6L] && array[1L] == array[6L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[6L] && array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[7L] && array[4L] == array[8L] && array[7L] == array[8L] && 9L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[4L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && 
array[3L] != array[4L] && array[4L] != array[5L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && 
array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="37e65502-33a6-434b-9917-89f5ae2fb562" index="225" run="225" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct488"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct488()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 
                                                                                   array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[7L] && 
                                                                                                                                                                                                                                               array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && 8L < array.Length && array[1L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                      array[6L] == array[8L] && array[7L] == array[8L] && array.Length == 9L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && 
array[3L] != array[6L] && array[0L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="7ae2998e-65f8-4c48-b94f-36eb92dd9d0d" index="226" run="226" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct129"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 0, 64, 1, 1, 0, 0, 0, 1, 1, 1, 64, 1, 64}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[1] = 64;
ints[2] = 1;
ints[3] = 1;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 64;
ints[11] = 1;
ints[12] = 64;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct129()
{
    int i;
    int[] ints = new int[13];
    ints[1] = 64;
    ints[2] = 1;
    ints[3] = 1;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 64;
    ints[11] = 1;
    ints[12] = 64;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[2L] == array[8L] && 
                                                                                                                                                                                                                                               array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[1L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[2L] == array[11L] && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && 12L < array.Length && array[1L] == array[12L] && 
array[10L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && 
array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[1L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && 
array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L] && array[9L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && 
array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[10L] != array[11L] && array[0L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && 
array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && array[8L] != array[12L] && array[9L] != array[12L] && array[11L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="2daac19e-adb5-433a-8004-9cd213e41d4f" index="227" run="227" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct365"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=29; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[29];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
ints[27] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct365()
{
    int i;
    int[] ints = new int[29];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    ints[27] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="d9add36d-6faf-4453-bc96-4e8c74620bae" index="228" run="228" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct658"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct658()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7c5759f5-97aa-4bbe-ac8d-2252fdae69d3" index="229" run="229" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct50401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{2, 0, 1, 1, 3, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 2;
ints[2] = 1;
ints[3] = 1;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct50401()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 2;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 5L < array.Length && array[1L] == array[5L] && 
                                                                              array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                      array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="24a73a71-23bd-470e-ad86-eee850b6c9bc" index="230" run="230" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct607"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=26; 65, 0, 64, 64, 65, 65, 65, 64, 64, 64, 64, 64, 64, 64, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[26];
ints[0] = 65;
ints[2] = 64;
ints[3] = 64;
ints[4] = 65;
ints[5] = 65;
ints[6] = 65;
ints[7] = 64;
ints[8] = 64;
ints[9] = 64;
ints[10] = 64;
ints[11] = 64;
ints[12] = 64;
ints[13] = 64;
ints[14] = 65;
ints[24] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct607()
{
    int i;
    int[] ints = new int[26];
    ints[0] = 65;
    ints[2] = 64;
    ints[3] = 64;
    ints[4] = 65;
    ints[5] = 65;
    ints[6] = 65;
    ints[7] = 64;
    ints[8] = 64;
    ints[9] = 64;
    ints[10] = 64;
    ints[11] = 64;
    ints[12] = 64;
    ints[13] = 64;
    ints[14] = 65;
    ints[24] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="f2748b87-20b0-46ae-b553-6494cff563cc" index="231" run="231" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct684"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 128, 1, 0, 1, 1, 1, 0, 128, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
ints[1] = 128;
ints[2] = 1;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[8] = 128;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct684()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    ints[1] = 128;
    ints[2] = 1;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[8] = 128;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && 
                                                                                                                                       array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[3L] == array[7L] && array[1L] == array[8L] && 
                                                                                                                                                                                                                                                                                                   9L < array.Length && array[3L] == array[9L] && array[7L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && 
array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[8L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="feb4cedd-8b42-45b4-9bc3-083b2a12ac9c" index="232" run="232" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct554"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct554()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && 
                                                                                                                                       array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && 
                                                                                                                                                                                                                                                                                                   array[6L] == array[7L] && array[1L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && array[1L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[1L] == array[10L] && array[4L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            array[5L] == array[10L] && array[6L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && 11L < array.Length && array[1L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         array[4L] == array[11L] && array[5L] == array[11L] && array[6L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 
array.Length == 12L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
array[2L] != array[7L] && array[3L] != array[7L] && array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[0L] != array[9L] && array[2L] != array[9L] && 
array[3L] != array[9L] && array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[0L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="b46851e1-3c9a-400c-84e8-366cb2404a10" index="233" run="233" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct659"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct659()
{
    int i;
    int[] ints = new int[22];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="38f74dfc-baaa-4ea8-bc7b-e1c0b5f7bf23" index="234" run="234" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct358"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 1, 1, 4, 4, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 5;
ints[1] = 1;
ints[2] = 1;
ints[3] = 4;
ints[4] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct358()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 5;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 4;
    ints[4] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[3L] == array[4L] && 5L < array.Length && 
                                                                                   array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                           array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="f2f93c78-ee99-480d-bbcc-1ea30ebff1e4" index="235" run="235" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct551"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct551()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && 
                                                                                                                                       array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && 
                                                                                                                                                                                                                                                                                                   array[6L] == array[7L] && array[1L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && 9L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[1L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && 
array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[2L] != array[7L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[3L] != array[7L] && array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="81311bd2-830f-4adb-bfee-1fe8feda4eb0" index="236" run="236" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct534"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 8, 0, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 8, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 8;
ints[2] = 1;
ints[3] = 1;
ints[4] = 8;
ints[5] = 8;
ints[6] = 8;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 8;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct534()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 8;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 8;
    ints[5] = 8;
    ints[6] = 8;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 8;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="f70c816f-6b5d-422e-828a-57aa11fb01c5" index="237" run="237" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct89801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[4] = 1;
ints[5] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct89801()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 1;
    ints[5] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && 
                                                                                                                                                                                           array[2L] == array[4L] && array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 
                                                                                                                                                                                                                                                                                                                                                       array[6L] == array[7L] && array[6L] == array[8L] && array[7L] == array[8L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 10L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[6L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[6L] && array[1L] != array[6L] && 
array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && 
array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && 
array[4L] != array[8L] && array[5L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && 
array[5L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="64c3f2ce-8640-426c-a83d-818f546b3b2d" index="238" run="238" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct434"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct434()
{
    int i;
    int[] ints = new int[21];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="816b5c8c-a934-4a0d-a81c-59827c04bf6d" index="239" run="239" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct812"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct812()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="4b7426a0-0a8e-44d0-9b6d-ee0b237116cf" index="240" run="240" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct292"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 1, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[4] = 1;
ints[5] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct292()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 1;
    ints[5] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && 
                                                                                                                                                                                                                     array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 7L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                 array[6L] == array[7L] && array.Length == 8L && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L] && 
array[5L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<boundary kind="maxconditions" value="500" message="maximum number of conditions exceeded"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<generatedTest id="fed65255-22f4-44cc-9c7f-89c171512e4b" index="241" run="241" status="pathboundsexceeded" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct77"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=31; 256, 0, 1, 1, 256, 256, 256, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 256, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[31];
ints[0] = 256;
ints[2] = 1;
ints[3] = 1;
ints[4] = 256;
ints[5] = 256;
ints[6] = 256;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 1;
ints[16] = 1;
ints[17] = 1;
ints[18] = 1;
ints[19] = 1;
ints[20] = 1;
ints[21] = 1;
ints[22] = 1;
ints[23] = 1;
ints[24] = 1;
ints[25] = 1;
ints[26] = 1;
ints[27] = 256;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void countDistinct77()
{
    int i;
    int[] ints = new int[31];
    ints[0] = 256;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 256;
    ints[5] = 256;
    ints[6] = 256;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 1;
    ints[16] = 1;
    ints[17] = 1;
    ints[18] = 1;
    ints[19] = 1;
    ints[20] = 1;
    ints[21] = 1;
    ints[22] = 1;
    ints[23] = 1;
    ints[24] = 1;
    ints[25] = 1;
    ints[26] = 1;
    ints[27] = 256;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<boundaryCodeUpdate kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</boundaryCodeUpdate>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="87d5eb4e-5797-4505-9609-eb4cd631c3fa" index="242" run="242" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct43"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 5, 0, 4, 4, 5, 5, 5, 6, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct43()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[8L] && array[1L] == array[9L] && 
                                                                                                                                                                                                                     array[8L] == array[9L] && array[1L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[1L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                      array[10L] == array[11L] && array[1L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && array[11L] == array[12L] && 13L < array.Length && 
array[1L] == array[13L] && array[8L] == array[13L] && array[9L] == array[13L] && array[10L] == array[13L] && array[11L] == array[13L] && array[12L] == array[13L] && array.Length == 14L && 
array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && 
array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && 
array[0L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && 
array[0L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && 
array[0L] != array[13L] && array[2L] != array[13L] && array[3L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && array[6L] != array[13L] && array[7L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="ccda31b7-1cde-4389-82af-20fb49ae8a2d" index="243" run="243" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct55"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=27; 65, 0, 64, 64, 65, 65, 65, 64, 64, 64, 64, 64, 64, 64, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[27];
ints[0] = 65;
ints[2] = 64;
ints[3] = 64;
ints[4] = 65;
ints[5] = 65;
ints[6] = 65;
ints[7] = 64;
ints[8] = 64;
ints[9] = 64;
ints[10] = 64;
ints[11] = 64;
ints[12] = 64;
ints[13] = 64;
ints[14] = 65;
ints[24] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct55()
{
    int i;
    int[] ints = new int[27];
    ints[0] = 65;
    ints[2] = 64;
    ints[3] = 64;
    ints[4] = 65;
    ints[5] = 65;
    ints[6] = 65;
    ints[7] = 64;
    ints[8] = 64;
    ints[9] = 64;
    ints[10] = 64;
    ints[11] = 64;
    ints[12] = 64;
    ints[13] = 64;
    ints[14] = 65;
    ints[24] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b2a4dff2-edc9-4104-936d-b8e9ad791e20" index="244" run="244" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct46801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 1, 1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[4] = 1;
ints[5] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct46801()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 1;
    ints[5] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 
                                                                                   array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && 
                                                                                                                                                                                                                                               array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[6L] == array[7L] && 8L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[6L] == array[8L] && array[7L] == array[8L] && array.Length == 9L && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[4L] != array[6L] && array[5L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && 
array[5L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="f2fad65a-a962-4d92-9af3-f0b4dc828f2d" index="245" run="245" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct175"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{33, 65, 1, 0, 64, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 33;
ints[1] = 65;
ints[2] = 1;
ints[4] = 64;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct175()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 33;
    ints[1] = 65;
    ints[2] = 1;
    ints[4] = 64;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 5L < array.Length && array[3L] == array[5L] && array.Length == 6L && 
                                                                              array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                          array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="1ddeaac2-9289-4df9-b4f3-e66ad380c609" index="246" run="246" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct41"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=24; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[24];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct41()
{
    int i;
    int[] ints = new int[24];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="0d741d86-a681-47ed-b820-78663bdcd95d" index="247" run="247" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct865"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=25; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[25];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct865()
{
    int i;
    int[] ints = new int[25];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="5c9bf229-a282-425f-bca0-f2ad3f442117" index="248" run="248" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct16301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
ints[27] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct16301()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    ints[27] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="2e3965dd-c426-4a0a-add7-fa6a90300a67" index="249" run="249" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct67"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 2, 1, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct67()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[4L] && 
                                                         array[2L] == array[4L] && array[0L] == array[5L] && array[2L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[2L] == array[6L] && array[4L] == array[6L] && 
                                                                                                                                                                                                                     array[5L] == array[6L] && array[3L] == array[7L] && array[3L] == array[8L] && array[7L] == array[8L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                 array[3L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && 
array[9L] == array[11L] && array[10L] == array[11L] && array[3L] == array[12L] && array[7L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      array[11L] == array[12L] && 13L < array.Length && array[3L] == array[13L] && array[7L] == array[13L] && array[8L] == array[13L] && array[9L] == array[13L] && array[10L] == array[13L] && 
array[11L] == array[13L] && array[12L] == array[13L] && array.Length == 14L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
array[2L] != array[3L] && array[1L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && 
array[1L] != array[8L] && array[2L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && 
array[2L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && 
array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[2L] != array[11L] && array[4L] != array[11L] && 
array[5L] != array[11L] && array[6L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[2L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && 
array[6L] != array[12L] && array[0L] != array[13L] && array[1L] != array[13L] && array[2L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && array[6L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="43c24697-c7c8-4520-a1b7-2f5401495c0a" index="250" run="250" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct790"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 65, 0, 64, 64, 65, 65, 65, 64, 64, 64, 64, 64, 64, 64, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 65;
ints[2] = 64;
ints[3] = 64;
ints[4] = 65;
ints[5] = 65;
ints[6] = 65;
ints[7] = 64;
ints[8] = 64;
ints[9] = 64;
ints[10] = 64;
ints[11] = 64;
ints[12] = 64;
ints[13] = 64;
ints[14] = 65;
ints[24] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct790()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 65;
    ints[2] = 64;
    ints[3] = 64;
    ints[4] = 65;
    ints[5] = 65;
    ints[6] = 65;
    ints[7] = 64;
    ints[8] = 64;
    ints[9] = 64;
    ints[10] = 64;
    ints[11] = 64;
    ints[12] = 64;
    ints[13] = 64;
    ints[14] = 65;
    ints[24] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="c2b94ad0-03c7-4ac7-8a6a-c79fd313abeb" index="251" run="251" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct11701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 0, 0, 2}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 2;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct11701()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 4L < array.Length && array[1L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="7ca9b0b5-0090-463a-8aef-7124fa787bc2" index="252" run="252" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct108"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct108()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && 
                                                                                   array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[7L] && 
                                                                                                                                                                                                                                               array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && array[1L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[7L] == array[8L] && array[1L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 
array[1L] == array[10L] && array[4L] == array[10L] && array[5L] == array[10L] && array[6L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && 
array[1L] == array[11L] && array[4L] == array[11L] && array[5L] == array[11L] && array[6L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           array[10L] == array[11L] && 12L < array.Length && array[1L] == array[12L] && array[4L] == array[12L] && array[5L] == array[12L] && array[6L] == array[12L] && array[7L] == array[12L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && array[11L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && array[1L] != array[2L] && 
array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[0L] != array[8L] && 
array[2L] != array[8L] && array[3L] != array[8L] && array[0L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[0L] != array[10L] && array[2L] != array[10L] && 
array[3L] != array[10L] && array[0L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[0L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="dd0e3d23-0d68-42b5-980b-85cfd695ecc9" index="253" run="253" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct557"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 1, 1, 1, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[4] = 1;
ints[5] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct557()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 1;
    ints[5] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                                                                       array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[6L] == array[7L] && array[6L] == array[8L] && array[7L] == array[8L] && 9L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && 
array[3L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && 
array[5L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b7891fe3-d9c7-4c35-b0ef-ff8241bf0a55" index="254" run="254" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException731"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 256, 0, 1, 512, 1, 256}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[1] = 256;
ints[3] = 1;
ints[4] = 512;
ints[5] = 1;
ints[6] = 256;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException731()
{
    int i;
    int[] ints = new int[7];
    ints[1] = 256;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 1;
    ints[6] = 256;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && 
                                                         6 < (int)(array.Length) && 6L < array.Length && array[1L] == array[6L] && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                 array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="50231424-a3fb-4d99-b8b8-92c204ae08ad" index="255" run="255" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct268"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{16, 1, 16, 0, 64, 0, 1}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 16;
ints[1] = 1;
ints[2] = 16;
ints[4] = 64;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct268()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 16;
    ints[1] = 1;
    ints[2] = 16;
    ints[4] = 64;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && 
                                                         6L < array.Length && array[1L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                            array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="92be7fc8-e18a-4b0d-b9ab-2a74a8cd1bf4" index="256" run="256" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException744"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 1, 1, 4, 4, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 5;
ints[1] = 1;
ints[2] = 1;
ints[3] = 4;
ints[4] = 4;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException744()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 5;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 4;
    ints[4] = 4;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[3L] == array[4L] && 
                                                         6 < (int)(array.Length) && 6L < array.Length && array[5L] == array[6L] && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                 array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[3L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9ff38c4c-a30c-4b92-90c5-6d207a61fa78" index="257" run="257" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct77101"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{18, 2, 2, 0, 0, 1, 1}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 18;
ints[1] = 2;
ints[2] = 2;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct77101()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 18;
    ints[1] = 2;
    ints[2] = 2;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[3L] == array[4L] && 
                                                         6L < array.Length && array[5L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                            array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[3L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ca50d103-fdb3-465b-b3e6-2bbdea7441c8" index="258" run="258" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct49"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct49()
{
    int i;
    int[] ints = new int[6];
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                   array[0L] == array[4L] && array[1L] == array[4L] && array[3L] == array[4L] && 5L < array.Length && array[0L] == array[5L] && array[1L] == array[5L] && array[3L] == array[5L] && 
                                                                                                                                                                                                                                          array[4L] == array[5L] && array.Length == 6L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[3L] && array[2L] != array[4L] && array[2L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="0f0d8f52-c1ac-4569-8823-38a0fedf868d" index="259" run="259" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct325"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[15] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct325()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[15] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="6558abe9-9511-4cf6-9db5-e9158ab2ccbc" index="260" run="260" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct628"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=27; 128, 16, 0, 0, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[27];
ints[0] = 128;
ints[1] = 16;
ints[4] = 128;
ints[5] = 128;
ints[6] = 128;
ints[26] = 128;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct628()
{
    int i;
    int[] ints = new int[27];
    ints[0] = 128;
    ints[1] = 16;
    ints[4] = 128;
    ints[5] = 128;
    ints[6] = 128;
    ints[26] = 128;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="97000647-6a92-4db7-ab1a-d3dfb4c1b295" index="261" run="261" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct384"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct384()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ce972307-63da-4c86-8fbd-c1b30ae8e55a" index="262" run="262" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct730"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 1, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct730()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                   array[2L] == array[4L] && 5L < array.Length && array[2L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="f25a569b-6c0b-4251-b919-4da371cb0f51" index="263" run="263" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct880"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 512, 256, 512, 1, 0, 1, 1, 513, 0, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 512;
ints[1] = 256;
ints[2] = 512;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct880()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 512;
    ints[1] = 256;
    ints[2] = 512;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 
                               array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[8L] && array[4L] == array[9L] && array[8L] == array[9L] && 10L < array.Length && 
                                                                                                                                                                                           array[4L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                       array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && 
array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="adbd655d-6d10-4364-b76e-e73c2fb21ab1" index="264" run="264" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct907"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{512, 256, 512, 1, 0, 1, 1, 513}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 512;
ints[1] = 256;
ints[2] = 512;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct907()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 512;
    ints[1] = 256;
    ints[2] = 512;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && 
                                                         array[3L] == array[6L] && array[5L] == array[6L] && 7L < array.Length && array.Length == 8L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                            array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="2d6869e9-da05-4a39-a23b-a513cc06bb6f" index="265" run="265" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct497"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 1, 3}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[1] = 1;
ints[3] = 1;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct497()
{
    int i;
    int[] ints = new int[5];
    ints[1] = 1;
    ints[3] = 1;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[1L] == array[3L] && 4L < array.Length && array.Length == 5L && array[0L] != array[1L] && 
                                                                                                                              array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="d2908a33-e44a-46a7-85d9-eba12e49eb17" index="266" run="266" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct11301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=29; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[29];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct11301()
{
    int i;
    int[] ints = new int[29];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="33f2ed62-3473-452c-8bbf-69e9450596e5" index="267" run="267" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct16201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 128, 16, 0, 0, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 128;
ints[1] = 16;
ints[4] = 128;
ints[5] = 128;
ints[6] = 128;
ints[26] = 128;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct16201()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 128;
    ints[1] = 16;
    ints[4] = 128;
    ints[5] = 128;
    ints[6] = 128;
    ints[26] = 128;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="834c41b6-7635-4a37-9e86-94a17a4d5993" index="268" run="268" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct14302"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 4, 0, 37, 37, 4, 4, 4, 37, 37, 37, 37, 37, 37, 37, 37, 0, 37, 37, 37, 4}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 4;
ints[2] = 37;
ints[3] = 37;
ints[4] = 4;
ints[5] = 4;
ints[6] = 4;
ints[7] = 37;
ints[8] = 37;
ints[9] = 37;
ints[10] = 37;
ints[11] = 37;
ints[12] = 37;
ints[13] = 37;
ints[14] = 37;
ints[16] = 37;
ints[17] = 37;
ints[18] = 37;
ints[19] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct14302()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 4;
    ints[2] = 37;
    ints[3] = 37;
    ints[4] = 4;
    ints[5] = 4;
    ints[6] = 4;
    ints[7] = 37;
    ints[8] = 37;
    ints[9] = 37;
    ints[10] = 37;
    ints[11] = 37;
    ints[12] = 37;
    ints[13] = 37;
    ints[14] = 37;
    ints[16] = 37;
    ints[17] = 37;
    ints[18] = 37;
    ints[19] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="72ba42d5-fa85-4c18-9f31-82e2493b1c5f" index="269" run="269" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct539"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct539()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="4ecc0419-86d6-49ce-8d7b-aa4a62735068" index="270" run="270" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct55401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct55401()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="4a724e7b-c9d8-46a8-a96d-4ade8c83d41c" index="271" run="271" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct611"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct611()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="6b01941b-14ec-4cda-a679-cef9e3819474" index="272" run="272" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct63201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct63201()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e6ba3454-cc65-4746-826d-90082b410a55" index="273" run="273" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct11702"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{512, 256, 512, 1, 0, 1, 1, 513, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 512;
ints[1] = 256;
ints[2] = 512;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct11702()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 512;
    ints[1] = 256;
    ints[2] = 512;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && array[3L] == array[6L] && 
                                                                                   array[5L] == array[6L] && 8L < array.Length && array[4L] == array[8L] && array.Length == 9L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                      array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                                                  array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="95395889-4395-4eb3-a638-74b238823aa0" index="274" run="274" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct682"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=24; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[24];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct682()
{
    int i;
    int[] ints = new int[24];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="925ce993-5476-495f-8102-e7be8d609f23" index="275" run="275" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct856"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 257, 256, 257, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 257;
ints[2] = 256;
ints[3] = 257;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct856()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 257;
    ints[2] = 256;
    ints[3] = 257;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[3L] && array[0L] == array[4L] && 5L < array.Length && 
                                                                                   array[0L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                           array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9f7c0575-34c6-4528-8568-f8f4e3283d26" index="276" run="276" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct207"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 8, 0, 16, 1, 1}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 8;
ints[3] = 16;
ints[4] = 1;
ints[5] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct207()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 8;
    ints[3] = 16;
    ints[4] = 1;
    ints[5] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 5L < array.Length && array[4L] == array[5L] && 
                                                                              array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                      array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="1959c440-d974-4a97-8e5d-e6540e73d1b3" index="277" run="277" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct4601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 0, 64, 1, 1, 0, 0, 0, 1, 1, 1, 64, 1, 64, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[1] = 64;
ints[2] = 1;
ints[3] = 1;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 64;
ints[11] = 1;
ints[12] = 64;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct4601()
{
    int i;
    int[] ints = new int[14];
    ints[1] = 64;
    ints[2] = 1;
    ints[3] = 1;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 64;
    ints[11] = 1;
    ints[12] = 64;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && 
                                                                                                                                                                                                                     array[2L] == array[8L] && array[3L] == array[8L] && array[7L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                 array[1L] == array[10L] && array[2L] == array[11L] && array[3L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[1L] == array[12L] && 
array[10L] == array[12L] && 13L < array.Length && array[0L] == array[13L] && array[4L] == array[13L] && array[5L] == array[13L] && array[6L] == array[13L] && array.Length == 14L && 
array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && 
array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && 
array[6L] != array[9L] && array[0L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && 
array[7L] != array[10L] && array[8L] != array[10L] && array[9L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && 
array[6L] != array[11L] && array[10L] != array[11L] && array[0L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && 
array[6L] != array[12L] && array[7L] != array[12L] && array[8L] != array[12L] && array[9L] != array[12L] && array[11L] != array[12L] && array[1L] != array[13L] && array[2L] != array[13L] && 
array[3L] != array[13L] && array[7L] != array[13L] && array[8L] != array[13L] && array[9L] != array[13L] && array[10L] != array[13L] && array[11L] != array[13L] && array[12L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="8d88ead9-5a1a-492f-a803-d80fbd5044ec" index="278" run="278" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct455"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 256, 1, 0, 0, 256, 256, 256, 0, 0, 0, 0, 0, 0, 0, 0, 256, 256}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 256;
ints[1] = 1;
ints[4] = 256;
ints[5] = 256;
ints[6] = 256;
ints[15] = 256;
ints[16] = 256;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct455()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 256;
    ints[1] = 1;
    ints[4] = 256;
    ints[5] = 256;
    ints[6] = 256;
    ints[15] = 256;
    ints[16] = 256;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="1a3b8180-9928-4b41-ae01-9297c212cf70" index="279" run="279" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct507"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 8, 0, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 8, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 8;
ints[2] = 1;
ints[3] = 1;
ints[4] = 8;
ints[5] = 8;
ints[6] = 8;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 8;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct507()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 8;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 8;
    ints[5] = 8;
    ints[6] = 8;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 8;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="e058c1c9-9fb8-4103-927e-5cc2524c29fb" index="280" run="280" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct699"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{512, 256, 512, 1, 0, 1, 1, 513, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 512;
ints[1] = 256;
ints[2] = 512;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct699()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 512;
    ints[1] = 256;
    ints[2] = 512;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[8L] && 
                                                                                                                                       9L < array.Length && array[4L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                           array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[7L] != array[8L] && 
array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ce39ba56-97ce-4500-a5ea-f18fdea66669" index="281" run="281" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException281"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException281()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && 
                                                         array[2L] == array[4L] && array[3L] == array[4L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 6 < (int)(array.Length) && 6L < array.Length && 
                                                                                                                                                                                                                      array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                  array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="915f654e-39d4-4a1e-a195-62ec77afe4df" index="282" run="282" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct25701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct25701()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && 
                                                         array[2L] == array[4L] && array[3L] == array[4L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 6L < array.Length && array[2L] == array[6L] && 
                                                                                                                                                                                                                array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array.Length == 7L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="76ef7571-5c67-4f58-b823-eb4625f109bc" index="283" run="283" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct77102"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 2, 1, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[2] = 2;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct77102()
{
    int i;
    int[] ints = new int[6];
    ints[2] = 2;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[4L] && array[1L] == array[4L] && 
                                                                                   5L < array.Length && array[0L] == array[5L] && array[1L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[2L] != array[4L] && array[3L] != array[4L] && array[2L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="201b3909-e9a4-4f45-bd73-37f00db3d955" index="284" run="284" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct68"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 4, 0, 37, 37, 4, 4, 4, 37, 37, 37, 37, 37, 37, 37, 37, 0, 37, 37, 37, 4, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[0] = 4;
ints[2] = 37;
ints[3] = 37;
ints[4] = 4;
ints[5] = 4;
ints[6] = 4;
ints[7] = 37;
ints[8] = 37;
ints[9] = 37;
ints[10] = 37;
ints[11] = 37;
ints[12] = 37;
ints[13] = 37;
ints[14] = 37;
ints[16] = 37;
ints[17] = 37;
ints[18] = 37;
ints[19] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct68()
{
    int i;
    int[] ints = new int[21];
    ints[0] = 4;
    ints[2] = 37;
    ints[3] = 37;
    ints[4] = 4;
    ints[5] = 4;
    ints[6] = 4;
    ints[7] = 37;
    ints[8] = 37;
    ints[9] = 37;
    ints[10] = 37;
    ints[11] = 37;
    ints[12] = 37;
    ints[13] = 37;
    ints[14] = 37;
    ints[16] = 37;
    ints[17] = 37;
    ints[18] = 37;
    ints[19] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="93b00db1-96a8-43e3-b7a8-3e7c6672ce28" index="285" run="285" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException532"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{33, 65, 1, 0, 64, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 33;
ints[1] = 65;
ints[2] = 1;
ints[4] = 64;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException532()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 33;
    ints[1] = 65;
    ints[2] = 1;
    ints[4] = 64;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && 6 < (int)(array.Length) && 
                                                         6L < array.Length && array[3L] == array[6L] && array[5L] == array[6L] && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                            array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3d635777-898b-434d-88d4-6f46c092696a" index="286" run="286" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct651"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{32, 8, 128, 1, 0, 1, 1}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 32;
ints[1] = 8;
ints[2] = 128;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct651()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 32;
    ints[1] = 8;
    ints[2] = 128;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && 6L < array.Length && 
                                                         array[3L] == array[6L] && array[5L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                 array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="57cd410f-5d8b-40c2-82ba-5ad352c60be6" index="287" run="287" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct382"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=25; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[25];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct382()
{
    int i;
    int[] ints = new int[25];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="cdf2390e-65fd-4256-b152-841911273769" index="288" run="288" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct16302"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct16302()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[2L] == array[3L] && array[2L] == array[4L] && array[3L] == array[4L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[2L] == array[6L] && 
                                                                                                                                                                                           array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && 
                                                                                                                                                                                                                                                                                                                                                       array[6L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[2L] == array[9L] && array[3L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               10L < array.Length && array[2L] == array[10L] && array[3L] == array[10L] && array[4L] == array[10L] && array[5L] == array[10L] && array[6L] == array[10L] && array[7L] == array[10L] && 
array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[0L] != array[4L] && array[1L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[0L] != array[7L] && 
array[1L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9c8c1ae7-7dac-4aac-9c52-e9ee6f518e2b" index="289" run="289" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct634"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct634()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && 
                                                         array[2L] == array[4L] && array[3L] == array[4L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[2L] == array[6L] && array[3L] == array[6L] && 
                                                                                                                                                                                                                     array[4L] == array[6L] && array[5L] == array[6L] && 7L < array.Length && array[2L] == array[7L] && array[3L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && 
                                                                                                                                                                                                                                                                                                                                                                            array[6L] == array[7L] && array.Length == 8L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    array[1L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="d1a9aea2-4ed2-4043-acc7-dc2adc4c607a" index="290" run="290" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct178"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct178()
{
    int i;
    int[] ints = new int[22];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="a1972168-488e-4518-91be-d0acf1d3cff3" index="291" run="291" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct936"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[11];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct936()
{
    int i;
    int[] ints = new int[11];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && 
                                                                                                                                                                                           array[2L] == array[4L] && array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && 
                                                                                                                                                                                                                                                                                                                                                       array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[1L] == array[7L] && array[2L] == array[7L] && array[3L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && array[0L] == array[8L] && 
array[1L] == array[8L] && array[2L] == array[8L] && array[3L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && 
array[0L] == array[9L] && array[1L] == array[9L] && array[2L] == array[9L] && array[3L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && 
array[7L] == array[9L] && array[8L] == array[9L] && 10L < array.Length && array[0L] == array[10L] && array[1L] == array[10L] && array[2L] == array[10L] && array[3L] == array[10L] && 
array[4L] == array[10L] && array[5L] == array[10L] && array[6L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="651cf790-737a-4c1d-a429-d1ff41bce22b" index="292" run="292" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct76101"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[8];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct76101()
{
    int i;
    int[] ints = new int[8];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && 
                                                                                                                                                                                                                     array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                 array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 7L < array.Length && array[0L] == array[7L] && 
array[1L] == array[7L] && array[2L] == array[7L] && array[3L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && array.Length == 8L;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:26:24Z" category="progress" message="  750 constraint systems (38.93% solved, 61.07% proven unsatisfiable), flipping location Question.countDistinct(Int32[]) at 0x0052 took 2s (62.67%)"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b68d09e5-2153-4ef4-b669-58f252fed179" index="293" run="293" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct926"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 1, 3, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 1;
ints[3] = 1;
ints[4] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct926()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 1;
    ints[3] = 1;
    ints[4] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[1L] == array[3L] && 5L < array.Length && 
                                                                                   array[0L] == array[5L] && array[2L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && 
                                                                                                                                                                                                                                           array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="97bbb4ae-2f31-4be6-9bad-028d3fdd73c5" index="294" run="294" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct438"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 2, 1, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct438()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="72c92270-1846-40c5-b625-346a9693485d" index="295" run="295" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct294"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct294()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="01aa9a91-f3f8-49c1-96b1-7061f8bc0c6b" index="296" run="296" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct910"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct910()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="940a431f-24c2-461c-9a8a-9d6209fc76d9" index="297" run="297" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct98201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 1, 4, 1, 4, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 5;
ints[1] = 1;
ints[2] = 4;
ints[3] = 1;
ints[4] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct98201()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 5;
    ints[1] = 1;
    ints[2] = 4;
    ints[3] = 1;
    ints[4] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[3L] && array[2L] == array[4L] && 5L < array.Length && 
                                                                                   array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                           array[1L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="5d49f37d-37e1-4ca1-bb2a-40826240e882" index="298" run="298" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct839"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 5, 6, 1, 1, 5, 5, 5, 4, 4, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 5;
ints[1] = 6;
ints[2] = 1;
ints[3] = 1;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 4;
ints[8] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct839()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 5;
    ints[1] = 6;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 4;
    ints[8] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 
                               array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[7L] == array[8L] && 
                                                                                                                                                                                           10L < array.Length && array[9L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                                                                                                                                 array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && 
array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && 
array[2L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d9b515df-b695-4a55-a6d3-9b9a23b223d2" index="299" run="299" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct826"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct826()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && array[2L] == array[4L] && 
                                                                                   array[3L] == array[4L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && 
                                                                                                                                                                                                                                               array[5L] == array[6L] && array[2L] == array[7L] && array[3L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && 8L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[2L] == array[8L] && array[3L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && array.Length == 9L && 
array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[0L] != array[5L] && 
array[1L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="8b73f9f2-6b69-439c-9f45-6290720e84d3" index="300" run="300" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct869"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 512, 64, 0, 0, 512, 512, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 64, 64, 1}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 512;
ints[1] = 64;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[18] = 1;
ints[19] = 64;
ints[20] = 64;
ints[21] = 64;
ints[22] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct869()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 512;
    ints[1] = 64;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[18] = 1;
    ints[19] = 64;
    ints[20] = 64;
    ints[21] = 64;
    ints[22] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="2bc52395-a34b-4e3b-8a13-a10e91101e62" index="301" run="301" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct39"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=26; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[26];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct39()
{
    int i;
    int[] ints = new int[26];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="bda12a52-1d99-45f0-b5c3-f26dce5cf1e4" index="302" run="302" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct5"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct5()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                                                                       array[2L] == array[3L] && array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[0L] == array[6L] && array[1L] == array[6L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[6L] && array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[7L] && array[4L] == array[8L] && array[7L] == array[8L] && array[4L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[7L] == array[9L] && array[8L] == array[9L] && array[4L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && 11L < array.Length && 
array[4L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && array.Length == 12L && array[0L] != array[4L] && 
array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[4L] != array[5L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && 
array[2L] != array[7L] && array[3L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && 
array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && 
array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[5L] != array[10L] && 
array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="43186591-0a1c-470c-afab-bbacf7525f86" index="303" run="303" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct644"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 2, 1, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 2;
ints[1] = 1;
ints[2] = 2;
ints[4] = 2;
ints[5] = 2;
ints[6] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct644()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 2;
    ints[1] = 1;
    ints[2] = 2;
    ints[4] = 2;
    ints[5] = 2;
    ints[6] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="0f88f5ed-8c0b-4a3e-b9d0-77981eaef10a" index="304" run="304" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct919"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[9];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct919()
{
    int i;
    int[] ints = new int[9];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && 
                                                                                   array[0L] == array[3L] && array[1L] == array[3L] && array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && 
                                                                                                                                                                                                                                               array[0L] == array[5L] && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[1L] == array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                                           array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && array[1L] == array[7L] && array[2L] == array[7L] && 
array[3L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && 8L < array.Length && array[0L] == array[8L] && array[1L] == array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              array[2L] == array[8L] && array[3L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && array.Length == 9L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="30b6d4eb-80ec-4b26-847a-5674350423fa" index="305" run="305" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct368"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 0, 0, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 2;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct368()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[1L] == array[4L] && 5L < array.Length && 
                                                                                   array[2L] == array[5L] && array[3L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && 
                                                                                                                                                                                                                                           array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="dc1a2aba-8ec7-4156-b527-43371b3bde24" index="306" run="306" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct85"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct85()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="4f7a638b-3f75-4876-8779-9e39f8d32398" index="307" run="307" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException870"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0, 1}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException870()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && 
                                                         array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && 6 < (int)(array.Length) && 6L < array.Length && array[0L] == array[6L] && 
                                                                                                                                                                                                                 array[2L] == array[6L] && array[3L] == array[6L] && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="cb69ee49-2ffb-41a7-9401-9ebe36e1cbaa" index="308" run="308" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct99501"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 0, 1, 1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[1] = 1;
ints[4] = 1;
ints[5] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct99501()
{
    int i;
    int[] ints = new int[7];
    ints[1] = 1;
    ints[4] = 1;
    ints[5] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && 
                                                         array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && 6L < array.Length && array[0L] == array[6L] && array[2L] == array[6L] && 
                                                                                                                                                                                                                array[3L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[4L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="26cc2ed4-b33f-4129-a642-fad6761baca0" index="309" run="309" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct708"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 1, 128, 129, 129, 1, 1, 1, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 133, 128, 128, 128, 160}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[0] = 1;
ints[1] = 128;
ints[2] = 129;
ints[3] = 129;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 129;
ints[8] = 129;
ints[9] = 129;
ints[10] = 129;
ints[11] = 129;
ints[12] = 129;
ints[13] = 129;
ints[14] = 129;
ints[15] = 129;
ints[16] = 129;
ints[17] = 129;
ints[18] = 133;
ints[19] = 128;
ints[20] = 128;
ints[21] = 128;
ints[22] = 160;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct708()
{
    int i;
    int[] ints = new int[23];
    ints[0] = 1;
    ints[1] = 128;
    ints[2] = 129;
    ints[3] = 129;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 129;
    ints[8] = 129;
    ints[9] = 129;
    ints[10] = 129;
    ints[11] = 129;
    ints[12] = 129;
    ints[13] = 129;
    ints[14] = 129;
    ints[15] = 129;
    ints[16] = 129;
    ints[17] = 129;
    ints[18] = 133;
    ints[19] = 128;
    ints[20] = 128;
    ints[21] = 128;
    ints[22] = 160;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="fd3d08e2-0296-4b98-a7a6-f9ab404529c5" index="310" run="310" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct38801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 6, 0, 0, 2}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[1] = 1;
ints[2] = 6;
ints[5] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct38801()
{
    int i;
    int[] ints = new int[6];
    ints[1] = 1;
    ints[2] = 6;
    ints[5] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && array[0L] == array[4L] && array[3L] == array[4L] && 
                                                                                   5L < array.Length && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && 
                                                                                                                                                                                                                                      array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="52ef33dc-7dcb-4488-b7f7-fa37b97bc243" index="311" run="311" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException89"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 6, 0, 0, 2, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[1] = 1;
ints[2] = 6;
ints[5] = 2;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException89()
{
    int i;
    int[] ints = new int[7];
    ints[1] = 1;
    ints[2] = 6;
    ints[5] = 2;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs(41)" method="Question.countDistinct(Int32[])" offset="129" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525876539_solution.cs" line="41"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[				return 1;
			}
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			seen = false;
			// check if its been seen before]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && array[0L] == array[4L] && 
                                                         array[3L] == array[4L] && 6 < (int)(array.Length) && 6L < array.Length && array[0L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[0L] != array[1L] && 
                                                                                                                                                                                                                 array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                             array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="592e01f2-5cbf-470b-b5b6-15809e289575" index="312" run="312" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct68201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 8, 2, 1, 1, 0, 1}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 8;
ints[2] = 2;
ints[3] = 1;
ints[4] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct68201()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 8;
    ints[2] = 2;
    ints[3] = 1;
    ints[4] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && array[0L] == array[4L] && 
                                                         array[3L] == array[4L] && 6L < array.Length && array[0L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array.Length == 7L && array[0L] != array[1L] && 
                                                                                                                                                                                                            array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[5L] != array[6L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="0562f9b8-3647-4926-bde2-518fffaf9d5c" index="313" run="313" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct377"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=27; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[27];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct377()
{
    int i;
    int[] ints = new int[27];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<boundary kind="maxconditions" value="500" message="maximum number of conditions exceeded"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<generatedTest id="c33c64f8-0605-4f8e-9541-d6922650f269" index="314" run="314" status="pathboundsexceeded" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct649"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=31; 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[31];
ints[0] = 1;
ints[1] = 2;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[26] = 2;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void countDistinct649()
{
    int i;
    int[] ints = new int[31];
    ints[0] = 1;
    ints[1] = 2;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[26] = 2;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<boundaryCodeUpdate kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</boundaryCodeUpdate>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b01d921c-d8fe-4bb2-b5eb-4c7511125b5a" index="315" run="315" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct500"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 2, 1, 0, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 2;
ints[2] = 1;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct500()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 2;
    ints[2] = 1;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[1L] == array[4L] && 5L < array.Length && 
                                                                                   array[3L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && 
                                                                                                                                                                                                                                           array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1f1c0e90-a1f9-487d-a98a-b19350ef3555" index="316" run="316" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct715"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 6, 1, 1, 5, 5, 5, 4, 4}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 5;
ints[1] = 6;
ints[2] = 1;
ints[3] = 1;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 4;
ints[8] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct715()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 5;
    ints[1] = 6;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 4;
    ints[8] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 
                                                                                   array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && 8L < array.Length && array[7L] == array[8L] && array.Length == 9L && 
                                                                                                                                                                                                                                          array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                      array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && 
array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="073a66bf-ab6c-4c2f-afee-d98504c5d806" index="317" run="317" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct32801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=22; 0, 16, 17, 17, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[22];
ints[1] = 16;
ints[2] = 17;
ints[3] = 17;
ints[7] = 17;
ints[8] = 17;
ints[9] = 17;
ints[10] = 17;
ints[11] = 17;
ints[12] = 17;
ints[13] = 17;
ints[14] = 17;
ints[15] = 17;
ints[16] = 17;
ints[17] = 17;
ints[18] = 17;
ints[19] = 17;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct32801()
{
    int i;
    int[] ints = new int[22];
    ints[1] = 16;
    ints[2] = 17;
    ints[3] = 17;
    ints[7] = 17;
    ints[8] = 17;
    ints[9] = 17;
    ints[10] = 17;
    ints[11] = 17;
    ints[12] = 17;
    ints[13] = 17;
    ints[14] = 17;
    ints[15] = 17;
    ints[16] = 17;
    ints[17] = 17;
    ints[18] = 17;
    ints[19] = 17;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="bc98f532-c8fc-43c6-ab9a-3d3517573fea" index="318" run="318" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct980"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 5, 0, 4, 4, 5, 5, 5, 6, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct980()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="55ebeae5-0515-4d09-9969-1a883ef0d5ac" index="319" run="319" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct81"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[10];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct81()
{
    int i;
    int[] ints = new int[10];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                                                                       array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && array[1L] == array[7L] && array[2L] == array[7L] && array[3L] == array[7L] && array[4L] == array[7L] && 
array[5L] == array[7L] && array[6L] == array[7L] && array[0L] == array[8L] && array[1L] == array[8L] && array[2L] == array[8L] && array[3L] == array[8L] && array[4L] == array[8L] && 
array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && 9L < array.Length && array[0L] == array[9L] && array[1L] == array[9L] && array[2L] == array[9L] && 
array[3L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="4f61dca2-9886-4d46-9817-a634b4aefac6" index="320" run="320" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct2201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{3, 3, 1, 0, 2, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 3;
ints[1] = 3;
ints[2] = 1;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct2201()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 3;
    ints[1] = 3;
    ints[2] = 1;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 5L < array.Length && array[3L] == array[5L] && 
                                                                              array.Length == 6L && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                      array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<boundary kind="maxconditions" value="500" message="maximum number of conditions exceeded"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<generatedTest id="c3b32f22-7568-462a-a4c5-bc35b34b37f9" index="321" run="321" status="pathboundsexceeded" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct61801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=31; 512, 0, 1, 1, 512, 512, 512, 1, 1, 1, 1, 1, 1, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[31];
ints[0] = 512;
ints[2] = 1;
ints[3] = 1;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 512;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void countDistinct61801()
{
    int i;
    int[] ints = new int[31];
    ints[0] = 512;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 512;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<boundaryCodeUpdate kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxConditions=1000" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="1000"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxConditions" token="1700034b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</boundaryCodeUpdate>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="44c51bcd-9d36-4552-ae3e-43da2cb84f4c" index="322" run="322" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct35801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=24; 1, 256, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[24];
ints[0] = 1;
ints[1] = 256;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[12] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct35801()
{
    int i;
    int[] ints = new int[24];
    ints[0] = 1;
    ints[1] = 256;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[12] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="5f0bd098-c092-43c2-adb7-52af61fe077b" index="323" run="323" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct252"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 1, 2, 8, 8, 1, 1, 1, 0, 1, 8, 8, 8, 8, 9}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 1;
ints[1] = 2;
ints[2] = 8;
ints[3] = 8;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[8] = 1;
ints[9] = 8;
ints[10] = 8;
ints[11] = 8;
ints[12] = 8;
ints[13] = 9;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct252()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 1;
    ints[1] = 2;
    ints[2] = 8;
    ints[3] = 8;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[8] = 1;
    ints[9] = 8;
    ints[10] = 8;
    ints[11] = 8;
    ints[12] = 8;
    ints[13] = 9;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && 
                                                         array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && array[4L] == array[8L] && 
                                                                                                                                                                                                                     array[5L] == array[8L] && array[6L] == array[8L] && array[2L] == array[9L] && array[3L] == array[9L] && array[2L] == array[10L] && array[3L] == array[10L] && array[9L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                   array[2L] == array[11L] && array[3L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && array[2L] == array[12L] && array[3L] == array[12L] && array[9L] == array[12L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      array[10L] == array[12L] && array[11L] == array[12L] && 13L < array.Length && array.Length == 14L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && 
array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && 
array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && 
array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && 
array[7L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[8L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && 
array[8L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[7L] != array[11L] && 
array[8L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L] && array[7L] != array[12L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    array[8L] != array[12L] && array[0L] != array[13L] && array[1L] != array[13L] && array[2L] != array[13L] && array[3L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && 
array[6L] != array[13L] && array[7L] != array[13L] && array[8L] != array[13L] && array[9L] != array[13L] && array[10L] != array[13L] && array[11L] != array[13L] && array[12L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5c143bb1-a1d5-4e9f-b0a1-025ececb4c27" index="324" run="324" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct922"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{5, 6, 1, 1, 5, 5, 5, 4, 4, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 5;
ints[1] = 6;
ints[2] = 1;
ints[3] = 1;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 4;
ints[8] = 4;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct922()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 5;
    ints[1] = 6;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 4;
    ints[8] = 4;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[7L] == array[8L] && 9L < array.Length && array.Length == 10L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                                                                                                                                                                                           array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && 
array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[2L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && 
array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5f387a3a-1049-4ac7-abea-4b5f6b31139a" index="325" run="325" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct63401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 0, 64, 0, 1, 4, 1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct63401()
{
    int i;
    int[] ints = new int[12];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && 
                                                                                                                                       array[2L] == array[7L] && array[0L] == array[8L] && array[2L] == array[8L] && array[7L] == array[8L] && array[0L] == array[9L] && array[2L] == array[9L] && array[7L] == array[9L] && 
                                                                                                                                                                                                                                                                                                   array[8L] == array[9L] && array[0L] == array[10L] && array[2L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && 11L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    array[0L] == array[11L] && array[2L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && array.Length == 12L && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && 
array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[1L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && 
array[6L] != array[7L] && array[1L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[1L] != array[9L] && 
array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[1L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && 
array[5L] != array[10L] && array[6L] != array[10L] && array[1L] != array[11L] && array[3L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="97796df8-44ca-4135-9b0e-c57aa99ead9d" index="326" run="326" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct45101"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 8, 0, 1, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[1] = 8;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct45101()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[1] = 8;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[3L] && array[2L] == array[4L] && 5L < array.Length && 
                                                                                   array[2L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                           array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="5bb92b25-1bc3-4b2e-8d80-24d4b42d36ef" index="327" run="327" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct890"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 32, 8, 128, 1, 0, 1, 1, 0, 0, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 32;
ints[1] = 8;
ints[2] = 128;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct890()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 32;
    ints[1] = 8;
    ints[2] = 128;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && 
                               array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[7L] && array[4L] == array[8L] && array[7L] == array[8L] && array[4L] == array[9L] && array[7L] == array[9L] && 
                                                                                                                                                                                           array[8L] == array[9L] && 10L < array.Length && array[4L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array.Length == 11L && 
                                                                                                                                                                                                                                                                                                                                                       array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && 
array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && 
array[3L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[5L] != array[9L] && 
array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="eba5d5f0-4cc7-4220-89f6-f015366a36b5" index="328" run="328" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct932"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{32, 8, 128, 1, 0, 1, 1, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 32;
ints[1] = 8;
ints[2] = 128;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct932()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 32;
    ints[1] = 8;
    ints[2] = 128;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && array[3L] == array[6L] && 
                                                         array[5L] == array[6L] && 7L < array.Length && array[4L] == array[7L] && array.Length == 8L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                                                                                                            array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                        array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && 
array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="951b6ff4-f21f-4580-843f-48a35af04017" index="329" run="329" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct882"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 5, 0, 4, 4, 5, 5, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 5;
ints[2] = 4;
ints[3] = 4;
ints[4] = 5;
ints[5] = 5;
ints[6] = 5;
ints[7] = 6;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct882()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 5;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 5;
    ints[5] = 5;
    ints[6] = 5;
    ints[7] = 6;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="521f0603-3f3d-4c6d-a60a-f60331ddca1e" index="330" run="330" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct754"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=28; 3, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[28];
ints[0] = 3;
ints[1] = 1;
ints[2] = 2;
ints[3] = 2;
ints[4] = 3;
ints[5] = 3;
ints[6] = 3;
ints[7] = 2;
ints[8] = 2;
ints[9] = 2;
ints[10] = 2;
ints[11] = 2;
ints[12] = 2;
ints[13] = 2;
ints[14] = 2;
ints[15] = 2;
ints[16] = 2;
ints[17] = 2;
ints[18] = 2;
ints[19] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct754()
{
    int i;
    int[] ints = new int[28];
    ints[0] = 3;
    ints[1] = 1;
    ints[2] = 2;
    ints[3] = 2;
    ints[4] = 3;
    ints[5] = 3;
    ints[6] = 3;
    ints[7] = 2;
    ints[8] = 2;
    ints[9] = 2;
    ints[10] = 2;
    ints[11] = 2;
    ints[12] = 2;
    ints[13] = 2;
    ints[14] = 2;
    ints[15] = 2;
    ints[16] = 2;
    ints[17] = 2;
    ints[18] = 2;
    ints[19] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="afe5d265-640a-4982-b136-8ee6cc93529d" index="331" run="331" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct969"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{32, 8, 128, 1, 0, 1, 1, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 32;
ints[1] = 8;
ints[2] = 128;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct969()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 32;
    ints[1] = 8;
    ints[2] = 128;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && 
                                                                                   array[4L] == array[7L] && 8L < array.Length && array[4L] == array[8L] && array[7L] == array[8L] && array.Length == 9L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                                                                                                                                      array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                  array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && 
array[2L] != array[6L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[5L] != array[7L] && 
array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.03"/>
<generatedTest id="ffd64bfd-a825-4d3d-a7bb-575911b587d0" index="332" run="332" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct59801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=30; 9, 8, 0, 0, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 12}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[30];
ints[0] = 9;
ints[1] = 8;
ints[4] = 9;
ints[5] = 9;
ints[6] = 9;
ints[14] = 9;
ints[15] = 8;
ints[16] = 8;
ints[17] = 8;
ints[18] = 8;
ints[19] = 8;
ints[20] = 8;
ints[21] = 8;
ints[22] = 8;
ints[23] = 8;
ints[24] = 8;
ints[25] = 8;
ints[26] = 8;
ints[27] = 8;
ints[28] = 8;
ints[29] = 12;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct59801()
{
    int i;
    int[] ints = new int[30];
    ints[0] = 9;
    ints[1] = 8;
    ints[4] = 9;
    ints[5] = 9;
    ints[6] = 9;
    ints[14] = 9;
    ints[15] = 8;
    ints[16] = 8;
    ints[17] = 8;
    ints[18] = 8;
    ints[19] = 8;
    ints[20] = 8;
    ints[21] = 8;
    ints[22] = 8;
    ints[23] = 8;
    ints[24] = 8;
    ints[25] = 8;
    ints[26] = 8;
    ints[27] = 8;
    ints[28] = 8;
    ints[29] = 12;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="850f25f7-7dcf-42fe-98e8-769781c499ac" index="333" run="333" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct65"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 0, 1, 129, 129, 0, 0, 0, 129, 129, 129, 129, 129, 129, 129, 129, 129, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[1] = 1;
ints[2] = 129;
ints[3] = 129;
ints[7] = 129;
ints[8] = 129;
ints[9] = 129;
ints[10] = 129;
ints[11] = 129;
ints[12] = 129;
ints[13] = 129;
ints[14] = 129;
ints[15] = 129;
ints[16] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct65()
{
    int i;
    int[] ints = new int[17];
    ints[1] = 1;
    ints[2] = 129;
    ints[3] = 129;
    ints[7] = 129;
    ints[8] = 129;
    ints[9] = 129;
    ints[10] = 129;
    ints[11] = 129;
    ints[12] = 129;
    ints[13] = 129;
    ints[14] = 129;
    ints[15] = 129;
    ints[16] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="26afff98-dc0b-447e-b25f-b641ee61e124" index="334" run="334" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct272"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 17, 25, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[2] = 17;
ints[3] = 25;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct272()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[2] = 17;
    ints[3] = 25;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && 
                                                                              array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                      array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="46470c8b-7f31-4d44-a773-bd88286307f1" index="335" run="335" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct884"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 0, 64, 0, 1, 4, 1, 1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct884()
{
    int i;
    int[] ints = new int[13];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && array[3L] == array[6L] && 
                                                                                   array[5L] == array[6L] && array[0L] == array[7L] && array[2L] == array[7L] && array[0L] == array[8L] && array[2L] == array[8L] && array[7L] == array[8L] && array[0L] == array[9L] && 
                                                                                                                                                                                                                                               array[2L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[0L] == array[10L] && array[2L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                              array[9L] == array[10L] && array[0L] == array[11L] && array[2L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 
array.Length && array[0L] == array[12L] && array[2L] == array[12L] && array[7L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && 
array[11L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && 
array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && 
array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[1L] != array[7L] && array[3L] != array[7L] && 
array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[3L] != array[8L] && array[4L] != array[8L] && array[5L] != array[8L] && 
array[6L] != array[8L] && array[1L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[1L] != array[10L] && 
array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[1L] != array[11L] && array[3L] != array[11L] && array[4L] != array[11L] && 
array[5L] != array[11L] && array[6L] != array[11L] && array[1L] != array[12L] && array[3L] != array[12L] && array[4L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a5d087f6-a6d0-4a44-9ece-607e7877bd48" index="336" run="336" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct35303"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct35303()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[1L] == array[3L] && array[1L] == array[4L] && 
                                                                                   array[3L] == array[4L] && 5L < array.Length && array[1L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                      array[1L] != array[2L] && array[0L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[0L] != array[5L] && array[2L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9e3da79a-e082-4ce8-8f84-dc3e811a3caf" index="337" run="337" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct64401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct64401()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[2L] == array[3L] && array[2L] == array[4L] && array[3L] == array[4L] && array[2L] == array[5L] && 
                                                                                                                                       array[3L] == array[5L] && array[4L] == array[5L] && array[2L] == array[6L] && array[3L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[2L] == array[7L] && 
                                                                                                                                                                                                                                                                                                   array[3L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && array[2L] == array[8L] && array[3L] == array[8L] && array[4L] == array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && 9L < array.Length && array[2L] == array[9L] && array[3L] == array[9L] && array[4L] == array[9L] && 
array[5L] == array[9L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[2L] && array[1L] != array[2L] && 
array[0L] != array[3L] && array[1L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[0L] != array[6L] && 
array[1L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="8bc8b45b-eaea-4f23-ac03-c17be3426528" index="338" run="338" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct16202"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[10] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct16202()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[10] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="8dc18e68-e30d-4761-97a2-3a7e7c7bca7d" index="339" run="339" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct17801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 17, 0, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[2] = 17;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct17801()
{
    int i;
    int[] ints = new int[5];
    ints[2] = 17;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[3L] && array[1L] == array[3L] && 4L < array.Length && array.Length == 5L && 
                                                                                                                                  array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="bc912da9-62e7-4a06-811d-b2704366f8ae" index="340" run="340" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct115"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 0, 64, 1, 1, 0, 0, 0, 1, 1, 1, 64, 1, 64, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[1] = 64;
ints[2] = 1;
ints[3] = 1;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 64;
ints[11] = 1;
ints[12] = 64;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct115()
{
    int i;
    int[] ints = new int[15];
    ints[1] = 64;
    ints[2] = 1;
    ints[3] = 1;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 64;
    ints[11] = 1;
    ints[12] = 64;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="67a9435b-8bc3-4bde-a3d9-d7e329eb2deb" index="341" run="341" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct914"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=21; 1, 32, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[21];
ints[0] = 1;
ints[1] = 32;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[15] = 32;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct914()
{
    int i;
    int[] ints = new int[21];
    ints[0] = 1;
    ints[1] = 32;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[15] = 32;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="126af5da-ce3e-41be-8df0-8fbcff414c61" index="342" run="342" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct140"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 17, 0, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[2] = 17;
ints[4] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct140()
{
    int i;
    int[] ints = new int[6];
    ints[2] = 17;
    ints[4] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                   5L < array.Length && array[0L] == array[5L] && array[1L] == array[5L] && array[3L] == array[5L] && array.Length == 6L && array[0L] != array[2L] && array[1L] != array[2L] && 
                                                                                                                                                                                                                                      array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[2L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="5f329cae-aa64-4ba1-9eb9-d5cd846e7e5e" index="343" run="343" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct135"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 0, 1, 0, 0, 1, 1, 1, 1, 1, 3, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[1] = 1;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 1;
ints[8] = 1;
ints[9] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct135()
{
    int i;
    int[] ints = new int[11];
    ints[1] = 1;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && 
                               array[0L] == array[3L] && array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && 
                                                                                                                                                                                           array[5L] == array[6L] && array[1L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && array[6L] == array[7L] && array[1L] == array[8L] && array[4L] == array[8L] && 
                                                                                                                                                                                                                                                                                                                                                       array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && 10L < array.Length && array[0L] == array[10L] && array[2L] == array[10L] && array[3L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 array.Length == 11L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
array[2L] != array[7L] && array[3L] != array[7L] && array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && 
array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L] && 
array[1L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[7L] != array[10L] && array[8L] != array[10L] && array[9L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="3049ad32-7687-47a6-ad35-5ea054dd45f6" index="344" run="344" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct89802"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{32, 8, 128, 1, 0, 1, 1, 0, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 32;
ints[1] = 8;
ints[2] = 128;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct89802()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 32;
    ints[1] = 8;
    ints[2] = 128;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[7L] && array[4L] == array[8L] && 
                                                                                                                                       array[7L] == array[8L] && 9L < array.Length && array[4L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                                                                           array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && 
array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && 
array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && 
array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="348c4fa4-c6b6-4a5b-9b4f-e98be5b8da2f" index="345" run="345" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct63402"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=23; 0, 16, 17, 17, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[23];
ints[1] = 16;
ints[2] = 17;
ints[3] = 17;
ints[7] = 17;
ints[8] = 17;
ints[9] = 17;
ints[10] = 17;
ints[11] = 17;
ints[12] = 17;
ints[13] = 17;
ints[14] = 17;
ints[15] = 17;
ints[16] = 17;
ints[17] = 17;
ints[18] = 17;
ints[19] = 17;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct63402()
{
    int i;
    int[] ints = new int[23];
    ints[1] = 16;
    ints[2] = 17;
    ints[3] = 17;
    ints[7] = 17;
    ints[8] = 17;
    ints[9] = 17;
    ints[10] = 17;
    ints[11] = 17;
    ints[12] = 17;
    ints[13] = 17;
    ints[14] = 17;
    ints[15] = 17;
    ints[16] = 17;
    ints[17] = 17;
    ints[18] = 17;
    ints[19] = 17;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="beaa0ae1-57a8-4429-8ee7-0383d520dc1f" index="346" run="346" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct37701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 512, 8, 0, 0, 512, 512, 512, 1, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 512;
ints[1] = 8;
ints[4] = 512;
ints[5] = 512;
ints[6] = 512;
ints[7] = 1;
ints[8] = 512;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct37701()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 512;
    ints[1] = 8;
    ints[4] = 512;
    ints[5] = 512;
    ints[6] = 512;
    ints[7] = 1;
    ints[8] = 512;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="04130b80-87b6-4a28-a405-7efe3c9c39f7" index="347" run="347" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct313"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=20; 8, 0, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 8, 0, 0, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[20];
ints[0] = 8;
ints[2] = 1;
ints[3] = 1;
ints[4] = 8;
ints[5] = 8;
ints[6] = 8;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 8;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct313()
{
    int i;
    int[] ints = new int[20];
    ints[0] = 8;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 8;
    ints[5] = 8;
    ints[6] = 8;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 8;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7c68956f-fba7-48b8-a727-a67fec7aeff9" index="348" run="348" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct581"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 1, 0, 0, 1, 1, 1, 1, 1, 3}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[1] = 1;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 1;
ints[8] = 1;
ints[9] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct581()
{
    int i;
    int[] ints = new int[10];
    ints[1] = 1;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[0L] == array[3L] && array[2L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && 
                                                                                                                                       array[4L] == array[5L] && array[1L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[1L] == array[7L] && array[4L] == array[7L] && array[5L] == array[7L] && 
                                                                                                                                                                                                                                                                                                   array[6L] == array[7L] && array[1L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && 9L < array.Length && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array.Length == 10L && array[0L] != array[1L] && array[1L] != array[2L] && array[1L] != array[3L] && array[0L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[0L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[0L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
array[2L] != array[7L] && array[3L] != array[7L] && array[0L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && 
array[2L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[7L] != array[9L] && array[8L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="c8b888d5-247f-44dc-88fc-d5821dc516ca" index="349" run="349" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct903"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{16, 0, 0, 1, 16, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 16;
ints[3] = 1;
ints[4] = 16;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct903()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 16;
    ints[3] = 1;
    ints[4] = 16;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[0L] == array[4L] && 5L < array.Length && 
                                                                                   array[1L] == array[5L] && array[2L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
                                                                                                                                                                                                                                           array[2L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[3L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ff8124bc-9251-4e7e-ae2e-ed5482a7450d" index="350" run="350" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct562"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 32, 8, 128, 1, 0, 1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 32;
ints[1] = 8;
ints[2] = 128;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct562()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 32;
    ints[1] = 8;
    ints[2] = 128;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && array[4L] == array[7L] && array[4L] == array[8L] && 
                                                                                                                                       array[7L] == array[8L] && array[4L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[4L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && 
                                                                                                                                                                                                                                                                                                     array[9L] == array[10L] && 11L < array.Length && array[4L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  array.Length == 12L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && 
array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && array[2L] != array[5L] && 
array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && 
array[2L] != array[7L] && array[3L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && array[2L] != array[8L] && 
array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && 
array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[5L] != array[10L] && 
array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="70057d67-6f75-41ec-8d09-ba167740c3a0" index="351" run="351" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct895"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 0, 66, 64, 64, 0, 0, 0, 65, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[1] = 66;
ints[2] = 64;
ints[3] = 64;
ints[7] = 65;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct895()
{
    int i;
    int[] ints = new int[11];
    ints[1] = 66;
    ints[2] = 64;
    ints[3] = 64;
    ints[7] = 65;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && 
                               array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && 
                                                                                                                                                                                           array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && array[0L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && 
                                                                                                                                                                                                                                                                                                                                                       array[8L] == array[9L] && 10L < array.Length && array[0L] == array[10L] && array[4L] == array[10L] && array[5L] == array[10L] && array[6L] == array[10L] && array[8L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   array[9L] == array[10L] && array.Length == 11L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && 
array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && 
array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L] && array[1L] != array[9L] && 
array[2L] != array[9L] && array[3L] != array[9L] && array[7L] != array[9L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && array[7L] != array[10L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="25644942-cb24-4f6d-9b8f-091b07913ed4" index="352" run="352" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct309"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">1</value>
<code><![CDATA[int i;
int[] ints = new int[12];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(1, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct309()
{
    int i;
    int[] ints = new int[12];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(1, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[2L] && array[0L] == array[3L] && array[1L] == array[3L] && 
                                                                                                                                       array[2L] == array[3L] && array[0L] == array[4L] && array[1L] == array[4L] && array[2L] == array[4L] && array[3L] == array[4L] && array[0L] == array[5L] && array[1L] == array[5L] && 
                                                                                                                                                                                                                                                                                                   array[2L] == array[5L] && array[3L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && array[1L] == array[6L] && array[2L] == array[6L] && array[3L] == array[6L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                               array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && array[1L] == array[7L] && array[2L] == array[7L] && array[3L] == array[7L] && array[4L] == array[7L] && 
array[5L] == array[7L] && array[6L] == array[7L] && array[0L] == array[8L] && array[1L] == array[8L] && array[2L] == array[8L] && array[3L] == array[8L] && array[4L] == array[8L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       array[5L] == array[8L] && array[6L] == array[8L] && array[7L] == array[8L] && array[0L] == array[9L] && array[1L] == array[9L] && array[2L] == array[9L] && array[3L] == array[9L] && 
array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[0L] == array[10L] && array[1L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                array[2L] == array[10L] && array[3L] == array[10L] && array[4L] == array[10L] && array[5L] == array[10L] && array[6L] == array[10L] && array[7L] == array[10L] && array[8L] == array[10L] && 
array[9L] == array[10L] && 11L < array.Length && array[0L] == array[11L] && array[1L] == array[11L] && array[2L] == array[11L] && array[3L] == array[11L] && array[4L] == array[11L] && 
array[5L] == array[11L] && array[6L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && array[10L] == array[11L] && array.Length == 12L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="56a57a2a-f195-455c-adfa-55735c40faaf" index="353" run="353" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct517"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 66, 64, 64, 0, 0, 0, 65, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[1] = 66;
ints[2] = 64;
ints[3] = 64;
ints[7] = 65;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct517()
{
    int i;
    int[] ints = new int[10];
    ints[1] = 66;
    ints[2] = 64;
    ints[3] = 64;
    ints[7] = 65;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[4L] == array[5L] && array[0L] == array[6L] && 
                                                                                                                                       array[4L] == array[6L] && array[5L] == array[6L] && array[0L] == array[8L] && array[4L] == array[8L] && array[5L] == array[8L] && array[6L] == array[8L] && 9L < array.Length && 
                                                                                                                                                                                                                                                                                                   array[0L] == array[9L] && array[4L] == array[9L] && array[5L] == array[9L] && array[6L] == array[9L] && array[8L] == array[9L] && array.Length == 10L && array[0L] != array[1L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                            array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && 
array[1L] != array[5L] && array[2L] != array[5L] && array[3L] != array[5L] && array[1L] != array[6L] && array[2L] != array[6L] && array[3L] != array[6L] && array[0L] != array[7L] && 
array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && 
array[2L] != array[8L] && array[3L] != array[8L] && array[7L] != array[8L] && array[1L] != array[9L] && array[2L] != array[9L] && array[3L] != array[9L] && array[7L] != array[9L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="216617f7-3cbd-4853-bd72-1ef2732e7f62" index="354" run="354" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct676"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 2, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[4] = 2;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct676()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[4] = 2;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[1L] == array[2L] && array[1L] == array[3L] && array[2L] == array[3L] && 
                                                                                   5L < array.Length && array[1L] == array[5L] && array[2L] == array[5L] && array[3L] == array[5L] && array.Length == 6L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                                                                                                                                      array[0L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[4L] != array[5L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="76646f75-7000-4bea-849b-d20cb04e3d29" index="355" run="355" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct170"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 0, 64, 0, 1, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[1] = 64;
ints[3] = 1;
ints[4] = 4;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct170()
{
    int i;
    int[] ints = new int[14];
    ints[1] = 64;
    ints[3] = 1;
    ints[4] = 4;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[2L] && array[3L] == array[5L] && 
                                                         array[3L] == array[6L] && array[5L] == array[6L] && array[0L] == array[7L] && array[2L] == array[7L] && array[0L] == array[8L] && array[2L] == array[8L] && array[7L] == array[8L] && 
                                                                                                                                                                                                                     array[0L] == array[9L] && array[2L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[0L] == array[10L] && array[2L] == array[10L] && array[7L] == array[10L] && 
                                                                                                                                                                                                                                                                                                                                                                                   array[8L] == array[10L] && array[9L] == array[10L] && array[0L] == array[11L] && array[2L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && 
array[10L] == array[11L] && array[0L] == array[12L] && array[2L] == array[12L] && array[7L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && 
array[11L] == array[12L] && 13L < array.Length && array[0L] == array[13L] && array[2L] == array[13L] && array[7L] == array[13L] && array[8L] == array[13L] && array[9L] == array[13L] && 
array[10L] == array[13L] && array[11L] == array[13L] && array[12L] == array[13L] && array.Length == 14L && array[0L] != array[1L] && array[1L] != array[2L] && array[0L] != array[3L] && 
array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && 
array[1L] != array[5L] && array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && 
array[1L] != array[7L] && array[3L] != array[7L] && array[4L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[1L] != array[8L] && array[3L] != array[8L] && 
array[4L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[1L] != array[9L] && array[3L] != array[9L] && array[4L] != array[9L] && array[5L] != array[9L] && 
array[6L] != array[9L] && array[1L] != array[10L] && array[3L] != array[10L] && array[4L] != array[10L] && array[5L] != array[10L] && array[6L] != array[10L] && array[1L] != array[11L] && 
array[3L] != array[11L] && array[4L] != array[11L] && array[5L] != array[11L] && array[6L] != array[11L] && array[1L] != array[12L] && array[3L] != array[12L] && array[4L] != array[12L] && 
array[5L] != array[12L] && array[6L] != array[12L] && array[1L] != array[13L] && array[3L] != array[13L] && array[4L] != array[13L] && array[5L] != array[13L] && array[6L] != array[13L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="687f3bf9-a4d9-4c2d-adb2-9d4a3bedfd52" index="356" run="356" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct742"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 32, 8, 128, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 32;
ints[1] = 8;
ints[2] = 128;
ints[3] = 1;
ints[5] = 1;
ints[6] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct742()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 32;
    ints[1] = 8;
    ints[2] = 128;
    ints[3] = 1;
    ints[5] = 1;
    ints[6] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[5L] && array[3L] == array[6L] && array[5L] == array[6L] && 
                                                                                   array[4L] == array[7L] && array[4L] == array[8L] && array[7L] == array[8L] && array[4L] == array[9L] && array[7L] == array[9L] && array[8L] == array[9L] && array[4L] == array[10L] && 
                                                                                                                                                                                                                                               array[7L] == array[10L] && array[8L] == array[10L] && array[9L] == array[10L] && array[4L] == array[11L] && array[7L] == array[11L] && array[8L] == array[11L] && array[9L] == array[11L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                 array[10L] == array[11L] && 12L < array.Length && array[4L] == array[12L] && array[7L] == array[12L] && array[8L] == array[12L] && array[9L] == array[12L] && array[10L] == array[12L] && 
array[11L] == array[12L] && array.Length == 13L && array[0L] != array[1L] && array[0L] != array[2L] && array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && 
array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[2L] != array[4L] && array[3L] != array[4L] && array[0L] != array[5L] && array[1L] != array[5L] && 
array[2L] != array[5L] && array[4L] != array[5L] && array[0L] != array[6L] && array[1L] != array[6L] && array[2L] != array[6L] && array[4L] != array[6L] && array[0L] != array[7L] && 
array[1L] != array[7L] && array[2L] != array[7L] && array[3L] != array[7L] && array[5L] != array[7L] && array[6L] != array[7L] && array[0L] != array[8L] && array[1L] != array[8L] && 
array[2L] != array[8L] && array[3L] != array[8L] && array[5L] != array[8L] && array[6L] != array[8L] && array[0L] != array[9L] && array[1L] != array[9L] && array[2L] != array[9L] && 
array[3L] != array[9L] && array[5L] != array[9L] && array[6L] != array[9L] && array[0L] != array[10L] && array[1L] != array[10L] && array[2L] != array[10L] && array[3L] != array[10L] && 
array[5L] != array[10L] && array[6L] != array[10L] && array[0L] != array[11L] && array[1L] != array[11L] && array[2L] != array[11L] && array[3L] != array[11L] && array[5L] != array[11L] && 
array[6L] != array[11L] && array[0L] != array[12L] && array[1L] != array[12L] && array[2L] != array[12L] && array[3L] != array[12L] && array[5L] != array[12L] && array[6L] != array[12L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="f7b1068b-f09b-4840-b5e4-a24a8351a1b1" index="357" run="357" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct11"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=26; 65, 0, 1, 1, 65, 65, 65, 1, 1, 1, 1, 1, 1, 1, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[26];
ints[0] = 65;
ints[2] = 1;
ints[3] = 1;
ints[4] = 65;
ints[5] = 65;
ints[6] = 65;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 65;
ints[25] = 65;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct11()
{
    int i;
    int[] ints = new int[26];
    ints[0] = 65;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 65;
    ints[5] = 65;
    ints[6] = 65;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 65;
    ints[25] = 65;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="c059bd70-48f5-430f-9933-9df95778a30a" index="358" run="358" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct568"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=26; 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 513, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[26];
ints[0] = 1;
ints[2] = 4;
ints[3] = 4;
ints[4] = 1;
ints[5] = 1;
ints[6] = 1;
ints[7] = 4;
ints[8] = 4;
ints[9] = 4;
ints[10] = 4;
ints[11] = 4;
ints[12] = 4;
ints[13] = 4;
ints[14] = 4;
ints[15] = 4;
ints[16] = 4;
ints[17] = 4;
ints[18] = 513;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct568()
{
    int i;
    int[] ints = new int[26];
    ints[0] = 1;
    ints[2] = 4;
    ints[3] = 4;
    ints[4] = 1;
    ints[5] = 1;
    ints[6] = 1;
    ints[7] = 4;
    ints[8] = 4;
    ints[9] = 4;
    ints[10] = 4;
    ints[11] = 4;
    ints[12] = 4;
    ints[13] = 4;
    ints[14] = 4;
    ints[15] = 4;
    ints[16] = 4;
    ints[17] = 4;
    ints[18] = 513;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="a6b109e6-0bd4-4834-acdf-72da5b61509e" index="359" run="359" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct803"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=29; 256, 0, 1, 1, 256, 256, 256, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 256, 256}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[29];
ints[0] = 256;
ints[2] = 1;
ints[3] = 1;
ints[4] = 256;
ints[5] = 256;
ints[6] = 256;
ints[7] = 1;
ints[8] = 1;
ints[9] = 1;
ints[10] = 1;
ints[11] = 1;
ints[12] = 1;
ints[13] = 1;
ints[14] = 1;
ints[15] = 1;
ints[16] = 1;
ints[17] = 1;
ints[18] = 1;
ints[19] = 1;
ints[20] = 1;
ints[21] = 1;
ints[22] = 1;
ints[23] = 1;
ints[24] = 1;
ints[25] = 1;
ints[26] = 1;
ints[27] = 256;
ints[28] = 256;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct803()
{
    int i;
    int[] ints = new int[29];
    ints[0] = 256;
    ints[2] = 1;
    ints[3] = 1;
    ints[4] = 256;
    ints[5] = 256;
    ints[6] = 256;
    ints[7] = 1;
    ints[8] = 1;
    ints[9] = 1;
    ints[10] = 1;
    ints[11] = 1;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 1;
    ints[16] = 1;
    ints[17] = 1;
    ints[18] = 1;
    ints[19] = 1;
    ints[20] = 1;
    ints[21] = 1;
    ints[22] = 1;
    ints[23] = 1;
    ints[24] = 1;
    ints[25] = 1;
    ints[26] = 1;
    ints[27] = 256;
    ints[28] = 256;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="66789915-e441-461d-9c53-357e6f49fd3a" index="360" run="360" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct663"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Solution"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="15" atot="15"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{6, 2, 0, 3, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 6;
ints[1] = 2;
ints[3] = 3;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct663()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 6;
    ints[1] = 2;
    ints[3] = 3;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 4L < array.Length && array[2L] == array[4L] && array.Length == 5L && array[0L] != array[1L] && array[0L] != array[2L] && 
                                                                                                                              array[1L] != array[2L] && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[0L] != array[4L] && array[1L] != array[4L] && array[3L] != array[4L];
]]></pathCondition>
</generatedTest>
<boundary kind="maxruns" value="360" message="maximum runs reached"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxRuns=720" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="720"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxRuns" token="17000346"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000ca"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000005" namespace="Solution"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<coverage domain="usercodeundertest" unit="block" covered="15" total="15" coveredRatio="1"/>
<sourceCoverage xml="cov\e349\cov.xml" html="cov\e349\cov.html"/>
<result name="countDistinct(Int32[])" state="success" duration="13.2407869"/>
<duration start="2019-02-15 20:26:14Z" end="2019-02-15 20:26:27Z" seconds="13.2424455"/>
<trajectory><image src="fix\solutionquestion636858375873820321.trajectories.png" width="800" height="1600"/>
</trajectory>
</exploration>
<coverage domain="usercodeundertest" unit="block" covered="15" total="15" coveredRatio="1"/>
<sourceCoverage xml="cov\t632\cov.xml" html="cov\t632\cov.html"/>
<duration start="2019-02-15 20:26:14Z" end="2019-02-15 20:26:27Z" seconds="13.2663827"/>
</fixture>
<fixture name="Question" type="Submission.Question" typeName="Question" token="2000004" href="fix\meta_projectAddToEnd.641.html"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
</type>
<settings typeUnderTest="Submission.Question"/>
<exploration shortName="countDistinct(Int32[])" fullName="Submission.Question.countDistinct(Int32[])"><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000a4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
<settings maxRuns="60" testEmissionFilter="All"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d1d0d860-5ecd-48bf-a077-2d79cfbee330" index="1" run="1" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct260"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="11" acov="2" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">null</value>
<value name="result">0</value>
<code><![CDATA[int i;
i = Question.countDistinct((int[])null);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct260()
{
    int i;
    i = Question.countDistinct((int[])null);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array == (int[])null;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:26:27Z" category="coverage" message="coverage increased from 0 to 2 blocks (+2) after flipping Submission.Question.countDistinct at 0x000e"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9f819dc2-ade8-4818-9b1c-10133a9f0173" index="2" run="2" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct504"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="0" acov="4" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[0];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct504()
{
    int i;
    int[] ints = new int[0];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && (int)(array.Length) < 2;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:26:27Z" category="coverage" message="coverage increased from 2 to 4 blocks (+2) after flipping Submission.Question.countDistinct at 0x000e"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="633d6521-5aae-4f81-8e45-429a2bd95fbd" index="3" run="3" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException205"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="5" dtot="0" acov="9" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[2];
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException205()
{
    int i;
    int[] ints = new int[2];
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs(39)" method="Question.countDistinct(Int32[])" offset="85" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs" line="39"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000a4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[		}
		for (int i = 0; i < array.Length; i++)
		{]]></beforeSource>
<source><![CDATA[			for (int j = 0; j < array.Length; j++)]]></source>
<afterSource><![CDATA[			{
				if (array[i] != array[j])
				{]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && 1L < array.Length && array[0L] == array[1L] && array[1L] == array[0L] && array.Length == 2L;
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:26:27Z" category="coverage" message="coverage increased from 4 to 9 blocks (+5) after flipping Submission.Question.countDistinct at 0x0022"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="693d5b4e-c4b1-498c-a548-773e2347de86" index="4" run="4" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct888"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0}</value>
<value name="result">2</value>
<code><![CDATA[int i;
int[] ints = new int[2];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(2, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct888()
{
    int i;
    int[] ints = new int[2];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(2, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 1L < array.Length && array.Length == 2L && array[0L] != array[1L] && array[1L] != array[0L];
]]></pathCondition>
</generatedTest>
<log level="message" time="2019-02-15 20:26:27Z" category="coverage" message="coverage increased from 9 to 11 blocks (+2) after flipping Submission.Question.countDistinct at 0x003f"/>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="8b49d945-1d7c-421c-a2bd-b2bdeee5b7a0" index="5" run="5" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException565"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[3];
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException565()
{
    int i;
    int[] ints = new int[3];
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs(39)" method="Question.countDistinct(Int32[])" offset="85" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs" line="39"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000a4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[		}
		for (int i = 0; i < array.Length; i++)
		{]]></beforeSource>
<source><![CDATA[			for (int j = 0; j < array.Length; j++)]]></source>
<afterSource><![CDATA[			{
				if (array[i] != array[j])
				{]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 2L < array.Length && array[0L] == array[2L] && array.Length == 3L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="fdad0f5a-69da-482f-abae-92f07ceffeba" index="6" run="6" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException969"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[0] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException969()
{
    int i;
    int[] ints = new int[3];
    ints[0] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs(39)" method="Question.countDistinct(Int32[])" offset="85" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs" line="39"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000a4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[		}
		for (int i = 0; i < array.Length; i++)
		{]]></beforeSource>
<source><![CDATA[			for (int j = 0; j < array.Length; j++)]]></source>
<afterSource><![CDATA[			{
				if (array[i] != array[j])
				{]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && 1L < array.Length && 2 < (int)(array.Length) && array[0L] != array[1L] && array[1L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="24803885-46da-4a7e-879c-bb7d0f263119" index="7" run="7" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct419"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[2];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct419()
{
    int i;
    int[] ints = new int[2];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 1L < array.Length && array[0L] == array[1L] && array[1L] == array[0L] && array.Length == 2L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d945a151-3051-4b10-b6e8-c2c48809f640" index="8" run="8" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct578"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct578()
{
    int i;
    int[] ints = new int[3];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 2L < array.Length && array.Length == 3L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="937a1bb8-239e-43f0-8337-42a10076a6e5" index="9" run="9" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException885"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[4];
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException885()
{
    int i;
    int[] ints = new int[4];
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs(37)" method="Question.countDistinct(Int32[])" offset="102" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs" line="37"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000a4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[		{
			return 0;
		}]]></beforeSource>
<source><![CDATA[		for (int i = 0; i < array.Length; i++)]]></source>
<afterSource><![CDATA[		{
			for (int j = 0; j < array.Length; j++)
			{]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 3L < array.Length && array[0L] == array[3L] && array.Length == 4L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="35ab3c48-700a-497e-9039-47efd9194aeb" index="10" run="10" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct90"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[3];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct90()
{
    int i;
    int[] ints = new int[3];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && 2L < array.Length && array[0L] == array[2L] && array[1L] == array[0L] && array[1L] == array[2L] && array[2L] == array[0L] && array[2L] == array[1L] && array.Length == 3L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="c489e75c-0d76-41db-9a0e-82106fd17145" index="11" run="11" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct361"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[4];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct361()
{
    int i;
    int[] ints = new int[4];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && array[0L] == array[2L] && 3L < array.Length && array[0L] == array[3L] && array[1L] == array[0L] && array[1L] == array[2L] && array[1L] == array[3L] && 
                                                                                                                                                              array[2L] == array[0L] && array[2L] == array[1L] && array[2L] == array[3L] && array[3L] == array[0L] && array[3L] == array[1L] && array[3L] == array[2L] && array.Length == 4L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a9b175d2-240f-489b-b84c-6bc6bff71022" index="12" run="12" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException588"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0}</value>
<code><![CDATA[int i;
int[] ints = new int[5];
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException588()
{
    int i;
    int[] ints = new int[5];
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs(39)" method="Question.countDistinct(Int32[])" offset="85" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs" line="39"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000a4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[		}
		for (int i = 0; i < array.Length; i++)
		{]]></beforeSource>
<source><![CDATA[			for (int j = 0; j < array.Length; j++)]]></source>
<afterSource><![CDATA[			{
				if (array[i] != array[j])
				{]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[0L] == array[3L] && 4 < (int)(array.Length) && 4L < array.Length && array[0L] == array[4L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="da75bd2d-d711-4119-a588-e39569f1df47" index="13" run="13" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct358"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[5];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct358()
{
    int i;
    int[] ints = new int[5];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[0L] == array[2L] && array[0L] == array[3L] && 4L < array.Length && array[0L] == array[4L] && array[1L] == array[0L] && array[1L] == array[2L] && array[1L] == array[3L] && 
                                                                                                                                                                                      array[1L] == array[4L] && array[2L] == array[0L] && array[2L] == array[1L] && array[2L] == array[3L] && array[2L] == array[4L] && array[3L] == array[0L] && array[3L] == array[1L] && 
                                                                                                                                                                                                                                                                                                                                                  array[3L] == array[2L] && array[3L] == array[4L] && array[4L] == array[0L] && array[4L] == array[1L] && array[4L] == array[2L] && array[4L] == array[3L] && array.Length == 5L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="36f37ac2-d79c-40e4-bee1-b2905145f433" index="14" run="14" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException54"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 1}</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[2] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException54()
{
    int i;
    int[] ints = new int[3];
    ints[2] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs(39)" method="Question.countDistinct(Int32[])" offset="85" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs" line="39"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000a4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[		}
		for (int i = 0; i < array.Length; i++)
		{]]></beforeSource>
<source><![CDATA[			for (int j = 0; j < array.Length; j++)]]></source>
<afterSource><![CDATA[			{
				if (array[i] != array[j])
				{]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 2 < (int)(array.Length) && 2L < array.Length && array[1L] == array[0L] && array[0L] != array[2L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5d0689d0-0411-4f6c-89e7-75396cd303e1" index="15" run="15" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct212"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct212()
{
    int i;
    int[] ints = new int[3];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 2L < array.Length && array[1L] == array[0L] && array.Length == 3L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="0252faae-87d3-4aaf-868a-132a3adc8cbd" index="16" run="16" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct39"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[6];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct39()
{
    int i;
    int[] ints = new int[6];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[0L] == array[3L] && array[0L] == array[4L] && 
                                                                                                             5L < array.Length && array[0L] == array[5L] && array[1L] == array[0L] && array[1L] == array[2L] && array[1L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && 
                                                                                                                                                                                                                                                                    array[2L] == array[0L] && array[2L] == array[1L] && array[2L] == array[3L] && array[2L] == array[4L] && array[2L] == array[5L] && array[3L] == array[0L] && array[3L] == array[1L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                array[3L] == array[2L] && array[3L] == array[4L] && array[3L] == array[5L] && array[4L] == array[0L] && array[4L] == array[1L] && array[4L] == array[2L] && array[4L] == array[3L] && 
array[4L] == array[5L] && array[5L] == array[0L] && array[5L] == array[1L] && array[5L] == array[2L] && array[5L] == array[3L] && array[5L] == array[4L] && array.Length == 6L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="8adc26dc-bbbe-4c2b-be15-0d9b1b7ce792" index="17" run="17" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct828"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1}</value>
<value name="result">3</value>
<code><![CDATA[int i;
int[] ints = new int[3];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(3, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct828()
{
    int i;
    int[] ints = new int[3];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(3, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 2L < array.Length && array[2L] == array[0L] && array.Length == 3L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="ce8ecc0d-3b14-4e51-be62-eea1817da0d3" index="18" run="18" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct659"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[7];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct659()
{
    int i;
    int[] ints = new int[7];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[0L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && 6L < array.Length && array[0L] == array[6L] && array[1L] == array[0L] && array[1L] == array[2L] && 
                                                                                                                                                                                                                array[1L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[1L] == array[6L] && array[2L] == array[0L] && array[2L] == array[1L] && array[2L] == array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                            array[2L] == array[4L] && array[2L] == array[5L] && array[2L] == array[6L] && array[3L] == array[0L] && array[3L] == array[1L] && array[3L] == array[2L] && array[3L] == array[4L] && 
array[3L] == array[5L] && array[3L] == array[6L] && array[4L] == array[0L] && array[4L] == array[1L] && array[4L] == array[2L] && array[4L] == array[3L] && array[4L] == array[5L] && 
array[4L] == array[6L] && array[5L] == array[0L] && array[5L] == array[1L] && array[5L] == array[2L] && array[5L] == array[3L] && array[5L] == array[4L] && array[5L] == array[6L] && 
array[6L] == array[0L] && array[6L] == array[1L] && array[6L] == array[2L] && array[6L] == array[3L] && array[6L] == array[4L] && array[6L] == array[5L] && array.Length == 7L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="faca6a93-52d3-463e-9b16-02b53a4dd1ee" index="19" run="19" status="minimizationrequest" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinctThrowsMinimizationRequestException562"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 1}</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[3] = 1;
i = Question.countDistinct(ints);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void countDistinctThrowsMinimizationRequestException562()
{
    int i;
    int[] ints = new int[4];
    ints[3] = 1;
    i = Question.countDistinct(ints);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<exceptionChain><exception typeDisplayName="MinimizationRequestException" source="Microsoft.ExtendedReflection"><message><![CDATA[Exception of type 'Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException' was thrown.]]></message>
<type spec="Class"><definition assemblyName="Microsoft.ExtendedReflection" name="MinimizationRequestException" token="2000539" namespace="Microsoft.ExtendedReflection.Interpretation.Interpreter"/>
</type>
<stackTrace><frame value="  at Question.countDistinct(Int32[]) in C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs(39)" method="Question.countDistinct(Int32[])" offset="85" file="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\1525456207.cs" line="39"><method assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000a4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[		}
		for (int i = 0; i < array.Length; i++)
		{]]></beforeSource>
<source><![CDATA[			for (int j = 0; j < array.Length; j++)]]></source>
<afterSource><![CDATA[			{
				if (array[i] != array[j])
				{]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 3 < (int)(array.Length) && 3L < array.Length && array[0L] != array[3L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="d8e4f38c-37e0-4ca0-9907-db99ea0c8e27" index="20" run="20" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct614"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct614()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 3L < array.Length && array[1L] == array[0L] && array[1L] == array[2L] && 
                                                                                                                                  array[2L] == array[0L] && array[2L] == array[1L] && array.Length == 4L && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[3L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="2847bc9b-ca02-4ed1-9356-83e7ab7423a7" index="21" run="21" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct166"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[11];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct166()
{
    int i;
    int[] ints = new int[11];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="89bc0978-c253-4c63-a8e3-070aeb4f797a" index="22" run="22" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct731"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[8];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct731()
{
    int i;
    int[] ints = new int[8];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && 
                                                         array[0L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[0L] == array[6L] && 7L < array.Length && array[0L] == array[7L] && array[1L] == array[0L] && 
                                                                                                                                                                                                                array[1L] == array[2L] && array[1L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[1L] == array[6L] && array[1L] == array[7L] && array[2L] == array[0L] && 
                                                                                                                                                                                                                                                                                                                                                                            array[2L] == array[1L] && array[2L] == array[3L] && array[2L] == array[4L] && array[2L] == array[5L] && array[2L] == array[6L] && array[2L] == array[7L] && array[3L] == array[0L] && 
array[3L] == array[1L] && array[3L] == array[2L] && array[3L] == array[4L] && array[3L] == array[5L] && array[3L] == array[6L] && array[3L] == array[7L] && array[4L] == array[0L] && 
array[4L] == array[1L] && array[4L] == array[2L] && array[4L] == array[3L] && array[4L] == array[5L] && array[4L] == array[6L] && array[4L] == array[7L] && array[5L] == array[0L] && 
array[5L] == array[1L] && array[5L] == array[2L] && array[5L] == array[3L] && array[5L] == array[4L] && array[5L] == array[6L] && array[5L] == array[7L] && array[6L] == array[0L] && 
array[6L] == array[1L] && array[6L] == array[2L] && array[6L] == array[3L] && array[6L] == array[4L] && array[6L] == array[5L] && array[6L] == array[7L] && array[7L] == array[0L] && 
array[7L] == array[1L] && array[7L] == array[2L] && array[7L] == array[3L] && array[7L] == array[4L] && array[7L] == array[5L] && array[7L] == array[6L] && array.Length == 8L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="dc4fd4a5-37d2-4c7d-ac7f-8a5cc9a0817a" index="23" run="23" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct269"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 0, 0, 0}</value>
<value name="result">7</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(7, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct269()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(7, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 6L < array.Length && array.Length == 7L && 
                                                    array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="2a31fdd7-f1c2-46b0-aed2-699a609b46b9" index="24" run="24" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct373"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">11</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(11, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct373()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(11, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 10L < array.Length && array.Length == 11L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && 
                                                                                                                                                          array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="16cc234e-ec50-4a6d-844b-9549d126eefc" index="25" run="25" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct72501"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">12</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(12, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct72501()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(12, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       11L < array.Length && array.Length == 12L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && 
                                                                                                                                                            array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L] && array[11L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="7b9beab3-aef9-45aa-be4b-570b68355c9c" index="26" run="26" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct14501"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 0, 0, 0}</value>
<value name="result">7</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(7, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct14501()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(7, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[0L] && 6L < array.Length && array.Length == 7L && 
                                                                              array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="0ef5592c-26b4-4dcd-b87f-61802beac205" index="27" run="27" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct69901"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 0, 0}</value>
<value name="result">6</value>
<code><![CDATA[int i;
int[] ints = new int[6];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(6, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct69901()
{
    int i;
    int[] ints = new int[6];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(6, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[0L] && 
                               5L < array.Length && array.Length == 6L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="a7c4bd10-28fe-4416-994e-d6fd3b654184" index="28" run="28" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct82901"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">8</value>
<code><![CDATA[int i;
int[] ints = new int[8];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(8, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct82901()
{
    int i;
    int[] ints = new int[8];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(8, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 7L < array.Length && array.Length == 8L && array[0L] != array[1L] && 
                                                                          array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="6ccef240-9ff7-457f-845d-364f2481aafa" index="29" run="29" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct59701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[9];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct59701()
{
    int i;
    int[] ints = new int[9];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[0L] == array[3L] && array[0L] == array[4L] && 
                                                                                                             array[0L] == array[5L] && array[0L] == array[6L] && array[0L] == array[7L] && 8L < array.Length && array[0L] == array[8L] && array[1L] == array[0L] && array[1L] == array[2L] && 
                                                                                                                                                                                                                                                                    array[1L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && array[1L] == array[6L] && array[1L] == array[7L] && array[1L] == array[8L] && array[2L] == array[0L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                array[2L] == array[1L] && array[2L] == array[3L] && array[2L] == array[4L] && array[2L] == array[5L] && array[2L] == array[6L] && array[2L] == array[7L] && array[2L] == array[8L] && 
array[3L] == array[0L] && array[3L] == array[1L] && array[3L] == array[2L] && array[3L] == array[4L] && array[3L] == array[5L] && array[3L] == array[6L] && array[3L] == array[7L] && 
array[3L] == array[8L] && array[4L] == array[0L] && array[4L] == array[1L] && array[4L] == array[2L] && array[4L] == array[3L] && array[4L] == array[5L] && array[4L] == array[6L] && 
array[4L] == array[7L] && array[4L] == array[8L] && array[5L] == array[0L] && array[5L] == array[1L] && array[5L] == array[2L] && array[5L] == array[3L] && array[5L] == array[4L] && 
array[5L] == array[6L] && array[5L] == array[7L] && array[5L] == array[8L] && array[6L] == array[0L] && array[6L] == array[1L] && array[6L] == array[2L] && array[6L] == array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            array[6L] == array[4L] && array[6L] == array[5L] && array[6L] == array[7L] && array[6L] == array[8L] && array[7L] == array[0L] && array[7L] == array[1L] && array[7L] == array[2L] && 
array[7L] == array[3L] && array[7L] == array[4L] && array[7L] == array[5L] && array[7L] == array[6L] && array[7L] == array[8L] && array[8L] == array[0L] && array[8L] == array[1L] && 
array[8L] == array[2L] && array[8L] == array[3L] && array[8L] == array[4L] && array[8L] == array[5L] && array[8L] == array[6L] && array[8L] == array[7L] && array.Length == 9L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="82ff98b8-1dd3-4156-abec-81b2c0d283be" index="30" run="30" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct37701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">9</value>
<code><![CDATA[int i;
int[] ints = new int[9];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(9, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct37701()
{
    int i;
    int[] ints = new int[9];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(9, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 8L < array.Length && array.Length == 9L && array[0L] != array[1L] && array[1L] != array[0L] && 
                                                                                                    array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="72751670-fe8a-4531-9111-f1bcad990728" index="31" run="31" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct97401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct97401()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[0L] && 3L < array.Length && array.Length == 4L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L] && array[3L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="8d1ebbaf-e423-4d1e-b0c7-939e0740f3b6" index="32" run="32" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct30001"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">10</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(10, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct30001()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(10, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 9L < array.Length && array.Length == 10L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && 
                                                                                                                               array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="790de6a4-58cf-4b10-8d4a-d1f855fe8d33" index="33" run="33" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct61901"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[10];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct61901()
{
    int i;
    int[] ints = new int[10];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[0L] == array[2L] && array[0L] == array[3L] && array[0L] == array[4L] && array[0L] == array[5L] && array[0L] == array[6L] && array[0L] == array[7L] && array[0L] == array[8L] && 
                                                                                                                                                                                           9L < array.Length && array[0L] == array[9L] && array[1L] == array[0L] && array[1L] == array[2L] && array[1L] == array[3L] && array[1L] == array[4L] && array[1L] == array[5L] && 
                                                                                                                                                                                                                                                                                                                                                  array[1L] == array[6L] && array[1L] == array[7L] && array[1L] == array[8L] && array[1L] == array[9L] && array[2L] == array[0L] && array[2L] == array[1L] && array[2L] == array[3L] && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              array[2L] == array[4L] && array[2L] == array[5L] && array[2L] == array[6L] && array[2L] == array[7L] && array[2L] == array[8L] && array[2L] == array[9L] && array[3L] == array[0L] && 
array[3L] == array[1L] && array[3L] == array[2L] && array[3L] == array[4L] && array[3L] == array[5L] && array[3L] == array[6L] && array[3L] == array[7L] && array[3L] == array[8L] && 
array[3L] == array[9L] && array[4L] == array[0L] && array[4L] == array[1L] && array[4L] == array[2L] && array[4L] == array[3L] && array[4L] == array[5L] && array[4L] == array[6L] && 
array[4L] == array[7L] && array[4L] == array[8L] && array[4L] == array[9L] && array[5L] == array[0L] && array[5L] == array[1L] && array[5L] == array[2L] && array[5L] == array[3L] && 
array[5L] == array[4L] && array[5L] == array[6L] && array[5L] == array[7L] && array[5L] == array[8L] && array[5L] == array[9L] && array[6L] == array[0L] && array[6L] == array[1L] && 
array[6L] == array[2L] && array[6L] == array[3L] && array[6L] == array[4L] && array[6L] == array[5L] && array[6L] == array[7L] && array[6L] == array[8L] && array[6L] == array[9L] && 
array[7L] == array[0L] && array[7L] == array[1L] && array[7L] == array[2L] && array[7L] == array[3L] && array[7L] == array[4L] && array[7L] == array[5L] && array[7L] == array[6L] && 
array[7L] == array[8L] && array[7L] == array[9L] && array[8L] == array[0L] && array[8L] == array[1L] && array[8L] == array[2L] && array[8L] == array[3L] && array[8L] == array[4L] && 
array[8L] == array[5L] && array[8L] == array[6L] && array[8L] == array[7L] && array[8L] == array[9L] && array[9L] == array[0L] && array[9L] == array[1L] && array[9L] == array[2L] && 
array[9L] == array[3L] && array[9L] == array[4L] && array[9L] == array[5L] && array[9L] == array[6L] && array[9L] == array[7L] && array[9L] == array[8L] && array.Length == 10L;
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="db01ac60-f48d-456c-80d0-9585dcf75ef8" index="34" run="34" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct49201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct49201()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[2L] == array[0L] && 4L < array.Length && array.Length == 5L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L] && array[3L] != array[0L] && array[4L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="c3640e14-93b4-4f3d-86e3-eefb3972d3b5" index="35" run="35" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct4001"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">13</value>
<code><![CDATA[int i;
int[] ints = new int[13];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(13, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct4001()
{
    int i;
    int[] ints = new int[13];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(13, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 12L < array.Length && 
                               array.Length == 13L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && 
                                                                                                                                                                                        array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L] && array[11L] != array[0L] && array[12L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="9e00df38-2505-4416-b0ea-227a88bef4ed" index="36" run="36" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct56801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">14</value>
<code><![CDATA[int i;
int[] ints = new int[14];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(14, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct56801()
{
    int i;
    int[] ints = new int[14];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(14, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 13L < array.Length && array.Length == 14L && 
                                                     array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && 
                                                                                                                                                                                                                 array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L] && array[11L] != array[0L] && array[12L] != array[0L] && array[13L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="c0b89770-1f12-42d6-bf55-9c41e5d0d976" index="37" run="37" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct64801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0, 0, 0}</value>
<value name="result">7</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(7, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct64801()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(7, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[1L] == array[0L] && 6L < array.Length && array.Length == 7L && 
                                                                                                        array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="1030b111-f98c-4420-815d-97e76018ded2" index="38" run="38" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct93501"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[12];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct93501()
{
    int i;
    int[] ints = new int[12];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b4f8fe17-9726-44e2-8620-6b5513d26553" index="39" run="39" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct75201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">15</value>
<code><![CDATA[int i;
int[] ints = new int[15];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(15, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct75201()
{
    int i;
    int[] ints = new int[15];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(15, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 14L < array.Length && array.Length == 15L && array[0L] != array[1L] && 
                                                                            array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && 
                                                                                                                                                                                                                                        array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L] && array[11L] != array[0L] && array[12L] != array[0L] && array[13L] != array[0L] && array[14L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="25694d96-8fc5-4dcf-b49e-b4759582128d" index="40" run="40" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct2901"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 1, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct2901()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[0L] == array[2L] && array[1L] == array[0L] && array[1L] == array[2L] && array[2L] == array[0L] && 
                                                                                                                                       array[2L] == array[1L] && 4L < array.Length && array.Length == 5L && array[0L] != array[3L] && array[1L] != array[3L] && array[2L] != array[3L] && array[3L] != array[0L] && array[4L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="8e216c29-c11c-458c-80b1-e3447188e375" index="41" run="41" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct63501"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 1, 0, 0, 0}</value>
<value name="result">7</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(7, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct63501()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(7, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[3L] == array[0L] && 6L < array.Length && array.Length == 7L && 
                                                                              array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[1L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.01"/>
<generatedTest id="4f26e80d-6314-4f8e-91bc-f0638407c4b8" index="42" run="42" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct14301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[13];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct14301()
{
    int i;
    int[] ints = new int[13];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ed26e329-13b4-4c1a-882b-ec1f7fa4374b" index="43" run="43" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct14701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">11</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(11, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct14701()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(11, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[1L] == array[0L] && 10L < array.Length && array.Length == 11L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[0L] && array[3L] != array[0L] && 
                                                                                                                                                                                    array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="059a9825-3b75-4fd3-a18a-40244e370c5b" index="44" run="44" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct90201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">16</value>
<code><![CDATA[int i;
int[] ints = new int[16];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(16, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct90201()
{
    int i;
    int[] ints = new int[16];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(16, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 15L < array.Length && array.Length == 16L && array[0L] != array[1L] && array[1L] != array[0L] && 
                                                                                                      array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && 
                                                                                                                                                                                                                                                                  array[9L] != array[0L] && array[10L] != array[0L] && array[11L] != array[0L] && array[12L] != array[0L] && array[13L] != array[0L] && array[14L] != array[0L] && array[15L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="74c86e0f-6bdb-4b11-a82a-fde0df75c2ef" index="45" run="45" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct20601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[14];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct20601()
{
    int i;
    int[] ints = new int[14];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="93807b70-2782-4a07-a690-3df9dd87f436" index="46" run="46" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct63401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">17</value>
<code><![CDATA[int i;
int[] ints = new int[17];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(17, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct63401()
{
    int i;
    int[] ints = new int[17];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(17, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 16L < array.Length && array.Length == 17L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && 
                                                                                                                                array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && 
                                                                                                                                                                                                                                                                                            array[10L] != array[0L] && array[11L] != array[0L] && array[12L] != array[0L] && array[13L] != array[0L] && array[14L] != array[0L] && array[15L] != array[0L] && array[16L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="20148ed1-f694-4b69-ae21-50909d0959e4" index="47" run="47" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct16901"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0, 0}</value>
<value name="result">5</value>
<code><![CDATA[int i;
int[] ints = new int[5];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(5, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct16901()
{
    int i;
    int[] ints = new int[5];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(5, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && 
                               array[1L] == array[0L] && 4L < array.Length && array.Length == 5L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1358975e-dd77-4742-bb9b-67709b4107d2" index="48" run="48" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct28201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 1, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct28201()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[0L] == array[1L] && array[1L] == array[0L] && 3L < array.Length && array.Length == 4L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[0L] && array[3L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="fcced31e-4d09-41db-b295-b1f947a0298e" index="49" run="49" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct29001"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[15];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct29001()
{
    int i;
    int[] ints = new int[15];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="afa65e0c-8450-4ae4-8b02-94802c5d4172" index="50" run="50" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct75501"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">18</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(18, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct75501()
{
    int i;
    int[] ints = new int[18];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(18, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 17L < array.Length && array.Length == 18L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && 
                                                                                                                                                          array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L] && 
                                                                                                                                                                                                                                                                                                                      array[11L] != array[0L] && array[12L] != array[0L] && array[13L] != array[0L] && array[14L] != array[0L] && array[15L] != array[0L] && array[16L] != array[0L] && array[17L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="3690adaa-8294-4326-86e7-b66b4dad17f1" index="51" run="51" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct42701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[16];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct42701()
{
    int i;
    int[] ints = new int[16];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="915232ba-0e76-473e-9e11-0b1d2b71ae6b" index="52" run="52" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct77901"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 0, 0}</value>
<value name="result">4</value>
<code><![CDATA[int i;
int[] ints = new int[4];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(4, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct77901()
{
    int i;
    int[] ints = new int[4];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(4, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 3L < array.Length && array.Length == 4L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.02"/>
<generatedTest id="683f26d4-515f-4248-82eb-1e450b65ec6d" index="53" run="53" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct46801"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[17];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct46801()
{
    int i;
    int[] ints = new int[17];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="1ffe9c69-2ecd-42a7-9a67-5b09eb9c7067" index="54" run="54" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct4201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=11; 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">11</value>
<code><![CDATA[int i;
int[] ints = new int[11];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(11, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct4201()
{
    int i;
    int[] ints = new int[11];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(11, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       array[2L] == array[0L] && 10L < array.Length && array.Length == 11L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L] && array[3L] != array[0L] && 
                                                                                                                                                            array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="5d39b86e-9824-4b3d-977d-90c2d9f921ba" index="55" run="55" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct73701"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 1, 0, 0, 0}</value>
<value name="result">7</value>
<code><![CDATA[int i;
int[] ints = new int[7];
ints[0] = 1;
ints[2] = 1;
ints[3] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(7, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct73701()
{
    int i;
    int[] ints = new int[7];
    ints[0] = 1;
    ints[2] = 1;
    ints[3] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(7, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[0L] && array[3L] == array[0L] && 6L < array.Length && array.Length == 7L && 
                                                                                                        array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L] && array[3L] != array[1L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="b3e72b3a-6072-4118-bf7a-bfbb1b1ca208" index="56" run="56" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct98601"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=19; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">19</value>
<code><![CDATA[int i;
int[] ints = new int[19];
ints[0] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(19, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct98601()
{
    int i;
    int[] ints = new int[19];
    ints[0] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(19, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && 
       18L < array.Length && array.Length == 19L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && 
                                                                                                                                                            array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L] && array[11L] != array[0L] && 
                                                                                                                                                                                                                                                                                                                         array[12L] != array[0L] && array[13L] != array[0L] && array[14L] != array[0L] && array[15L] != array[0L] && array[16L] != array[0L] && array[17L] != array[0L] && array[18L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.03"/>
<generatedTest id="3cde8842-1e02-4900-b529-99750e3f28dd" index="57" run="57" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct37201"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">0</value>
<code><![CDATA[int i;
int[] ints = new int[18];
i = Question.countDistinct(ints);
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct37201()
{
    int i;
    int[] ints = new int[18];
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.04"/>
<generatedTest id="ef59807d-83ab-454b-89fb-356e07b75fd4" index="58" run="58" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct73501"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}</value>
<value name="result">18</value>
<code><![CDATA[int i;
int[] ints = new int[18];
ints[17] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(18, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct73501()
{
    int i;
    int[] ints = new int[18];
    ints[17] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(18, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="57803137-bcde-449d-b248-b8a2e529730c" index="59" run="59" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct3401"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{1, 0, 1, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">10</value>
<code><![CDATA[int i;
int[] ints = new int[10];
ints[0] = 1;
ints[2] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(10, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct3401()
{
    int i;
    int[] ints = new int[10];
    ints[0] = 1;
    ints[2] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(10, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[2L] == array[0L] && 9L < array.Length && array.Length == 10L && array[0L] != array[1L] && array[1L] != array[0L] && array[2L] != array[1L] && 
                                                                                                                                                         array[3L] != array[0L] && array[4L] != array[0L] && array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L];
]]></pathCondition>
</generatedTest>
<test name="countDistinct" state="success" duration="0.00"/>
<generatedTest id="ab2b9b9c-e9ed-4395-be53-be652cbb08bc" index="60" run="60" status="normaltermination" generated="true" new="true" assemblyName="meta_projectAddToEnd" name="countDistinct64301"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="meta_projectAddToEnd" name="Question" token="ffffffff" namespace="Submission"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="11" atot="11"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="array">{Length=12; 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}</value>
<value name="result">12</value>
<code><![CDATA[int i;
int[] ints = new int[12];
ints[0] = 1;
ints[1] = 1;
i = Question.countDistinct(ints);
Assert.AreEqual<int>(12, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(Question))]
public void countDistinct64301()
{
    int i;
    int[] ints = new int[12];
    ints[0] = 1;
    ints[1] = 1;
    i = Question.countDistinct(ints);
    Assert.AreEqual<int>(12, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="meta_projectAddToEnd" location="C:\Users\Vijayendra Jagtap\NETTools\LearningCode\codeSimilarity\editedMetaProject\bin\Debug\meta_projectAddToEnd.dll"/>
<pathCondition><![CDATA[return array != (int[])null && array[0L] == array[1L] && array[1L] == array[0L] && 
                                                         11L < array.Length && array.Length == 12L && array[0L] != array[2L] && array[1L] != array[2L] && array[2L] != array[0L] && array[3L] != array[0L] && array[4L] != array[0L] && 
                                                                                                                                                                                                              array[5L] != array[0L] && array[6L] != array[0L] && array[7L] != array[0L] && array[8L] != array[0L] && array[9L] != array[0L] && array[10L] != array[0L] && array[11L] != array[0L];
]]></pathCondition>
</generatedTest>
<boundary kind="maxruns" value="60" message="maximum runs reached"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxRuns=120" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="120"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxRuns" token="17000346"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="meta_projectAddToEnd" name="countDistinct" static="true" token="60000a4"><declaringType assemblyName="meta_projectAddToEnd" name="Question" token="2000004" namespace="Submission"/>
<parameter name="array" position="0"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</elementType>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<coverage domain="usercodeundertest" unit="block" covered="11" total="11" coveredRatio="1"/>
<sourceCoverage xml="cov\e352\cov.xml" html="cov\e352\cov.html"/>
<result name="countDistinct(Int32[])" state="success" duration="1.2513691"/>
<duration start="2019-02-15 20:26:27Z" end="2019-02-15 20:26:28Z" seconds="1.2517178"/>
<trajectory><image src="fix\submissionquesti636858375886596788.trajectories.png" width="800" height="1600"/>
</trajectory>
</exploration>
<coverage domain="usercodeundertest" unit="block" covered="11" total="11" coveredRatio="1"/>
<sourceCoverage xml="cov\t641\cov.xml" html="cov\t641\cov.html"/>
<duration start="2019-02-15 20:26:27Z" end="2019-02-15 20:26:28Z" seconds="1.2596368"/>
</fixture>
<coverage domain="usercodeundertest" unit="block" covered="80" total="84" coveredRatio="0.95238095238095233"/>
<sourceCoverage xml="cov\a56906864\cov.xml" html="cov\a56906864\cov.html"/>
<duration start="2019-02-15 20:26:06Z" end="2019-02-15 20:26:28Z" seconds="22.2600306"/>
<frameTreeRef exceptionCount="1"/>
</assembly>
<duration start="2019-02-15 20:26:06Z" end="2019-02-15 20:26:28Z" seconds="22.3692586"/>
<background/>
</pex>
